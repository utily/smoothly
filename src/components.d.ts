/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Color, Data, Fill, Icon, Message, Notice, Submit, Trigger } from "./model";
import { FunctionalComponent, VNode } from "@stencil/core";
import { Button } from "./components/button/Button";
import { Editable } from "./components/input/Editable";
import { isoly } from "isoly";
import { tidily } from "tidily";
import { selectively } from "selectively";
import { Filter } from "./components/filter/Filter";
import { Looks } from "./components/input/Looks";
import { isly } from "isly";
import { Key } from "./components/input/Key";
import { RGB } from "./model/Color/RGB";
import { Selectable } from "./components/input/radio/Selected";
export { Color, Data, Fill, Icon, Message, Notice, Submit, Trigger } from "./model";
export { FunctionalComponent, VNode } from "@stencil/core";
export { Button } from "./components/button/Button";
export { Editable } from "./components/input/Editable";
export { isoly } from "isoly";
export { tidily } from "tidily";
export { selectively } from "selectively";
export { Filter } from "./components/filter/Filter";
export { Looks } from "./components/input/Looks";
export { isly } from "isly";
export { Key } from "./components/input/Key";
export { RGB } from "./model/Color/RGB";
export { Selectable } from "./components/input/radio/Selected";
export namespace Components {
    interface SmoothlyApp {
        "color": Color;
        "home"?: string;
        "label"?: string;
        "menuOpen": boolean;
        "selectRoom": (path: string) => Promise<void>;
    }
    interface SmoothlyAppDemo {
        "baseUrl": string;
    }
    interface SmoothlyAppRoom {
        "content"?: VNode | FunctionalComponent;
        "disabled": boolean;
        "getContent": () => Promise<HTMLElement | undefined>;
        "icon"?: Icon;
        "label"?: string;
        "path": string | URLPattern;
        "selected"?: boolean;
        "setSelected": (selected: boolean, options?: { history?: boolean; }) => Promise<void>;
    }
    interface SmoothlyBackToTop {
        "bottom": string;
        "opacity": string;
        "right": string;
    }
    interface SmoothlyBurger {
        "mediaQuery": string;
        "open": boolean;
        "visible": boolean;
    }
    interface SmoothlyButton {
        "color"?: Color;
        "disabled": boolean;
        "expand"?: "block" | "full";
        "fill"?: Fill;
        "link"?: string;
        "shape"?: "rounded";
        "size": "small" | "large" | "icon" | "flexible";
        "type": Button.Properties["type"];
    }
    interface SmoothlyButtonConfirm {
        "color"?: Color;
        "disabled": boolean;
        "doubleClickTime": number;
        "expand"?: "block" | "full";
        "fill"?: Fill;
        "name": string;
        "shape"?: "rounded";
        "size": "small" | "large" | "icon" | "flexible";
    }
    interface SmoothlyButtonDemo {
    }
    interface SmoothlyCalendar {
        "doubleInput": boolean;
        "end"?: isoly.Date;
        "max": isoly.Date;
        "min": isoly.Date;
        "month"?: isoly.Date;
        "start"?: isoly.Date;
        "value"?: isoly.Date;
    }
    interface SmoothlyCheckbox {
        "checked": boolean;
        "clear": () => Promise<void>;
        "disabled": boolean;
        "intermediate": boolean;
        "name": string;
        "size": "tiny" | "small" | "medium" | "large";
        "toggle": () => Promise<void>;
        "unavailable": boolean;
        "value": any;
    }
    interface SmoothlyColor {
        "color"?: Color;
    }
    interface SmoothlyCountry {
        "text": "alpha2" | "name" | "none";
        "value": isoly.CountryCode.Alpha2;
    }
    interface SmoothlyDialog {
        "closable": boolean;
        "color": Color | undefined;
        "header": string | undefined;
        "open": boolean;
    }
    interface SmoothlyDialogDemo {
    }
    interface SmoothlyDisplay {
        "collapseDepth"?: number;
        "country"?: isoly.CountryCode.Alpha2;
        "currency"?: isoly.Currency;
        "format"?: isoly.DateTime.Format;
        "label"?: string;
        "toInteger"?: boolean;
        "type": tidily.Type | "json";
        "value"?: any;
    }
    interface SmoothlyDisplayDemo {
    }
    interface SmoothlyDisplayDemoJson {
    }
    interface SmoothlyDisplayJson {
        "collapseDepth"?: number;
        "value": any;
    }
    interface SmoothlyDisplayJsonObject {
        "collapseDepth"?: number;
        "value": Record<string, any> | any[];
    }
    interface SmoothlyDisplayJsonPrimitive {
        "value": any;
    }
    interface SmoothlyDisplayJsonRecordKey {
        "value": any;
    }
    interface SmoothlyFilter {
    }
    interface SmoothlyFilterField {
        "clear": () => Promise<void>;
        "criteria": selectively.Criteria;
    }
    interface SmoothlyFilterInput {
        "label": string;
        "placeholder": string;
        "property": string;
    }
    interface SmoothlyFilterSelect {
        "label": string;
        "looks"?: Looks;
        "menuHeight"?: `${number}items` | `${number}rem` | `${number}px` | `${number}vh` | undefined;
        "multiple": boolean;
        "property": string;
        "type": "array" | "string";
    }
    interface SmoothlyFilterToggle {
        "active": boolean;
        "flip": boolean;
        "icon": Icon;
        "not": boolean;
        "properties": Record<string, string>;
        "toolTip": string;
    }
    interface SmoothlyForm {
        "action"?: string;
        "changed": boolean;
        "clear": () => Promise<void>;
        "color"?: Color;
        "edit": (editable: boolean) => Promise<void>;
        "listen": (property: "changed", listener: (parent: Editable) => Promise<void>) => Promise<void>;
        "looks"?: Looks;
        "name"?: string;
        "prevent": boolean;
        "processing"?: Promise<boolean>;
        "readonly": boolean;
        "removeInput": (name: string) => Promise<void>;
        "reset": () => Promise<void>;
        "setInitialValue": () => Promise<void>;
        "submit": (remove?: boolean) => Promise<void>;
        "type"?: "update" | "change" | "fetch" | "create";
        "validator"?: isly.Type<any>;
        "value": Readonly<Data>;
    }
    interface SmoothlyFormDemo {
    }
    interface SmoothlyFormDemoAll {
    }
    interface SmoothlyFormDemoCard {
    }
    interface SmoothlyFormDemoControlled {
    }
    interface SmoothlyFormDemoDate {
    }
    interface SmoothlyFormDemoDateRange {
    }
    interface SmoothlyFormDemoLogin {
    }
    interface SmoothlyFormDemoPet {
    }
    interface SmoothlyFormDemoPrices {
    }
    interface SmoothlyFormDemoSchedule {
    }
    interface SmoothlyFormDemoTransparent {
    }
    interface SmoothlyFormDemoTyped {
    }
    interface SmoothlyFrame {
        "name": string;
        "origin": string | undefined;
        "send": (message2: string | Message<any>, content?: Trigger | any) => Promise<void>;
        "url": string;
    }
    interface SmoothlyIcon {
        "color": Color;
        "fill": Fill;
        "flip"?: "x" | "y";
        "name": Icon | "empty";
        "rotate"?: number;
        "size"?: "tiny" | "small" | "medium" | "large" | "xlarge";
        "toolTip"?: string;
    }
    interface SmoothlyIconDemo {
    }
    interface SmoothlyInput {
        "autocomplete"?: Exclude<tidily.Settings["autocomplete"], undefined>;
        "changed": boolean;
        "clear": () => Promise<void>;
        "color"?: Color;
        "currency"?: isoly.Currency;
        "disabled": boolean;
        "edit": (editable: boolean) => Promise<void>;
        "errorMessage"?: string;
        "getValue": () => Promise<any | undefined>;
        "invalid"?: boolean;
        "listen": (property: "changed", listener: (parent: Editable) => Promise<void>) => Promise<void>;
        "looks"?: Looks;
        "max"?: number;
        "min"?: number;
        "name": string;
        "pad"?: number;
        "placeholder": string | undefined;
        "readonly": boolean;
        "register": () => Promise<void>;
        "required": boolean;
        "reset": () => Promise<void>;
        "setCustomInitialValue": (value: any) => Promise<void>;
        "setFocus": () => Promise<void>;
        "setInitialValue": () => Promise<void>;
        "setSelection": (start: number, end: number) => Promise<void>;
        "setValue": (value: any) => Promise<void>;
        "showLabel": boolean;
        "toInteger"?: boolean;
        "type": tidily.Type;
        "unregister": () => Promise<void>;
        "value": any;
    }
    interface SmoothlyInputCheckbox {
        "changed": boolean;
        "checked": boolean;
        "clear": () => Promise<void>;
        "color"?: Color;
        "disabled": boolean;
        "edit": (editable: boolean) => Promise<void>;
        "getValue": () => Promise<boolean>;
        "listen": (property: "changed", listener: (parent: Editable) => Promise<void>) => Promise<void>;
        "looks"?: Looks;
        "name": string;
        "readonly": boolean;
        "register": () => Promise<void>;
        "reset": () => Promise<void>;
        "setInitialValue": () => Promise<void>;
        "unregister": () => Promise<void>;
        "value": boolean;
    }
    interface SmoothlyInputCheckboxDemo {
    }
    interface SmoothlyInputClear {
        "color"?: Color;
        "disabled": boolean;
        "display": boolean;
        "expand"?: "block" | "full";
        "fill"?: Fill;
        "shape"?: "rounded";
        "size": "small" | "large" | "icon" | "flexible";
        "tooltip": string;
        "type": "form" | "input";
    }
    interface SmoothlyInputColor {
        "changed": boolean;
        "clear": () => Promise<void>;
        "color"?: Color;
        "disabled"?: boolean;
        "edit": (editable: boolean) => Promise<void>;
        "getValue": () => Promise<RGB | string | undefined>;
        "listen": (property: "changed", listener: (parent: Editable) => Promise<void>) => Promise<void>;
        "looks"?: Looks;
        "name": string;
        "output": "rgb" | "hex";
        "readonly": boolean;
        "register": () => Promise<void>;
        "reset": () => Promise<void>;
        "setInitialValue": () => Promise<void>;
        "showLabel": boolean;
        "unregister": () => Promise<void>;
        "value": string | undefined;
    }
    interface SmoothlyInputColorDemo {
    }
    interface SmoothlyInputDate {
        "changed": boolean;
        "clear": () => Promise<void>;
        "color"?: Color;
        "disabled"?: boolean;
        "edit": (editable: boolean) => Promise<void>;
        "errorMessage"?: string;
        "getValue": () => Promise<isoly.Date | undefined>;
        "invalid"?: boolean;
        "listen": (property: "changed", listener: (parent: Editable) => Promise<void>) => Promise<void>;
        "looks"?: Looks;
        "max": isoly.Date;
        "min": isoly.Date;
        "name": string;
        "open": boolean;
        "readonly": boolean;
        "register": () => Promise<void>;
        "reset": () => Promise<void>;
        "setInitialValue": () => Promise<void>;
        "showLabel": boolean;
        "unregister": () => Promise<void>;
        "value"?: isoly.Date;
    }
    interface SmoothlyInputDateRange {
        "changed": boolean;
        "clear": () => Promise<void>;
        "color"?: Color;
        "disabled"?: boolean;
        "edit": (editable: boolean) => Promise<void>;
        "end": isoly.Date | undefined;
        "getValue": () => Promise<isoly.DateRange | undefined>;
        "invalid"?: boolean;
        "listen": (property: "changed", listener: (parent: Editable) => Promise<void>) => Promise<void>;
        "looks"?: Looks;
        "max"?: isoly.Date;
        "min"?: isoly.Date;
        "name": string;
        "placeholder": string;
        "readonly": boolean;
        "register": () => Promise<void>;
        "reset": () => Promise<void>;
        "setInitialValue": () => Promise<void>;
        "showLabel": boolean;
        "start": isoly.Date | undefined;
        "unregister": () => Promise<void>;
    }
    interface SmoothlyInputDateTime {
        "changed": boolean;
        "clear": () => Promise<void>;
        "color"?: Color;
        "disabled"?: boolean;
        "edit": (editable: boolean) => Promise<void>;
        "errorMessage"?: string;
        "getValue": () => Promise<isoly.DateTime | undefined>;
        "invalid"?: boolean;
        "listen": (property: "changed", listener: (parent: Editable) => Promise<void>) => Promise<void>;
        "looks"?: Looks;
        "max"?: isoly.DateTime;
        "min"?: isoly.DateTime;
        "name": string;
        "open": boolean;
        "readonly": boolean;
        "register": () => Promise<void>;
        "reset": () => Promise<void>;
        "setInitialValue": () => Promise<void>;
        "showLabel": boolean;
        "unregister": () => Promise<void>;
        "value"?: isoly.DateTime;
    }
    interface SmoothlyInputDemo {
    }
    interface SmoothlyInputDemoStandard {
    }
    interface SmoothlyInputEdit {
        "color"?: Color;
        "disabled": boolean;
        "display": boolean;
        "expand"?: "block" | "full";
        "fill"?: Fill;
        "shape"?: "rounded";
        "size": "flexible" | "small" | "large" | "icon";
        "toolTip": string;
        "type": "form" | "input";
    }
    interface SmoothlyInputFile {
        "accept"?: string;
        "binary": () => Promise<boolean>;
        "camera": "front" | "back";
        "changed": boolean;
        "clear": () => Promise<void>;
        "color"?: Color;
        "disabled"?: boolean;
        "edit": (editable: boolean) => Promise<void>;
        "getValue": () => Promise<File | undefined>;
        "listen": (property: "changed", listener: (parent: Editable) => Promise<void>) => Promise<void>;
        "looks"?: Looks;
        "name": string;
        "placeholder": string | undefined;
        "readonly": boolean;
        "register": () => Promise<void>;
        "reset": () => Promise<void>;
        "setInitialValue": () => Promise<void>;
        "showLabel": boolean;
        "unregister": () => Promise<void>;
        "value"?: File;
    }
    interface SmoothlyInputMonth {
        "clear": () => Promise<void>;
        "color"?: Color;
        "edit": (editable: boolean) => Promise<void>;
        "getValue": () => Promise<isoly.Date | undefined>;
        "inCalendar": boolean;
        "listen": (property: "changed", listener: (parent: Editable) => Promise<void>) => Promise<void>;
        "looks"?: Looks;
        "max"?: isoly.Date;
        "min"?: isoly.Date;
        "name": string;
        "next": boolean;
        "previous": boolean;
        "readonly": boolean;
        "register": () => Promise<void>;
        "reset": () => Promise<void>;
        "setInitialValue": () => Promise<void>;
        "showLabel": boolean;
        "unregister": () => Promise<void>;
        "value"?: isoly.Date;
    }
    interface SmoothlyInputPriceDemo {
    }
    interface SmoothlyInputRadio {
        "changed": boolean;
        "clear": () => Promise<void>;
        "clearable"?: boolean;
        "color"?: Color;
        "disabled"?: boolean;
        "edit": (editable: boolean) => Promise<void>;
        "getValue": () => Promise<any | undefined>;
        "listen": (property: "changed", listener: (parent: Editable) => Promise<void>) => Promise<void>;
        "looks"?: Looks;
        "name": string;
        "readonly": boolean;
        "register": () => Promise<void>;
        "reset": () => Promise<void>;
        "setInitialValue": () => Promise<void>;
        "showLabel": boolean;
        "unregister": () => Promise<void>;
        "value": any;
    }
    interface SmoothlyInputRadioItem {
        "looks"?: Looks;
        "name": string;
        "selected": boolean;
        "value": any;
    }
    interface SmoothlyInputRange {
        "changed": boolean;
        "clear": () => Promise<void>;
        "color"?: Color;
        "defined": boolean;
        "disabled"?: boolean;
        "edit": (editable: boolean) => Promise<void>;
        "getValue": () => Promise<number | undefined>;
        "label": string;
        "listen": (property: "changed", listener: (parent: Editable) => Promise<void>) => Promise<void>;
        "looks"?: Looks;
        "max": number;
        "min": number;
        "name": string;
        "outputSide": "right" | "left";
        "readonly": boolean;
        "register": () => Promise<void>;
        "reset": () => Promise<void>;
        "setInitialValue": () => Promise<void>;
        "step"?: number;
        "type": Extract<tidily.Type, "text" | "percent">;
        "unregister": () => Promise<void>;
        "value": number | undefined;
    }
    interface SmoothlyInputRangeDemo {
    }
    interface SmoothlyInputReset {
        "color"?: Color;
        "disabled": boolean;
        "display": boolean;
        "expand"?: "block" | "full";
        "fill"?: Fill;
        "shape"?: "rounded";
        "size": "flexible" | "small" | "large" | "icon";
        "tooltip": string;
        "type": "form" | "input";
    }
    interface SmoothlyInputSelect {
        "changed": boolean;
        "clear": () => Promise<void>;
        "clearable": boolean;
        "color"?: Color;
        "defined": boolean;
        "disabled": boolean;
        "edit": (editable: boolean) => Promise<void>;
        "errorMessage"?: string;
        "getItems": () => Promise<HTMLSmoothlyItemElement[]>;
        "getValue": () => Promise<any | any[] | undefined>;
        "inCalendar": boolean;
        "invalid"?: boolean;
        "listen": (property: "changed", listener: (parent: Editable) => Promise<void>) => Promise<void>;
        "looks"?: Looks;
        "menuHeight"?: `${number}${"items" | "rem" | "px" | "vh"}`;
        "multiple": boolean;
        "mutable": boolean;
        "name": string;
        "ordered"?: boolean;
        "placeholder"?: string | any;
        "readonly": boolean;
        "register": () => Promise<void>;
        "required": boolean;
        "reset": () => Promise<void>;
        "searchDisabled": boolean;
        "setInitialValue": () => Promise<void>;
        "showLabel": boolean;
        "showSelected"?: boolean;
        "unregister": () => Promise<void>;
    }
    interface SmoothlyInputSubmit {
        "color"?: Color;
        "delete": boolean;
        "disabled": boolean;
        "display": boolean;
        "expand"?: "block" | "full";
        "fill"?: Fill;
        "icon": Icon | false;
        "shape"?: "rounded";
        "size": "flexible" | "small" | "large" | "icon";
        "toolTip": string;
    }
    interface SmoothlyItem {
        "deselectable": boolean;
        "disabled": boolean;
        "filter": (filter: string) => Promise<void>;
        "marked": boolean;
        "selected": boolean;
        "value": any;
    }
    interface SmoothlyLabel {
        "description"?: string;
        "hue"?: number;
        "shape": "rectangle" | "rounded";
    }
    interface SmoothlyLazy {
        "content"?: VNode | FunctionalComponent;
        "show": boolean;
    }
    interface SmoothlyLoadMore {
        "multiple": boolean;
        "name": string;
        "triggerMode": "scroll" | "intersection";
    }
    interface SmoothlyModal {
        "align": "top" | "center";
        "closable": boolean;
        "open": boolean;
    }
    interface SmoothlyNotification {
        "closable": boolean;
        "icon": boolean;
        "notice": Notice;
    }
    interface SmoothlyNotifier {
        "icon": boolean;
    }
    interface SmoothlySpinner {
        "overlay": boolean;
        "size": "small" | "icon" | "medium" | "large";
    }
    interface SmoothlySubmit {
        "color"?: Color;
        "disabled": boolean;
        "expand"?: "block" | "full";
        "fill"?: Fill;
        "prevent": boolean;
        "shape"?: "rounded";
        "size": "flexible" | "small" | "large" | "icon";
        "type": "link" | "button";
    }
    interface SmoothlySummary {
        "color": Color;
        "fill": Fill;
        "open": boolean;
        "size": "tiny" | "small" | "medium" | "large";
    }
    interface SmoothlyTab {
        "disabled": boolean;
        "label": string;
        "open": boolean;
        "tooltip": string;
    }
    interface SmoothlyTable {
        "columns": number;
    }
    interface SmoothlyTableBody {
    }
    interface SmoothlyTableCell {
        "span"?: number;
    }
    interface SmoothlyTableDemo {
    }
    interface SmoothlyTableDemoColspan {
    }
    interface SmoothlyTableDemoFillerRow {
    }
    interface SmoothlyTableDemoFiltered {
    }
    interface SmoothlyTableDemoGroup {
    }
    interface SmoothlyTableDemoNestedNoCell {
    }
    interface SmoothlyTableDemoNestedNoCellInner {
        "data"?: {
		id: number
		name: string
		age: number
		balance: number
	}[];
    }
    interface SmoothlyTableDemoSimple {
    }
    interface SmoothlyTableExpandableCell {
        "close": () => Promise<void>;
        "open": boolean;
        "span"?: number;
    }
    interface SmoothlyTableExpandableRow {
        "open": boolean;
    }
    interface SmoothlyTableFillerRow {
    }
    interface SmoothlyTableFoot {
    }
    interface SmoothlyTableHead {
    }
    interface SmoothlyTableRow {
    }
    interface SmoothlyTableRowGroup {
        "align": boolean;
        "open": boolean;
    }
    interface SmoothlyTabs {
        "tabs": "always" | "multiple";
    }
    interface SmoothlyTabsDemo {
    }
    interface SmoothlyThemeColor {
        "color": Color;
    }
    interface SmoothlyThemeColorVariant {
        "color": Color;
        "variant": "shade" | "tint" | "color";
    }
    interface SmoothlyThemeColors {
    }
    interface SmoothlyThemeDemo {
    }
    interface SmoothlyThemeGuide {
    }
    interface SmoothlyThemePicker {
        "element": string;
    }
    interface SmoothlyToggleSwitch {
        "checkmark": boolean;
        "color": Color;
        "disabled": boolean;
        "fill": Fill;
        "selected": boolean;
        "size": "tiny" | "small" | "default" | "large";
    }
    interface SmoothlyToggleSwitchDemo {
    }
    interface SmoothlyTrigger {
        "color": Color | undefined;
        "disabled": boolean;
        "fill": Fill;
        "name": string;
        "type": "link" | "button";
        "value"?: any;
    }
    interface SmoothlyTriggerSink {
        "context"?: Window;
        "destination": string;
        "filter"?: string;
    }
    interface SmoothlyTriggerSource {
        "listen": string;
    }
}
export interface SmoothlyAppRoomCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyAppRoomElement;
}
export interface SmoothlyBurgerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyBurgerElement;
}
export interface SmoothlyButtonConfirmCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyButtonConfirmElement;
}
export interface SmoothlyCalendarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyCalendarElement;
}
export interface SmoothlyCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyCheckboxElement;
}
export interface SmoothlyDisplayDemoCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyDisplayDemoElement;
}
export interface SmoothlyFilterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyFilterElement;
}
export interface SmoothlyFilterFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyFilterFieldElement;
}
export interface SmoothlyFilterInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyFilterInputElement;
}
export interface SmoothlyFilterSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyFilterSelectElement;
}
export interface SmoothlyFilterToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyFilterToggleElement;
}
export interface SmoothlyFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyFormElement;
}
export interface SmoothlyFormDemoDateCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyFormDemoDateElement;
}
export interface SmoothlyFormDemoDateRangeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyFormDemoDateRangeElement;
}
export interface SmoothlyFrameCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyFrameElement;
}
export interface SmoothlyIconDemoCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyIconDemoElement;
}
export interface SmoothlyInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputElement;
}
export interface SmoothlyInputCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputCheckboxElement;
}
export interface SmoothlyInputClearCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputClearElement;
}
export interface SmoothlyInputColorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputColorElement;
}
export interface SmoothlyInputDateCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputDateElement;
}
export interface SmoothlyInputDateRangeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputDateRangeElement;
}
export interface SmoothlyInputDateTimeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputDateTimeElement;
}
export interface SmoothlyInputEditCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputEditElement;
}
export interface SmoothlyInputFileCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputFileElement;
}
export interface SmoothlyInputMonthCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputMonthElement;
}
export interface SmoothlyInputRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputRadioElement;
}
export interface SmoothlyInputRadioItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputRadioItemElement;
}
export interface SmoothlyInputRangeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputRangeElement;
}
export interface SmoothlyInputResetCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputResetElement;
}
export interface SmoothlyInputSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputSelectElement;
}
export interface SmoothlyInputSubmitCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputSubmitElement;
}
export interface SmoothlyItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyItemElement;
}
export interface SmoothlyLoadMoreCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyLoadMoreElement;
}
export interface SmoothlyModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyModalElement;
}
export interface SmoothlyNotificationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyNotificationElement;
}
export interface SmoothlySubmitCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlySubmitElement;
}
export interface SmoothlySummaryCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlySummaryElement;
}
export interface SmoothlyTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyTabElement;
}
export interface SmoothlyTableExpandableCellCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyTableExpandableCellElement;
}
export interface SmoothlyTableExpandableRowCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyTableExpandableRowElement;
}
export interface SmoothlyTableRowGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyTableRowGroupElement;
}
export interface SmoothlyTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyTabsElement;
}
export interface SmoothlyToggleSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyToggleSwitchElement;
}
export interface SmoothlyTriggerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyTriggerElement;
}
export interface SmoothlyTriggerSourceCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyTriggerSourceElement;
}
declare global {
    interface HTMLSmoothlyAppElement extends Components.SmoothlyApp, HTMLStencilElement {
    }
    var HTMLSmoothlyAppElement: {
        prototype: HTMLSmoothlyAppElement;
        new (): HTMLSmoothlyAppElement;
    };
    interface HTMLSmoothlyAppDemoElement extends Components.SmoothlyAppDemo, HTMLStencilElement {
    }
    var HTMLSmoothlyAppDemoElement: {
        prototype: HTMLSmoothlyAppDemoElement;
        new (): HTMLSmoothlyAppDemoElement;
    };
    interface HTMLSmoothlyAppRoomElementEventMap {
        "smoothlyRoomSelect": { history: boolean };
        "smoothlyRoomLoad": { selected: boolean };
    }
    interface HTMLSmoothlyAppRoomElement extends Components.SmoothlyAppRoom, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyAppRoomElementEventMap>(type: K, listener: (this: HTMLSmoothlyAppRoomElement, ev: SmoothlyAppRoomCustomEvent<HTMLSmoothlyAppRoomElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyAppRoomElementEventMap>(type: K, listener: (this: HTMLSmoothlyAppRoomElement, ev: SmoothlyAppRoomCustomEvent<HTMLSmoothlyAppRoomElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyAppRoomElement: {
        prototype: HTMLSmoothlyAppRoomElement;
        new (): HTMLSmoothlyAppRoomElement;
    };
    interface HTMLSmoothlyBackToTopElement extends Components.SmoothlyBackToTop, HTMLStencilElement {
    }
    var HTMLSmoothlyBackToTopElement: {
        prototype: HTMLSmoothlyBackToTopElement;
        new (): HTMLSmoothlyBackToTopElement;
    };
    interface HTMLSmoothlyBurgerElementEventMap {
        "smoothlyNavStatus": boolean;
        "smoothlyVisibleStatus": boolean;
    }
    interface HTMLSmoothlyBurgerElement extends Components.SmoothlyBurger, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyBurgerElementEventMap>(type: K, listener: (this: HTMLSmoothlyBurgerElement, ev: SmoothlyBurgerCustomEvent<HTMLSmoothlyBurgerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyBurgerElementEventMap>(type: K, listener: (this: HTMLSmoothlyBurgerElement, ev: SmoothlyBurgerCustomEvent<HTMLSmoothlyBurgerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyBurgerElement: {
        prototype: HTMLSmoothlyBurgerElement;
        new (): HTMLSmoothlyBurgerElement;
    };
    interface HTMLSmoothlyButtonElement extends Components.SmoothlyButton, HTMLStencilElement {
    }
    var HTMLSmoothlyButtonElement: {
        prototype: HTMLSmoothlyButtonElement;
        new (): HTMLSmoothlyButtonElement;
    };
    interface HTMLSmoothlyButtonConfirmElementEventMap {
        "smoothlyInputLoad": (parent: Editable) => void;
        "smoothlyConfirm": Data;
    }
    interface HTMLSmoothlyButtonConfirmElement extends Components.SmoothlyButtonConfirm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyButtonConfirmElementEventMap>(type: K, listener: (this: HTMLSmoothlyButtonConfirmElement, ev: SmoothlyButtonConfirmCustomEvent<HTMLSmoothlyButtonConfirmElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyButtonConfirmElementEventMap>(type: K, listener: (this: HTMLSmoothlyButtonConfirmElement, ev: SmoothlyButtonConfirmCustomEvent<HTMLSmoothlyButtonConfirmElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyButtonConfirmElement: {
        prototype: HTMLSmoothlyButtonConfirmElement;
        new (): HTMLSmoothlyButtonConfirmElement;
    };
    interface HTMLSmoothlyButtonDemoElement extends Components.SmoothlyButtonDemo, HTMLStencilElement {
    }
    var HTMLSmoothlyButtonDemoElement: {
        prototype: HTMLSmoothlyButtonDemoElement;
        new (): HTMLSmoothlyButtonDemoElement;
    };
    interface HTMLSmoothlyCalendarElementEventMap {
        "smoothlyValueChange": isoly.Date;
        "smoothlyStartChange": isoly.Date;
        "smoothlyEndChange": isoly.Date;
        "smoothlyDateSet": isoly.Date;
        "smoothlyDateRangeSet": isoly.DateRange;
    }
    interface HTMLSmoothlyCalendarElement extends Components.SmoothlyCalendar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyCalendarElementEventMap>(type: K, listener: (this: HTMLSmoothlyCalendarElement, ev: SmoothlyCalendarCustomEvent<HTMLSmoothlyCalendarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyCalendarElementEventMap>(type: K, listener: (this: HTMLSmoothlyCalendarElement, ev: SmoothlyCalendarCustomEvent<HTMLSmoothlyCalendarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyCalendarElement: {
        prototype: HTMLSmoothlyCalendarElement;
        new (): HTMLSmoothlyCalendarElement;
    };
    interface HTMLSmoothlyCheckboxElementEventMap {
        "smoothlyInput": Record<string, any>;
    }
    interface HTMLSmoothlyCheckboxElement extends Components.SmoothlyCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyCheckboxElementEventMap>(type: K, listener: (this: HTMLSmoothlyCheckboxElement, ev: SmoothlyCheckboxCustomEvent<HTMLSmoothlyCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyCheckboxElementEventMap>(type: K, listener: (this: HTMLSmoothlyCheckboxElement, ev: SmoothlyCheckboxCustomEvent<HTMLSmoothlyCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyCheckboxElement: {
        prototype: HTMLSmoothlyCheckboxElement;
        new (): HTMLSmoothlyCheckboxElement;
    };
    interface HTMLSmoothlyColorElement extends Components.SmoothlyColor, HTMLStencilElement {
    }
    var HTMLSmoothlyColorElement: {
        prototype: HTMLSmoothlyColorElement;
        new (): HTMLSmoothlyColorElement;
    };
    interface HTMLSmoothlyCountryElement extends Components.SmoothlyCountry, HTMLStencilElement {
    }
    var HTMLSmoothlyCountryElement: {
        prototype: HTMLSmoothlyCountryElement;
        new (): HTMLSmoothlyCountryElement;
    };
    interface HTMLSmoothlyDialogElement extends Components.SmoothlyDialog, HTMLStencilElement {
    }
    var HTMLSmoothlyDialogElement: {
        prototype: HTMLSmoothlyDialogElement;
        new (): HTMLSmoothlyDialogElement;
    };
    interface HTMLSmoothlyDialogDemoElement extends Components.SmoothlyDialogDemo, HTMLStencilElement {
    }
    var HTMLSmoothlyDialogDemoElement: {
        prototype: HTMLSmoothlyDialogDemoElement;
        new (): HTMLSmoothlyDialogDemoElement;
    };
    interface HTMLSmoothlyDisplayElement extends Components.SmoothlyDisplay, HTMLStencilElement {
    }
    var HTMLSmoothlyDisplayElement: {
        prototype: HTMLSmoothlyDisplayElement;
        new (): HTMLSmoothlyDisplayElement;
    };
    interface HTMLSmoothlyDisplayDemoElementEventMap {
        "notice": Notice;
    }
    interface HTMLSmoothlyDisplayDemoElement extends Components.SmoothlyDisplayDemo, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyDisplayDemoElementEventMap>(type: K, listener: (this: HTMLSmoothlyDisplayDemoElement, ev: SmoothlyDisplayDemoCustomEvent<HTMLSmoothlyDisplayDemoElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyDisplayDemoElementEventMap>(type: K, listener: (this: HTMLSmoothlyDisplayDemoElement, ev: SmoothlyDisplayDemoCustomEvent<HTMLSmoothlyDisplayDemoElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyDisplayDemoElement: {
        prototype: HTMLSmoothlyDisplayDemoElement;
        new (): HTMLSmoothlyDisplayDemoElement;
    };
    interface HTMLSmoothlyDisplayDemoJsonElement extends Components.SmoothlyDisplayDemoJson, HTMLStencilElement {
    }
    var HTMLSmoothlyDisplayDemoJsonElement: {
        prototype: HTMLSmoothlyDisplayDemoJsonElement;
        new (): HTMLSmoothlyDisplayDemoJsonElement;
    };
    interface HTMLSmoothlyDisplayJsonElement extends Components.SmoothlyDisplayJson, HTMLStencilElement {
    }
    var HTMLSmoothlyDisplayJsonElement: {
        prototype: HTMLSmoothlyDisplayJsonElement;
        new (): HTMLSmoothlyDisplayJsonElement;
    };
    interface HTMLSmoothlyDisplayJsonObjectElement extends Components.SmoothlyDisplayJsonObject, HTMLStencilElement {
    }
    var HTMLSmoothlyDisplayJsonObjectElement: {
        prototype: HTMLSmoothlyDisplayJsonObjectElement;
        new (): HTMLSmoothlyDisplayJsonObjectElement;
    };
    interface HTMLSmoothlyDisplayJsonPrimitiveElement extends Components.SmoothlyDisplayJsonPrimitive, HTMLStencilElement {
    }
    var HTMLSmoothlyDisplayJsonPrimitiveElement: {
        prototype: HTMLSmoothlyDisplayJsonPrimitiveElement;
        new (): HTMLSmoothlyDisplayJsonPrimitiveElement;
    };
    interface HTMLSmoothlyDisplayJsonRecordKeyElement extends Components.SmoothlyDisplayJsonRecordKey, HTMLStencilElement {
    }
    var HTMLSmoothlyDisplayJsonRecordKeyElement: {
        prototype: HTMLSmoothlyDisplayJsonRecordKeyElement;
        new (): HTMLSmoothlyDisplayJsonRecordKeyElement;
    };
    interface HTMLSmoothlyFilterElementEventMap {
        "smoothlyFilter": selectively.Criteria;
    }
    interface HTMLSmoothlyFilterElement extends Components.SmoothlyFilter, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyFilterElementEventMap>(type: K, listener: (this: HTMLSmoothlyFilterElement, ev: SmoothlyFilterCustomEvent<HTMLSmoothlyFilterElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyFilterElementEventMap>(type: K, listener: (this: HTMLSmoothlyFilterElement, ev: SmoothlyFilterCustomEvent<HTMLSmoothlyFilterElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyFilterElement: {
        prototype: HTMLSmoothlyFilterElement;
        new (): HTMLSmoothlyFilterElement;
    };
    interface HTMLSmoothlyFilterFieldElementEventMap {
        "smoothlyFilterField": selectively.Rule;
    }
    interface HTMLSmoothlyFilterFieldElement extends Components.SmoothlyFilterField, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyFilterFieldElementEventMap>(type: K, listener: (this: HTMLSmoothlyFilterFieldElement, ev: SmoothlyFilterFieldCustomEvent<HTMLSmoothlyFilterFieldElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyFilterFieldElementEventMap>(type: K, listener: (this: HTMLSmoothlyFilterFieldElement, ev: SmoothlyFilterFieldCustomEvent<HTMLSmoothlyFilterFieldElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyFilterFieldElement: {
        prototype: HTMLSmoothlyFilterFieldElement;
        new (): HTMLSmoothlyFilterFieldElement;
    };
    interface HTMLSmoothlyFilterInputElementEventMap {
        "smoothlyFilterUpdate": Filter.Update;
        "smoothlyFilterManipulate": Filter.Manipulate;
    }
    interface HTMLSmoothlyFilterInputElement extends Components.SmoothlyFilterInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyFilterInputElementEventMap>(type: K, listener: (this: HTMLSmoothlyFilterInputElement, ev: SmoothlyFilterInputCustomEvent<HTMLSmoothlyFilterInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyFilterInputElementEventMap>(type: K, listener: (this: HTMLSmoothlyFilterInputElement, ev: SmoothlyFilterInputCustomEvent<HTMLSmoothlyFilterInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyFilterInputElement: {
        prototype: HTMLSmoothlyFilterInputElement;
        new (): HTMLSmoothlyFilterInputElement;
    };
    interface HTMLSmoothlyFilterSelectElementEventMap {
        "smoothlyFilterUpdate": Filter.Update;
        "smoothlyFilterManipulate": Filter.Manipulate;
        "smoothlyInputLooks": (looks?: Looks) => void;
    }
    interface HTMLSmoothlyFilterSelectElement extends Components.SmoothlyFilterSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyFilterSelectElementEventMap>(type: K, listener: (this: HTMLSmoothlyFilterSelectElement, ev: SmoothlyFilterSelectCustomEvent<HTMLSmoothlyFilterSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyFilterSelectElementEventMap>(type: K, listener: (this: HTMLSmoothlyFilterSelectElement, ev: SmoothlyFilterSelectCustomEvent<HTMLSmoothlyFilterSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyFilterSelectElement: {
        prototype: HTMLSmoothlyFilterSelectElement;
        new (): HTMLSmoothlyFilterSelectElement;
    };
    interface HTMLSmoothlyFilterToggleElementEventMap {
        "smoothlyFilterUpdate": Filter.Update;
        "smoothlyFilterManipulate": Filter.Manipulate;
    }
    interface HTMLSmoothlyFilterToggleElement extends Components.SmoothlyFilterToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyFilterToggleElementEventMap>(type: K, listener: (this: HTMLSmoothlyFilterToggleElement, ev: SmoothlyFilterToggleCustomEvent<HTMLSmoothlyFilterToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyFilterToggleElementEventMap>(type: K, listener: (this: HTMLSmoothlyFilterToggleElement, ev: SmoothlyFilterToggleCustomEvent<HTMLSmoothlyFilterToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyFilterToggleElement: {
        prototype: HTMLSmoothlyFilterToggleElement;
        new (): HTMLSmoothlyFilterToggleElement;
    };
    interface HTMLSmoothlyFormElementEventMap {
        "smoothlyFormDisable": (disabled: boolean) => void;
        "smoothlyFormInput": Data;
        "smoothlyFormSubmit": Submit;
        "smoothlyFormReset": void;
        "smoothlyFormEdit": boolean;
        "smoothlyFormClear": void;
        "notice": Notice;
    }
    interface HTMLSmoothlyFormElement extends Components.SmoothlyForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyFormElementEventMap>(type: K, listener: (this: HTMLSmoothlyFormElement, ev: SmoothlyFormCustomEvent<HTMLSmoothlyFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyFormElementEventMap>(type: K, listener: (this: HTMLSmoothlyFormElement, ev: SmoothlyFormCustomEvent<HTMLSmoothlyFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyFormElement: {
        prototype: HTMLSmoothlyFormElement;
        new (): HTMLSmoothlyFormElement;
    };
    interface HTMLSmoothlyFormDemoElement extends Components.SmoothlyFormDemo, HTMLStencilElement {
    }
    var HTMLSmoothlyFormDemoElement: {
        prototype: HTMLSmoothlyFormDemoElement;
        new (): HTMLSmoothlyFormDemoElement;
    };
    interface HTMLSmoothlyFormDemoAllElement extends Components.SmoothlyFormDemoAll, HTMLStencilElement {
    }
    var HTMLSmoothlyFormDemoAllElement: {
        prototype: HTMLSmoothlyFormDemoAllElement;
        new (): HTMLSmoothlyFormDemoAllElement;
    };
    interface HTMLSmoothlyFormDemoCardElement extends Components.SmoothlyFormDemoCard, HTMLStencilElement {
    }
    var HTMLSmoothlyFormDemoCardElement: {
        prototype: HTMLSmoothlyFormDemoCardElement;
        new (): HTMLSmoothlyFormDemoCardElement;
    };
    interface HTMLSmoothlyFormDemoControlledElement extends Components.SmoothlyFormDemoControlled, HTMLStencilElement {
    }
    var HTMLSmoothlyFormDemoControlledElement: {
        prototype: HTMLSmoothlyFormDemoControlledElement;
        new (): HTMLSmoothlyFormDemoControlledElement;
    };
    interface HTMLSmoothlyFormDemoDateElementEventMap {
        "notice": Notice;
    }
    interface HTMLSmoothlyFormDemoDateElement extends Components.SmoothlyFormDemoDate, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyFormDemoDateElementEventMap>(type: K, listener: (this: HTMLSmoothlyFormDemoDateElement, ev: SmoothlyFormDemoDateCustomEvent<HTMLSmoothlyFormDemoDateElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyFormDemoDateElementEventMap>(type: K, listener: (this: HTMLSmoothlyFormDemoDateElement, ev: SmoothlyFormDemoDateCustomEvent<HTMLSmoothlyFormDemoDateElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyFormDemoDateElement: {
        prototype: HTMLSmoothlyFormDemoDateElement;
        new (): HTMLSmoothlyFormDemoDateElement;
    };
    interface HTMLSmoothlyFormDemoDateRangeElementEventMap {
        "notice": Notice;
    }
    interface HTMLSmoothlyFormDemoDateRangeElement extends Components.SmoothlyFormDemoDateRange, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyFormDemoDateRangeElementEventMap>(type: K, listener: (this: HTMLSmoothlyFormDemoDateRangeElement, ev: SmoothlyFormDemoDateRangeCustomEvent<HTMLSmoothlyFormDemoDateRangeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyFormDemoDateRangeElementEventMap>(type: K, listener: (this: HTMLSmoothlyFormDemoDateRangeElement, ev: SmoothlyFormDemoDateRangeCustomEvent<HTMLSmoothlyFormDemoDateRangeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyFormDemoDateRangeElement: {
        prototype: HTMLSmoothlyFormDemoDateRangeElement;
        new (): HTMLSmoothlyFormDemoDateRangeElement;
    };
    interface HTMLSmoothlyFormDemoLoginElement extends Components.SmoothlyFormDemoLogin, HTMLStencilElement {
    }
    var HTMLSmoothlyFormDemoLoginElement: {
        prototype: HTMLSmoothlyFormDemoLoginElement;
        new (): HTMLSmoothlyFormDemoLoginElement;
    };
    interface HTMLSmoothlyFormDemoPetElement extends Components.SmoothlyFormDemoPet, HTMLStencilElement {
    }
    var HTMLSmoothlyFormDemoPetElement: {
        prototype: HTMLSmoothlyFormDemoPetElement;
        new (): HTMLSmoothlyFormDemoPetElement;
    };
    interface HTMLSmoothlyFormDemoPricesElement extends Components.SmoothlyFormDemoPrices, HTMLStencilElement {
    }
    var HTMLSmoothlyFormDemoPricesElement: {
        prototype: HTMLSmoothlyFormDemoPricesElement;
        new (): HTMLSmoothlyFormDemoPricesElement;
    };
    interface HTMLSmoothlyFormDemoScheduleElement extends Components.SmoothlyFormDemoSchedule, HTMLStencilElement {
    }
    var HTMLSmoothlyFormDemoScheduleElement: {
        prototype: HTMLSmoothlyFormDemoScheduleElement;
        new (): HTMLSmoothlyFormDemoScheduleElement;
    };
    interface HTMLSmoothlyFormDemoTransparentElement extends Components.SmoothlyFormDemoTransparent, HTMLStencilElement {
    }
    var HTMLSmoothlyFormDemoTransparentElement: {
        prototype: HTMLSmoothlyFormDemoTransparentElement;
        new (): HTMLSmoothlyFormDemoTransparentElement;
    };
    interface HTMLSmoothlyFormDemoTypedElement extends Components.SmoothlyFormDemoTyped, HTMLStencilElement {
    }
    var HTMLSmoothlyFormDemoTypedElement: {
        prototype: HTMLSmoothlyFormDemoTypedElement;
        new (): HTMLSmoothlyFormDemoTypedElement;
    };
    interface HTMLSmoothlyFrameElementEventMap {
        "trigger": Trigger;
        "message2": Message<any>;
    }
    interface HTMLSmoothlyFrameElement extends Components.SmoothlyFrame, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyFrameElementEventMap>(type: K, listener: (this: HTMLSmoothlyFrameElement, ev: SmoothlyFrameCustomEvent<HTMLSmoothlyFrameElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyFrameElementEventMap>(type: K, listener: (this: HTMLSmoothlyFrameElement, ev: SmoothlyFrameCustomEvent<HTMLSmoothlyFrameElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyFrameElement: {
        prototype: HTMLSmoothlyFrameElement;
        new (): HTMLSmoothlyFrameElement;
    };
    interface HTMLSmoothlyIconElement extends Components.SmoothlyIcon, HTMLStencilElement {
    }
    var HTMLSmoothlyIconElement: {
        prototype: HTMLSmoothlyIconElement;
        new (): HTMLSmoothlyIconElement;
    };
    interface HTMLSmoothlyIconDemoElementEventMap {
        "notice": Notice;
    }
    interface HTMLSmoothlyIconDemoElement extends Components.SmoothlyIconDemo, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyIconDemoElementEventMap>(type: K, listener: (this: HTMLSmoothlyIconDemoElement, ev: SmoothlyIconDemoCustomEvent<HTMLSmoothlyIconDemoElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyIconDemoElementEventMap>(type: K, listener: (this: HTMLSmoothlyIconDemoElement, ev: SmoothlyIconDemoCustomEvent<HTMLSmoothlyIconDemoElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyIconDemoElement: {
        prototype: HTMLSmoothlyIconDemoElement;
        new (): HTMLSmoothlyIconDemoElement;
    };
    interface HTMLSmoothlyInputElementEventMap {
        "smoothlyInputLooks": (looks?: Looks, color?: Color) => void;
        "smoothlyInputLoad": (parent: Editable) => void;
        "smoothlyFormDisable": (disabled: boolean) => void;
        "smoothlyKeydown": Key;
        "smoothlyBlur": void;
        "smoothlyChange": Record<string, any>;
        "smoothlyInput": Record<string, any>;
    }
    interface HTMLSmoothlyInputElement extends Components.SmoothlyInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyInputElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputElement, ev: SmoothlyInputCustomEvent<HTMLSmoothlyInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyInputElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputElement, ev: SmoothlyInputCustomEvent<HTMLSmoothlyInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyInputElement: {
        prototype: HTMLSmoothlyInputElement;
        new (): HTMLSmoothlyInputElement;
    };
    interface HTMLSmoothlyInputCheckboxElementEventMap {
        "smoothlyInputLooks": (looks?: Looks, color?: Color) => void;
        "smoothlyInput": Data;
        "smoothlyInputLoad": (parent: Editable) => void;
        "smoothlyFormDisable": (disabled: boolean) => void;
    }
    interface HTMLSmoothlyInputCheckboxElement extends Components.SmoothlyInputCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyInputCheckboxElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputCheckboxElement, ev: SmoothlyInputCheckboxCustomEvent<HTMLSmoothlyInputCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyInputCheckboxElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputCheckboxElement, ev: SmoothlyInputCheckboxCustomEvent<HTMLSmoothlyInputCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyInputCheckboxElement: {
        prototype: HTMLSmoothlyInputCheckboxElement;
        new (): HTMLSmoothlyInputCheckboxElement;
    };
    interface HTMLSmoothlyInputCheckboxDemoElement extends Components.SmoothlyInputCheckboxDemo, HTMLStencilElement {
    }
    var HTMLSmoothlyInputCheckboxDemoElement: {
        prototype: HTMLSmoothlyInputCheckboxDemoElement;
        new (): HTMLSmoothlyInputCheckboxDemoElement;
    };
    interface HTMLSmoothlyInputClearElementEventMap {
        "smoothlyInputLoad": (parent: Editable) => void;
    }
    interface HTMLSmoothlyInputClearElement extends Components.SmoothlyInputClear, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyInputClearElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputClearElement, ev: SmoothlyInputClearCustomEvent<HTMLSmoothlyInputClearElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyInputClearElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputClearElement, ev: SmoothlyInputClearCustomEvent<HTMLSmoothlyInputClearElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyInputClearElement: {
        prototype: HTMLSmoothlyInputClearElement;
        new (): HTMLSmoothlyInputClearElement;
    };
    interface HTMLSmoothlyInputColorElementEventMap {
        "smoothlyInputLooks": (looks?: Looks, color?: Color) => void;
        "smoothlyInput": Record<string, any>;
        "smoothlyInputLoad": (parent: Editable) => void;
        "smoothlyFormDisable": (disabled: boolean) => void;
    }
    interface HTMLSmoothlyInputColorElement extends Components.SmoothlyInputColor, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyInputColorElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputColorElement, ev: SmoothlyInputColorCustomEvent<HTMLSmoothlyInputColorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyInputColorElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputColorElement, ev: SmoothlyInputColorCustomEvent<HTMLSmoothlyInputColorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyInputColorElement: {
        prototype: HTMLSmoothlyInputColorElement;
        new (): HTMLSmoothlyInputColorElement;
    };
    interface HTMLSmoothlyInputColorDemoElement extends Components.SmoothlyInputColorDemo, HTMLStencilElement {
    }
    var HTMLSmoothlyInputColorDemoElement: {
        prototype: HTMLSmoothlyInputColorDemoElement;
        new (): HTMLSmoothlyInputColorDemoElement;
    };
    interface HTMLSmoothlyInputDateElementEventMap {
        "smoothlyInputLoad": (parent: Editable) => void;
        "smoothlyValueChange": isoly.Date;
        "smoothlyInput": Record<string, any>;
        "smoothlyInputLooks": (looks?: Looks, color?: Color) => void;
        "smoothlyFormDisable": (disabled: boolean) => void;
    }
    interface HTMLSmoothlyInputDateElement extends Components.SmoothlyInputDate, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyInputDateElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputDateElement, ev: SmoothlyInputDateCustomEvent<HTMLSmoothlyInputDateElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyInputDateElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputDateElement, ev: SmoothlyInputDateCustomEvent<HTMLSmoothlyInputDateElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyInputDateElement: {
        prototype: HTMLSmoothlyInputDateElement;
        new (): HTMLSmoothlyInputDateElement;
    };
    interface HTMLSmoothlyInputDateRangeElementEventMap {
        "smoothlyInput": { [name: string]: isoly.DateRange | undefined };
        "smoothlyInputLoad": (parent: Editable) => void;
        "smoothlyInputLooks": (looks?: Looks, color?: Color) => void;
        "smoothlyFormDisable": (disabled: boolean) => void;
    }
    interface HTMLSmoothlyInputDateRangeElement extends Components.SmoothlyInputDateRange, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyInputDateRangeElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputDateRangeElement, ev: SmoothlyInputDateRangeCustomEvent<HTMLSmoothlyInputDateRangeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyInputDateRangeElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputDateRangeElement, ev: SmoothlyInputDateRangeCustomEvent<HTMLSmoothlyInputDateRangeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyInputDateRangeElement: {
        prototype: HTMLSmoothlyInputDateRangeElement;
        new (): HTMLSmoothlyInputDateRangeElement;
    };
    interface HTMLSmoothlyInputDateTimeElementEventMap {
        "smoothlyInputLoad": (parent: Editable) => void;
        "smoothlyValueChange": isoly.DateTime;
        "smoothlyInput": Record<string, any>;
        "smoothlyInputLooks": (looks?: Looks, color?: Color) => void;
        "smoothlyFormDisable": (disabled: boolean) => void;
    }
    interface HTMLSmoothlyInputDateTimeElement extends Components.SmoothlyInputDateTime, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyInputDateTimeElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputDateTimeElement, ev: SmoothlyInputDateTimeCustomEvent<HTMLSmoothlyInputDateTimeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyInputDateTimeElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputDateTimeElement, ev: SmoothlyInputDateTimeCustomEvent<HTMLSmoothlyInputDateTimeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyInputDateTimeElement: {
        prototype: HTMLSmoothlyInputDateTimeElement;
        new (): HTMLSmoothlyInputDateTimeElement;
    };
    interface HTMLSmoothlyInputDemoElement extends Components.SmoothlyInputDemo, HTMLStencilElement {
    }
    var HTMLSmoothlyInputDemoElement: {
        prototype: HTMLSmoothlyInputDemoElement;
        new (): HTMLSmoothlyInputDemoElement;
    };
    interface HTMLSmoothlyInputDemoStandardElement extends Components.SmoothlyInputDemoStandard, HTMLStencilElement {
    }
    var HTMLSmoothlyInputDemoStandardElement: {
        prototype: HTMLSmoothlyInputDemoStandardElement;
        new (): HTMLSmoothlyInputDemoStandardElement;
    };
    interface HTMLSmoothlyInputEditElementEventMap {
        "smoothlyInputLoad": (parent: Editable) => void;
    }
    interface HTMLSmoothlyInputEditElement extends Components.SmoothlyInputEdit, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyInputEditElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputEditElement, ev: SmoothlyInputEditCustomEvent<HTMLSmoothlyInputEditElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyInputEditElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputEditElement, ev: SmoothlyInputEditCustomEvent<HTMLSmoothlyInputEditElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyInputEditElement: {
        prototype: HTMLSmoothlyInputEditElement;
        new (): HTMLSmoothlyInputEditElement;
    };
    interface HTMLSmoothlyInputFileElementEventMap {
        "smoothlyInputLooks": (looks?: Looks, color?: Color) => void;
        "smoothlyInput": Record<string, any>;
        "smoothlyInputLoad": (parent: Editable) => void;
        "smoothlyFormDisable": (disabled: boolean) => void;
    }
    interface HTMLSmoothlyInputFileElement extends Components.SmoothlyInputFile, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyInputFileElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputFileElement, ev: SmoothlyInputFileCustomEvent<HTMLSmoothlyInputFileElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyInputFileElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputFileElement, ev: SmoothlyInputFileCustomEvent<HTMLSmoothlyInputFileElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyInputFileElement: {
        prototype: HTMLSmoothlyInputFileElement;
        new (): HTMLSmoothlyInputFileElement;
    };
    interface HTMLSmoothlyInputMonthElementEventMap {
        "smoothlyInput": Data;
        "smoothlyInputLoad": (parent: Editable) => void;
        "smoothlyFormDisable": (disabled: boolean) => void;
        "smoothlyInputLooks": (looks?: Looks, color?: Color) => void;
    }
    interface HTMLSmoothlyInputMonthElement extends Components.SmoothlyInputMonth, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyInputMonthElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputMonthElement, ev: SmoothlyInputMonthCustomEvent<HTMLSmoothlyInputMonthElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyInputMonthElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputMonthElement, ev: SmoothlyInputMonthCustomEvent<HTMLSmoothlyInputMonthElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyInputMonthElement: {
        prototype: HTMLSmoothlyInputMonthElement;
        new (): HTMLSmoothlyInputMonthElement;
    };
    interface HTMLSmoothlyInputPriceDemoElement extends Components.SmoothlyInputPriceDemo, HTMLStencilElement {
    }
    var HTMLSmoothlyInputPriceDemoElement: {
        prototype: HTMLSmoothlyInputPriceDemoElement;
        new (): HTMLSmoothlyInputPriceDemoElement;
    };
    interface HTMLSmoothlyInputRadioElementEventMap {
        "smoothlyInputLooks": (looks?: Looks, color?: Color) => void;
        "smoothlyInput": Data;
        "smoothlyInputLoad": (parent: Editable) => void;
        "smoothlyFormDisable": (disabled: boolean) => void;
    }
    interface HTMLSmoothlyInputRadioElement extends Components.SmoothlyInputRadio, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyInputRadioElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputRadioElement, ev: SmoothlyInputRadioCustomEvent<HTMLSmoothlyInputRadioElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyInputRadioElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputRadioElement, ev: SmoothlyInputRadioCustomEvent<HTMLSmoothlyInputRadioElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyInputRadioElement: {
        prototype: HTMLSmoothlyInputRadioElement;
        new (): HTMLSmoothlyInputRadioElement;
    };
    interface HTMLSmoothlyInputRadioItemElementEventMap {
        "smoothlySelect": Selectable;
        "smoothlyRadioItemRegister": (name: string) => void;
    }
    interface HTMLSmoothlyInputRadioItemElement extends Components.SmoothlyInputRadioItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyInputRadioItemElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputRadioItemElement, ev: SmoothlyInputRadioItemCustomEvent<HTMLSmoothlyInputRadioItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyInputRadioItemElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputRadioItemElement, ev: SmoothlyInputRadioItemCustomEvent<HTMLSmoothlyInputRadioItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyInputRadioItemElement: {
        prototype: HTMLSmoothlyInputRadioItemElement;
        new (): HTMLSmoothlyInputRadioItemElement;
    };
    interface HTMLSmoothlyInputRangeElementEventMap {
        "smoothlyInputLooks": (looks?: Looks, color?: Color) => void;
        "smoothlyInput": Record<string, any>;
        "smoothlyInputLoad": (parent: Editable) => void;
        "smoothlyFormDisable": (disabled: boolean) => void;
    }
    interface HTMLSmoothlyInputRangeElement extends Components.SmoothlyInputRange, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyInputRangeElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputRangeElement, ev: SmoothlyInputRangeCustomEvent<HTMLSmoothlyInputRangeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyInputRangeElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputRangeElement, ev: SmoothlyInputRangeCustomEvent<HTMLSmoothlyInputRangeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyInputRangeElement: {
        prototype: HTMLSmoothlyInputRangeElement;
        new (): HTMLSmoothlyInputRangeElement;
    };
    interface HTMLSmoothlyInputRangeDemoElement extends Components.SmoothlyInputRangeDemo, HTMLStencilElement {
    }
    var HTMLSmoothlyInputRangeDemoElement: {
        prototype: HTMLSmoothlyInputRangeDemoElement;
        new (): HTMLSmoothlyInputRangeDemoElement;
    };
    interface HTMLSmoothlyInputResetElementEventMap {
        "smoothlyInputLoad": (parent: Editable) => void;
    }
    interface HTMLSmoothlyInputResetElement extends Components.SmoothlyInputReset, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyInputResetElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputResetElement, ev: SmoothlyInputResetCustomEvent<HTMLSmoothlyInputResetElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyInputResetElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputResetElement, ev: SmoothlyInputResetCustomEvent<HTMLSmoothlyInputResetElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyInputResetElement: {
        prototype: HTMLSmoothlyInputResetElement;
        new (): HTMLSmoothlyInputResetElement;
    };
    interface HTMLSmoothlyInputSelectElementEventMap {
        "smoothlyInput": Data;
        "smoothlyInputLooks": (looks?: Looks, color?: Color) => void;
        "smoothlyInputLoad": (parent: Editable) => void;
        "smoothlyFormDisable": (disabled: boolean) => void;
        "smoothlyItemSelect": HTMLSmoothlyItemElement;
    }
    interface HTMLSmoothlyInputSelectElement extends Components.SmoothlyInputSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyInputSelectElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputSelectElement, ev: SmoothlyInputSelectCustomEvent<HTMLSmoothlyInputSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyInputSelectElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputSelectElement, ev: SmoothlyInputSelectCustomEvent<HTMLSmoothlyInputSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyInputSelectElement: {
        prototype: HTMLSmoothlyInputSelectElement;
        new (): HTMLSmoothlyInputSelectElement;
    };
    interface HTMLSmoothlyInputSubmitElementEventMap {
        "smoothlyInputLoad": (parent: Editable) => void;
    }
    interface HTMLSmoothlyInputSubmitElement extends Components.SmoothlyInputSubmit, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyInputSubmitElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputSubmitElement, ev: SmoothlyInputSubmitCustomEvent<HTMLSmoothlyInputSubmitElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyInputSubmitElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputSubmitElement, ev: SmoothlyInputSubmitCustomEvent<HTMLSmoothlyInputSubmitElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyInputSubmitElement: {
        prototype: HTMLSmoothlyInputSubmitElement;
        new (): HTMLSmoothlyInputSubmitElement;
    };
    interface HTMLSmoothlyItemElementEventMap {
        "smoothlyItemSelect": HTMLSmoothlyItemElement;
        "smoothlyInputLoad": (parent: Editable) => void;
    }
    interface HTMLSmoothlyItemElement extends Components.SmoothlyItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyItemElementEventMap>(type: K, listener: (this: HTMLSmoothlyItemElement, ev: SmoothlyItemCustomEvent<HTMLSmoothlyItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyItemElementEventMap>(type: K, listener: (this: HTMLSmoothlyItemElement, ev: SmoothlyItemCustomEvent<HTMLSmoothlyItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyItemElement: {
        prototype: HTMLSmoothlyItemElement;
        new (): HTMLSmoothlyItemElement;
    };
    interface HTMLSmoothlyLabelElement extends Components.SmoothlyLabel, HTMLStencilElement {
    }
    var HTMLSmoothlyLabelElement: {
        prototype: HTMLSmoothlyLabelElement;
        new (): HTMLSmoothlyLabelElement;
    };
    interface HTMLSmoothlyLazyElement extends Components.SmoothlyLazy, HTMLStencilElement {
    }
    var HTMLSmoothlyLazyElement: {
        prototype: HTMLSmoothlyLazyElement;
        new (): HTMLSmoothlyLazyElement;
    };
    interface HTMLSmoothlyLoadMoreElementEventMap {
        "smoothlyLoadMore": string;
    }
    interface HTMLSmoothlyLoadMoreElement extends Components.SmoothlyLoadMore, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyLoadMoreElementEventMap>(type: K, listener: (this: HTMLSmoothlyLoadMoreElement, ev: SmoothlyLoadMoreCustomEvent<HTMLSmoothlyLoadMoreElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyLoadMoreElementEventMap>(type: K, listener: (this: HTMLSmoothlyLoadMoreElement, ev: SmoothlyLoadMoreCustomEvent<HTMLSmoothlyLoadMoreElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyLoadMoreElement: {
        prototype: HTMLSmoothlyLoadMoreElement;
        new (): HTMLSmoothlyLoadMoreElement;
    };
    interface HTMLSmoothlyModalElementEventMap {
        "smoothlyModalChange": boolean;
    }
    interface HTMLSmoothlyModalElement extends Components.SmoothlyModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyModalElementEventMap>(type: K, listener: (this: HTMLSmoothlyModalElement, ev: SmoothlyModalCustomEvent<HTMLSmoothlyModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyModalElementEventMap>(type: K, listener: (this: HTMLSmoothlyModalElement, ev: SmoothlyModalCustomEvent<HTMLSmoothlyModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyModalElement: {
        prototype: HTMLSmoothlyModalElement;
        new (): HTMLSmoothlyModalElement;
    };
    interface HTMLSmoothlyNotificationElementEventMap {
        "remove": Notice;
    }
    interface HTMLSmoothlyNotificationElement extends Components.SmoothlyNotification, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyNotificationElementEventMap>(type: K, listener: (this: HTMLSmoothlyNotificationElement, ev: SmoothlyNotificationCustomEvent<HTMLSmoothlyNotificationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyNotificationElementEventMap>(type: K, listener: (this: HTMLSmoothlyNotificationElement, ev: SmoothlyNotificationCustomEvent<HTMLSmoothlyNotificationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyNotificationElement: {
        prototype: HTMLSmoothlyNotificationElement;
        new (): HTMLSmoothlyNotificationElement;
    };
    interface HTMLSmoothlyNotifierElement extends Components.SmoothlyNotifier, HTMLStencilElement {
    }
    var HTMLSmoothlyNotifierElement: {
        prototype: HTMLSmoothlyNotifierElement;
        new (): HTMLSmoothlyNotifierElement;
    };
    interface HTMLSmoothlySpinnerElement extends Components.SmoothlySpinner, HTMLStencilElement {
    }
    var HTMLSmoothlySpinnerElement: {
        prototype: HTMLSmoothlySpinnerElement;
        new (): HTMLSmoothlySpinnerElement;
    };
    interface HTMLSmoothlySubmitElementEventMap {
        "smoothlyInputLoad": (parent: Editable) => void;
    }
    interface HTMLSmoothlySubmitElement extends Components.SmoothlySubmit, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlySubmitElementEventMap>(type: K, listener: (this: HTMLSmoothlySubmitElement, ev: SmoothlySubmitCustomEvent<HTMLSmoothlySubmitElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlySubmitElementEventMap>(type: K, listener: (this: HTMLSmoothlySubmitElement, ev: SmoothlySubmitCustomEvent<HTMLSmoothlySubmitElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlySubmitElement: {
        prototype: HTMLSmoothlySubmitElement;
        new (): HTMLSmoothlySubmitElement;
    };
    interface HTMLSmoothlySummaryElementEventMap {
        "smoothlySummaryOpen": boolean;
    }
    interface HTMLSmoothlySummaryElement extends Components.SmoothlySummary, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlySummaryElementEventMap>(type: K, listener: (this: HTMLSmoothlySummaryElement, ev: SmoothlySummaryCustomEvent<HTMLSmoothlySummaryElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlySummaryElementEventMap>(type: K, listener: (this: HTMLSmoothlySummaryElement, ev: SmoothlySummaryCustomEvent<HTMLSmoothlySummaryElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlySummaryElement: {
        prototype: HTMLSmoothlySummaryElement;
        new (): HTMLSmoothlySummaryElement;
    };
    interface HTMLSmoothlyTabElementEventMap {
        "smoothlyTabOpen": string;
        "smoothlyTabLoad": void;
    }
    interface HTMLSmoothlyTabElement extends Components.SmoothlyTab, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyTabElementEventMap>(type: K, listener: (this: HTMLSmoothlyTabElement, ev: SmoothlyTabCustomEvent<HTMLSmoothlyTabElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyTabElementEventMap>(type: K, listener: (this: HTMLSmoothlyTabElement, ev: SmoothlyTabCustomEvent<HTMLSmoothlyTabElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyTabElement: {
        prototype: HTMLSmoothlyTabElement;
        new (): HTMLSmoothlyTabElement;
    };
    interface HTMLSmoothlyTableElement extends Components.SmoothlyTable, HTMLStencilElement {
    }
    var HTMLSmoothlyTableElement: {
        prototype: HTMLSmoothlyTableElement;
        new (): HTMLSmoothlyTableElement;
    };
    interface HTMLSmoothlyTableBodyElement extends Components.SmoothlyTableBody, HTMLStencilElement {
    }
    var HTMLSmoothlyTableBodyElement: {
        prototype: HTMLSmoothlyTableBodyElement;
        new (): HTMLSmoothlyTableBodyElement;
    };
    interface HTMLSmoothlyTableCellElement extends Components.SmoothlyTableCell, HTMLStencilElement {
    }
    var HTMLSmoothlyTableCellElement: {
        prototype: HTMLSmoothlyTableCellElement;
        new (): HTMLSmoothlyTableCellElement;
    };
    interface HTMLSmoothlyTableDemoElement extends Components.SmoothlyTableDemo, HTMLStencilElement {
    }
    var HTMLSmoothlyTableDemoElement: {
        prototype: HTMLSmoothlyTableDemoElement;
        new (): HTMLSmoothlyTableDemoElement;
    };
    interface HTMLSmoothlyTableDemoColspanElement extends Components.SmoothlyTableDemoColspan, HTMLStencilElement {
    }
    var HTMLSmoothlyTableDemoColspanElement: {
        prototype: HTMLSmoothlyTableDemoColspanElement;
        new (): HTMLSmoothlyTableDemoColspanElement;
    };
    interface HTMLSmoothlyTableDemoFillerRowElement extends Components.SmoothlyTableDemoFillerRow, HTMLStencilElement {
    }
    var HTMLSmoothlyTableDemoFillerRowElement: {
        prototype: HTMLSmoothlyTableDemoFillerRowElement;
        new (): HTMLSmoothlyTableDemoFillerRowElement;
    };
    interface HTMLSmoothlyTableDemoFilteredElement extends Components.SmoothlyTableDemoFiltered, HTMLStencilElement {
    }
    var HTMLSmoothlyTableDemoFilteredElement: {
        prototype: HTMLSmoothlyTableDemoFilteredElement;
        new (): HTMLSmoothlyTableDemoFilteredElement;
    };
    interface HTMLSmoothlyTableDemoGroupElement extends Components.SmoothlyTableDemoGroup, HTMLStencilElement {
    }
    var HTMLSmoothlyTableDemoGroupElement: {
        prototype: HTMLSmoothlyTableDemoGroupElement;
        new (): HTMLSmoothlyTableDemoGroupElement;
    };
    interface HTMLSmoothlyTableDemoNestedNoCellElement extends Components.SmoothlyTableDemoNestedNoCell, HTMLStencilElement {
    }
    var HTMLSmoothlyTableDemoNestedNoCellElement: {
        prototype: HTMLSmoothlyTableDemoNestedNoCellElement;
        new (): HTMLSmoothlyTableDemoNestedNoCellElement;
    };
    interface HTMLSmoothlyTableDemoNestedNoCellInnerElement extends Components.SmoothlyTableDemoNestedNoCellInner, HTMLStencilElement {
    }
    var HTMLSmoothlyTableDemoNestedNoCellInnerElement: {
        prototype: HTMLSmoothlyTableDemoNestedNoCellInnerElement;
        new (): HTMLSmoothlyTableDemoNestedNoCellInnerElement;
    };
    interface HTMLSmoothlyTableDemoSimpleElement extends Components.SmoothlyTableDemoSimple, HTMLStencilElement {
    }
    var HTMLSmoothlyTableDemoSimpleElement: {
        prototype: HTMLSmoothlyTableDemoSimpleElement;
        new (): HTMLSmoothlyTableDemoSimpleElement;
    };
    interface HTMLSmoothlyTableExpandableCellElementEventMap {
        "smoothlyTableExpandableCellChange": boolean;
        "smoothlyTableExpandableCellRegister": void;
    }
    interface HTMLSmoothlyTableExpandableCellElement extends Components.SmoothlyTableExpandableCell, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyTableExpandableCellElementEventMap>(type: K, listener: (this: HTMLSmoothlyTableExpandableCellElement, ev: SmoothlyTableExpandableCellCustomEvent<HTMLSmoothlyTableExpandableCellElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyTableExpandableCellElementEventMap>(type: K, listener: (this: HTMLSmoothlyTableExpandableCellElement, ev: SmoothlyTableExpandableCellCustomEvent<HTMLSmoothlyTableExpandableCellElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyTableExpandableCellElement: {
        prototype: HTMLSmoothlyTableExpandableCellElement;
        new (): HTMLSmoothlyTableExpandableCellElement;
    };
    interface HTMLSmoothlyTableExpandableRowElementEventMap {
        "smoothlyTableExpandableRowChange": boolean;
    }
    interface HTMLSmoothlyTableExpandableRowElement extends Components.SmoothlyTableExpandableRow, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyTableExpandableRowElementEventMap>(type: K, listener: (this: HTMLSmoothlyTableExpandableRowElement, ev: SmoothlyTableExpandableRowCustomEvent<HTMLSmoothlyTableExpandableRowElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyTableExpandableRowElementEventMap>(type: K, listener: (this: HTMLSmoothlyTableExpandableRowElement, ev: SmoothlyTableExpandableRowCustomEvent<HTMLSmoothlyTableExpandableRowElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyTableExpandableRowElement: {
        prototype: HTMLSmoothlyTableExpandableRowElement;
        new (): HTMLSmoothlyTableExpandableRowElement;
    };
    interface HTMLSmoothlyTableFillerRowElement extends Components.SmoothlyTableFillerRow, HTMLStencilElement {
    }
    var HTMLSmoothlyTableFillerRowElement: {
        prototype: HTMLSmoothlyTableFillerRowElement;
        new (): HTMLSmoothlyTableFillerRowElement;
    };
    interface HTMLSmoothlyTableFootElement extends Components.SmoothlyTableFoot, HTMLStencilElement {
    }
    var HTMLSmoothlyTableFootElement: {
        prototype: HTMLSmoothlyTableFootElement;
        new (): HTMLSmoothlyTableFootElement;
    };
    interface HTMLSmoothlyTableHeadElement extends Components.SmoothlyTableHead, HTMLStencilElement {
    }
    var HTMLSmoothlyTableHeadElement: {
        prototype: HTMLSmoothlyTableHeadElement;
        new (): HTMLSmoothlyTableHeadElement;
    };
    interface HTMLSmoothlyTableRowElement extends Components.SmoothlyTableRow, HTMLStencilElement {
    }
    var HTMLSmoothlyTableRowElement: {
        prototype: HTMLSmoothlyTableRowElement;
        new (): HTMLSmoothlyTableRowElement;
    };
    interface HTMLSmoothlyTableRowGroupElementEventMap {
        "smoothlyTableRowGroupChange": boolean;
    }
    interface HTMLSmoothlyTableRowGroupElement extends Components.SmoothlyTableRowGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyTableRowGroupElementEventMap>(type: K, listener: (this: HTMLSmoothlyTableRowGroupElement, ev: SmoothlyTableRowGroupCustomEvent<HTMLSmoothlyTableRowGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyTableRowGroupElementEventMap>(type: K, listener: (this: HTMLSmoothlyTableRowGroupElement, ev: SmoothlyTableRowGroupCustomEvent<HTMLSmoothlyTableRowGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyTableRowGroupElement: {
        prototype: HTMLSmoothlyTableRowGroupElement;
        new (): HTMLSmoothlyTableRowGroupElement;
    };
    interface HTMLSmoothlyTabsElementEventMap {
        "smoothlyTabOpen": string;
    }
    interface HTMLSmoothlyTabsElement extends Components.SmoothlyTabs, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyTabsElementEventMap>(type: K, listener: (this: HTMLSmoothlyTabsElement, ev: SmoothlyTabsCustomEvent<HTMLSmoothlyTabsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyTabsElementEventMap>(type: K, listener: (this: HTMLSmoothlyTabsElement, ev: SmoothlyTabsCustomEvent<HTMLSmoothlyTabsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyTabsElement: {
        prototype: HTMLSmoothlyTabsElement;
        new (): HTMLSmoothlyTabsElement;
    };
    interface HTMLSmoothlyTabsDemoElement extends Components.SmoothlyTabsDemo, HTMLStencilElement {
    }
    var HTMLSmoothlyTabsDemoElement: {
        prototype: HTMLSmoothlyTabsDemoElement;
        new (): HTMLSmoothlyTabsDemoElement;
    };
    interface HTMLSmoothlyThemeColorElement extends Components.SmoothlyThemeColor, HTMLStencilElement {
    }
    var HTMLSmoothlyThemeColorElement: {
        prototype: HTMLSmoothlyThemeColorElement;
        new (): HTMLSmoothlyThemeColorElement;
    };
    interface HTMLSmoothlyThemeColorVariantElement extends Components.SmoothlyThemeColorVariant, HTMLStencilElement {
    }
    var HTMLSmoothlyThemeColorVariantElement: {
        prototype: HTMLSmoothlyThemeColorVariantElement;
        new (): HTMLSmoothlyThemeColorVariantElement;
    };
    interface HTMLSmoothlyThemeColorsElement extends Components.SmoothlyThemeColors, HTMLStencilElement {
    }
    var HTMLSmoothlyThemeColorsElement: {
        prototype: HTMLSmoothlyThemeColorsElement;
        new (): HTMLSmoothlyThemeColorsElement;
    };
    interface HTMLSmoothlyThemeDemoElement extends Components.SmoothlyThemeDemo, HTMLStencilElement {
    }
    var HTMLSmoothlyThemeDemoElement: {
        prototype: HTMLSmoothlyThemeDemoElement;
        new (): HTMLSmoothlyThemeDemoElement;
    };
    interface HTMLSmoothlyThemeGuideElement extends Components.SmoothlyThemeGuide, HTMLStencilElement {
    }
    var HTMLSmoothlyThemeGuideElement: {
        prototype: HTMLSmoothlyThemeGuideElement;
        new (): HTMLSmoothlyThemeGuideElement;
    };
    interface HTMLSmoothlyThemePickerElement extends Components.SmoothlyThemePicker, HTMLStencilElement {
    }
    var HTMLSmoothlyThemePickerElement: {
        prototype: HTMLSmoothlyThemePickerElement;
        new (): HTMLSmoothlyThemePickerElement;
    };
    interface HTMLSmoothlyToggleSwitchElementEventMap {
        "smoothlyToggleSwitchChange": boolean;
    }
    interface HTMLSmoothlyToggleSwitchElement extends Components.SmoothlyToggleSwitch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyToggleSwitchElementEventMap>(type: K, listener: (this: HTMLSmoothlyToggleSwitchElement, ev: SmoothlyToggleSwitchCustomEvent<HTMLSmoothlyToggleSwitchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyToggleSwitchElementEventMap>(type: K, listener: (this: HTMLSmoothlyToggleSwitchElement, ev: SmoothlyToggleSwitchCustomEvent<HTMLSmoothlyToggleSwitchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyToggleSwitchElement: {
        prototype: HTMLSmoothlyToggleSwitchElement;
        new (): HTMLSmoothlyToggleSwitchElement;
    };
    interface HTMLSmoothlyToggleSwitchDemoElement extends Components.SmoothlyToggleSwitchDemo, HTMLStencilElement {
    }
    var HTMLSmoothlyToggleSwitchDemoElement: {
        prototype: HTMLSmoothlyToggleSwitchDemoElement;
        new (): HTMLSmoothlyToggleSwitchDemoElement;
    };
    interface HTMLSmoothlyTriggerElementEventMap {
        "trigger": Trigger;
    }
    interface HTMLSmoothlyTriggerElement extends Components.SmoothlyTrigger, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyTriggerElementEventMap>(type: K, listener: (this: HTMLSmoothlyTriggerElement, ev: SmoothlyTriggerCustomEvent<HTMLSmoothlyTriggerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyTriggerElementEventMap>(type: K, listener: (this: HTMLSmoothlyTriggerElement, ev: SmoothlyTriggerCustomEvent<HTMLSmoothlyTriggerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyTriggerElement: {
        prototype: HTMLSmoothlyTriggerElement;
        new (): HTMLSmoothlyTriggerElement;
    };
    interface HTMLSmoothlyTriggerSinkElement extends Components.SmoothlyTriggerSink, HTMLStencilElement {
    }
    var HTMLSmoothlyTriggerSinkElement: {
        prototype: HTMLSmoothlyTriggerSinkElement;
        new (): HTMLSmoothlyTriggerSinkElement;
    };
    interface HTMLSmoothlyTriggerSourceElementEventMap {
        "trigger": Trigger;
        "smoothlyMessage": Message<any>;
    }
    interface HTMLSmoothlyTriggerSourceElement extends Components.SmoothlyTriggerSource, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyTriggerSourceElementEventMap>(type: K, listener: (this: HTMLSmoothlyTriggerSourceElement, ev: SmoothlyTriggerSourceCustomEvent<HTMLSmoothlyTriggerSourceElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyTriggerSourceElementEventMap>(type: K, listener: (this: HTMLSmoothlyTriggerSourceElement, ev: SmoothlyTriggerSourceCustomEvent<HTMLSmoothlyTriggerSourceElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyTriggerSourceElement: {
        prototype: HTMLSmoothlyTriggerSourceElement;
        new (): HTMLSmoothlyTriggerSourceElement;
    };
    interface HTMLElementTagNameMap {
        "smoothly-app": HTMLSmoothlyAppElement;
        "smoothly-app-demo": HTMLSmoothlyAppDemoElement;
        "smoothly-app-room": HTMLSmoothlyAppRoomElement;
        "smoothly-back-to-top": HTMLSmoothlyBackToTopElement;
        "smoothly-burger": HTMLSmoothlyBurgerElement;
        "smoothly-button": HTMLSmoothlyButtonElement;
        "smoothly-button-confirm": HTMLSmoothlyButtonConfirmElement;
        "smoothly-button-demo": HTMLSmoothlyButtonDemoElement;
        "smoothly-calendar": HTMLSmoothlyCalendarElement;
        "smoothly-checkbox": HTMLSmoothlyCheckboxElement;
        "smoothly-color": HTMLSmoothlyColorElement;
        "smoothly-country": HTMLSmoothlyCountryElement;
        "smoothly-dialog": HTMLSmoothlyDialogElement;
        "smoothly-dialog-demo": HTMLSmoothlyDialogDemoElement;
        "smoothly-display": HTMLSmoothlyDisplayElement;
        "smoothly-display-demo": HTMLSmoothlyDisplayDemoElement;
        "smoothly-display-demo-json": HTMLSmoothlyDisplayDemoJsonElement;
        "smoothly-display-json": HTMLSmoothlyDisplayJsonElement;
        "smoothly-display-json-object": HTMLSmoothlyDisplayJsonObjectElement;
        "smoothly-display-json-primitive": HTMLSmoothlyDisplayJsonPrimitiveElement;
        "smoothly-display-json-record-key": HTMLSmoothlyDisplayJsonRecordKeyElement;
        "smoothly-filter": HTMLSmoothlyFilterElement;
        "smoothly-filter-field": HTMLSmoothlyFilterFieldElement;
        "smoothly-filter-input": HTMLSmoothlyFilterInputElement;
        "smoothly-filter-select": HTMLSmoothlyFilterSelectElement;
        "smoothly-filter-toggle": HTMLSmoothlyFilterToggleElement;
        "smoothly-form": HTMLSmoothlyFormElement;
        "smoothly-form-demo": HTMLSmoothlyFormDemoElement;
        "smoothly-form-demo-all": HTMLSmoothlyFormDemoAllElement;
        "smoothly-form-demo-card": HTMLSmoothlyFormDemoCardElement;
        "smoothly-form-demo-controlled": HTMLSmoothlyFormDemoControlledElement;
        "smoothly-form-demo-date": HTMLSmoothlyFormDemoDateElement;
        "smoothly-form-demo-date-range": HTMLSmoothlyFormDemoDateRangeElement;
        "smoothly-form-demo-login": HTMLSmoothlyFormDemoLoginElement;
        "smoothly-form-demo-pet": HTMLSmoothlyFormDemoPetElement;
        "smoothly-form-demo-prices": HTMLSmoothlyFormDemoPricesElement;
        "smoothly-form-demo-schedule": HTMLSmoothlyFormDemoScheduleElement;
        "smoothly-form-demo-transparent": HTMLSmoothlyFormDemoTransparentElement;
        "smoothly-form-demo-typed": HTMLSmoothlyFormDemoTypedElement;
        "smoothly-frame": HTMLSmoothlyFrameElement;
        "smoothly-icon": HTMLSmoothlyIconElement;
        "smoothly-icon-demo": HTMLSmoothlyIconDemoElement;
        "smoothly-input": HTMLSmoothlyInputElement;
        "smoothly-input-checkbox": HTMLSmoothlyInputCheckboxElement;
        "smoothly-input-checkbox-demo": HTMLSmoothlyInputCheckboxDemoElement;
        "smoothly-input-clear": HTMLSmoothlyInputClearElement;
        "smoothly-input-color": HTMLSmoothlyInputColorElement;
        "smoothly-input-color-demo": HTMLSmoothlyInputColorDemoElement;
        "smoothly-input-date": HTMLSmoothlyInputDateElement;
        "smoothly-input-date-range": HTMLSmoothlyInputDateRangeElement;
        "smoothly-input-date-time": HTMLSmoothlyInputDateTimeElement;
        "smoothly-input-demo": HTMLSmoothlyInputDemoElement;
        "smoothly-input-demo-standard": HTMLSmoothlyInputDemoStandardElement;
        "smoothly-input-edit": HTMLSmoothlyInputEditElement;
        "smoothly-input-file": HTMLSmoothlyInputFileElement;
        "smoothly-input-month": HTMLSmoothlyInputMonthElement;
        "smoothly-input-price-demo": HTMLSmoothlyInputPriceDemoElement;
        "smoothly-input-radio": HTMLSmoothlyInputRadioElement;
        "smoothly-input-radio-item": HTMLSmoothlyInputRadioItemElement;
        "smoothly-input-range": HTMLSmoothlyInputRangeElement;
        "smoothly-input-range-demo": HTMLSmoothlyInputRangeDemoElement;
        "smoothly-input-reset": HTMLSmoothlyInputResetElement;
        "smoothly-input-select": HTMLSmoothlyInputSelectElement;
        "smoothly-input-submit": HTMLSmoothlyInputSubmitElement;
        "smoothly-item": HTMLSmoothlyItemElement;
        "smoothly-label": HTMLSmoothlyLabelElement;
        "smoothly-lazy": HTMLSmoothlyLazyElement;
        "smoothly-load-more": HTMLSmoothlyLoadMoreElement;
        "smoothly-modal": HTMLSmoothlyModalElement;
        "smoothly-notification": HTMLSmoothlyNotificationElement;
        "smoothly-notifier": HTMLSmoothlyNotifierElement;
        "smoothly-spinner": HTMLSmoothlySpinnerElement;
        "smoothly-submit": HTMLSmoothlySubmitElement;
        "smoothly-summary": HTMLSmoothlySummaryElement;
        "smoothly-tab": HTMLSmoothlyTabElement;
        "smoothly-table": HTMLSmoothlyTableElement;
        "smoothly-table-body": HTMLSmoothlyTableBodyElement;
        "smoothly-table-cell": HTMLSmoothlyTableCellElement;
        "smoothly-table-demo": HTMLSmoothlyTableDemoElement;
        "smoothly-table-demo-colspan": HTMLSmoothlyTableDemoColspanElement;
        "smoothly-table-demo-filler-row": HTMLSmoothlyTableDemoFillerRowElement;
        "smoothly-table-demo-filtered": HTMLSmoothlyTableDemoFilteredElement;
        "smoothly-table-demo-group": HTMLSmoothlyTableDemoGroupElement;
        "smoothly-table-demo-nested-no-cell": HTMLSmoothlyTableDemoNestedNoCellElement;
        "smoothly-table-demo-nested-no-cell-inner": HTMLSmoothlyTableDemoNestedNoCellInnerElement;
        "smoothly-table-demo-simple": HTMLSmoothlyTableDemoSimpleElement;
        "smoothly-table-expandable-cell": HTMLSmoothlyTableExpandableCellElement;
        "smoothly-table-expandable-row": HTMLSmoothlyTableExpandableRowElement;
        "smoothly-table-filler-row": HTMLSmoothlyTableFillerRowElement;
        "smoothly-table-foot": HTMLSmoothlyTableFootElement;
        "smoothly-table-head": HTMLSmoothlyTableHeadElement;
        "smoothly-table-row": HTMLSmoothlyTableRowElement;
        "smoothly-table-row-group": HTMLSmoothlyTableRowGroupElement;
        "smoothly-tabs": HTMLSmoothlyTabsElement;
        "smoothly-tabs-demo": HTMLSmoothlyTabsDemoElement;
        "smoothly-theme-color": HTMLSmoothlyThemeColorElement;
        "smoothly-theme-color-variant": HTMLSmoothlyThemeColorVariantElement;
        "smoothly-theme-colors": HTMLSmoothlyThemeColorsElement;
        "smoothly-theme-demo": HTMLSmoothlyThemeDemoElement;
        "smoothly-theme-guide": HTMLSmoothlyThemeGuideElement;
        "smoothly-theme-picker": HTMLSmoothlyThemePickerElement;
        "smoothly-toggle-switch": HTMLSmoothlyToggleSwitchElement;
        "smoothly-toggle-switch-demo": HTMLSmoothlyToggleSwitchDemoElement;
        "smoothly-trigger": HTMLSmoothlyTriggerElement;
        "smoothly-trigger-sink": HTMLSmoothlyTriggerSinkElement;
        "smoothly-trigger-source": HTMLSmoothlyTriggerSourceElement;
    }
}
declare namespace LocalJSX {
    interface SmoothlyApp {
        "color"?: Color;
        "home"?: string;
        "label"?: string;
        "menuOpen"?: boolean;
    }
    interface SmoothlyAppDemo {
        "baseUrl"?: string;
    }
    interface SmoothlyAppRoom {
        "content"?: VNode | FunctionalComponent;
        "disabled"?: boolean;
        "icon"?: Icon;
        "label"?: string;
        "onSmoothlyRoomLoad"?: (event: SmoothlyAppRoomCustomEvent<{ selected: boolean }>) => void;
        "onSmoothlyRoomSelect"?: (event: SmoothlyAppRoomCustomEvent<{ history: boolean }>) => void;
        "path"?: string | URLPattern;
        "selected"?: boolean;
    }
    interface SmoothlyBackToTop {
        "bottom"?: string;
        "opacity"?: string;
        "right"?: string;
    }
    interface SmoothlyBurger {
        "mediaQuery"?: string;
        "onSmoothlyNavStatus"?: (event: SmoothlyBurgerCustomEvent<boolean>) => void;
        "onSmoothlyVisibleStatus"?: (event: SmoothlyBurgerCustomEvent<boolean>) => void;
        "open"?: boolean;
        "visible"?: boolean;
    }
    interface SmoothlyButton {
        "color"?: Color;
        "disabled"?: boolean;
        "expand"?: "block" | "full";
        "fill"?: Fill;
        "link"?: string;
        "shape"?: "rounded";
        "size"?: "small" | "large" | "icon" | "flexible";
        "type"?: Button.Properties["type"];
    }
    interface SmoothlyButtonConfirm {
        "color"?: Color;
        "disabled"?: boolean;
        "doubleClickTime"?: number;
        "expand"?: "block" | "full";
        "fill"?: Fill;
        "name"?: string;
        "onSmoothlyConfirm"?: (event: SmoothlyButtonConfirmCustomEvent<Data>) => void;
        "onSmoothlyInputLoad"?: (event: SmoothlyButtonConfirmCustomEvent<(parent: Editable) => void>) => void;
        "shape"?: "rounded";
        "size"?: "small" | "large" | "icon" | "flexible";
    }
    interface SmoothlyButtonDemo {
    }
    interface SmoothlyCalendar {
        "doubleInput"?: boolean;
        "end"?: isoly.Date;
        "max"?: isoly.Date;
        "min"?: isoly.Date;
        "month"?: isoly.Date;
        "onSmoothlyDateRangeSet"?: (event: SmoothlyCalendarCustomEvent<isoly.DateRange>) => void;
        "onSmoothlyDateSet"?: (event: SmoothlyCalendarCustomEvent<isoly.Date>) => void;
        "onSmoothlyEndChange"?: (event: SmoothlyCalendarCustomEvent<isoly.Date>) => void;
        "onSmoothlyStartChange"?: (event: SmoothlyCalendarCustomEvent<isoly.Date>) => void;
        "onSmoothlyValueChange"?: (event: SmoothlyCalendarCustomEvent<isoly.Date>) => void;
        "start"?: isoly.Date;
        "value"?: isoly.Date;
    }
    interface SmoothlyCheckbox {
        "checked"?: boolean;
        "disabled"?: boolean;
        "intermediate"?: boolean;
        "name"?: string;
        "onSmoothlyInput"?: (event: SmoothlyCheckboxCustomEvent<Record<string, any>>) => void;
        "size"?: "tiny" | "small" | "medium" | "large";
        "unavailable"?: boolean;
        "value"?: any;
    }
    interface SmoothlyColor {
        "color"?: Color;
    }
    interface SmoothlyCountry {
        "text"?: "alpha2" | "name" | "none";
        "value"?: isoly.CountryCode.Alpha2;
    }
    interface SmoothlyDialog {
        "closable"?: boolean;
        "color"?: Color | undefined;
        "header"?: string | undefined;
        "open"?: boolean;
    }
    interface SmoothlyDialogDemo {
    }
    interface SmoothlyDisplay {
        "collapseDepth"?: number;
        "country"?: isoly.CountryCode.Alpha2;
        "currency"?: isoly.Currency;
        "format"?: isoly.DateTime.Format;
        "label"?: string;
        "toInteger"?: boolean;
        "type"?: tidily.Type | "json";
        "value"?: any;
    }
    interface SmoothlyDisplayDemo {
        "onNotice"?: (event: SmoothlyDisplayDemoCustomEvent<Notice>) => void;
    }
    interface SmoothlyDisplayDemoJson {
    }
    interface SmoothlyDisplayJson {
        "collapseDepth"?: number;
        "value"?: any;
    }
    interface SmoothlyDisplayJsonObject {
        "collapseDepth"?: number;
        "value"?: Record<string, any> | any[];
    }
    interface SmoothlyDisplayJsonPrimitive {
        "value"?: any;
    }
    interface SmoothlyDisplayJsonRecordKey {
        "value"?: any;
    }
    interface SmoothlyFilter {
        "onSmoothlyFilter"?: (event: SmoothlyFilterCustomEvent<selectively.Criteria>) => void;
    }
    interface SmoothlyFilterField {
        "criteria"?: selectively.Criteria;
        "onSmoothlyFilterField"?: (event: SmoothlyFilterFieldCustomEvent<selectively.Rule>) => void;
    }
    interface SmoothlyFilterInput {
        "label"?: string;
        "onSmoothlyFilterManipulate"?: (event: SmoothlyFilterInputCustomEvent<Filter.Manipulate>) => void;
        "onSmoothlyFilterUpdate"?: (event: SmoothlyFilterInputCustomEvent<Filter.Update>) => void;
        "placeholder"?: string;
        "property"?: string;
    }
    interface SmoothlyFilterSelect {
        "label"?: string;
        "looks"?: Looks;
        "menuHeight"?: `${number}items` | `${number}rem` | `${number}px` | `${number}vh` | undefined;
        "multiple"?: boolean;
        "onSmoothlyFilterManipulate"?: (event: SmoothlyFilterSelectCustomEvent<Filter.Manipulate>) => void;
        "onSmoothlyFilterUpdate"?: (event: SmoothlyFilterSelectCustomEvent<Filter.Update>) => void;
        "onSmoothlyInputLooks"?: (event: SmoothlyFilterSelectCustomEvent<(looks?: Looks) => void>) => void;
        "property"?: string;
        "type"?: "array" | "string";
    }
    interface SmoothlyFilterToggle {
        "active"?: boolean;
        "flip"?: boolean;
        "icon"?: Icon;
        "not"?: boolean;
        "onSmoothlyFilterManipulate"?: (event: SmoothlyFilterToggleCustomEvent<Filter.Manipulate>) => void;
        "onSmoothlyFilterUpdate"?: (event: SmoothlyFilterToggleCustomEvent<Filter.Update>) => void;
        "properties"?: Record<string, string>;
        "toolTip"?: string;
    }
    interface SmoothlyForm {
        "action"?: string;
        "changed"?: boolean;
        "color"?: Color;
        "looks"?: Looks;
        "name"?: string;
        "onNotice"?: (event: SmoothlyFormCustomEvent<Notice>) => void;
        "onSmoothlyFormClear"?: (event: SmoothlyFormCustomEvent<void>) => void;
        "onSmoothlyFormDisable"?: (event: SmoothlyFormCustomEvent<(disabled: boolean) => void>) => void;
        "onSmoothlyFormEdit"?: (event: SmoothlyFormCustomEvent<boolean>) => void;
        "onSmoothlyFormInput"?: (event: SmoothlyFormCustomEvent<Data>) => void;
        "onSmoothlyFormReset"?: (event: SmoothlyFormCustomEvent<void>) => void;
        "onSmoothlyFormSubmit"?: (event: SmoothlyFormCustomEvent<Submit>) => void;
        "prevent"?: boolean;
        "processing"?: Promise<boolean>;
        "readonly"?: boolean;
        "type"?: "update" | "change" | "fetch" | "create";
        "validator"?: isly.Type<any>;
        "value"?: Readonly<Data>;
    }
    interface SmoothlyFormDemo {
    }
    interface SmoothlyFormDemoAll {
    }
    interface SmoothlyFormDemoCard {
    }
    interface SmoothlyFormDemoControlled {
    }
    interface SmoothlyFormDemoDate {
        "onNotice"?: (event: SmoothlyFormDemoDateCustomEvent<Notice>) => void;
    }
    interface SmoothlyFormDemoDateRange {
        "onNotice"?: (event: SmoothlyFormDemoDateRangeCustomEvent<Notice>) => void;
    }
    interface SmoothlyFormDemoLogin {
    }
    interface SmoothlyFormDemoPet {
    }
    interface SmoothlyFormDemoPrices {
    }
    interface SmoothlyFormDemoSchedule {
    }
    interface SmoothlyFormDemoTransparent {
    }
    interface SmoothlyFormDemoTyped {
    }
    interface SmoothlyFrame {
        "name"?: string;
        "onMessage2"?: (event: SmoothlyFrameCustomEvent<Message<any>>) => void;
        "onTrigger"?: (event: SmoothlyFrameCustomEvent<Trigger>) => void;
        "origin"?: string | undefined;
        "url"?: string;
    }
    interface SmoothlyIcon {
        "color"?: Color;
        "fill"?: Fill;
        "flip"?: "x" | "y";
        "name"?: Icon | "empty";
        "rotate"?: number;
        "size"?: "tiny" | "small" | "medium" | "large" | "xlarge";
        "toolTip"?: string;
    }
    interface SmoothlyIconDemo {
        "onNotice"?: (event: SmoothlyIconDemoCustomEvent<Notice>) => void;
    }
    interface SmoothlyInput {
        "autocomplete"?: Exclude<tidily.Settings["autocomplete"], undefined>;
        "changed"?: boolean;
        "color"?: Color;
        "currency"?: isoly.Currency;
        "disabled"?: boolean;
        "errorMessage"?: string;
        "invalid"?: boolean;
        "looks"?: Looks;
        "max"?: number;
        "min"?: number;
        "name"?: string;
        "onSmoothlyBlur"?: (event: SmoothlyInputCustomEvent<void>) => void;
        "onSmoothlyChange"?: (event: SmoothlyInputCustomEvent<Record<string, any>>) => void;
        "onSmoothlyFormDisable"?: (event: SmoothlyInputCustomEvent<(disabled: boolean) => void>) => void;
        "onSmoothlyInput"?: (event: SmoothlyInputCustomEvent<Record<string, any>>) => void;
        "onSmoothlyInputLoad"?: (event: SmoothlyInputCustomEvent<(parent: Editable) => void>) => void;
        "onSmoothlyInputLooks"?: (event: SmoothlyInputCustomEvent<(looks?: Looks, color?: Color) => void>) => void;
        "onSmoothlyKeydown"?: (event: SmoothlyInputCustomEvent<Key>) => void;
        "pad"?: number;
        "placeholder"?: string | undefined;
        "readonly"?: boolean;
        "required"?: boolean;
        "showLabel"?: boolean;
        "toInteger"?: boolean;
        "type"?: tidily.Type;
        "value"?: any;
    }
    interface SmoothlyInputCheckbox {
        "changed"?: boolean;
        "checked"?: boolean;
        "color"?: Color;
        "disabled"?: boolean;
        "looks"?: Looks;
        "name"?: string;
        "onSmoothlyFormDisable"?: (event: SmoothlyInputCheckboxCustomEvent<(disabled: boolean) => void>) => void;
        "onSmoothlyInput"?: (event: SmoothlyInputCheckboxCustomEvent<Data>) => void;
        "onSmoothlyInputLoad"?: (event: SmoothlyInputCheckboxCustomEvent<(parent: Editable) => void>) => void;
        "onSmoothlyInputLooks"?: (event: SmoothlyInputCheckboxCustomEvent<(looks?: Looks, color?: Color) => void>) => void;
        "readonly"?: boolean;
        "value"?: boolean;
    }
    interface SmoothlyInputCheckboxDemo {
    }
    interface SmoothlyInputClear {
        "color"?: Color;
        "disabled"?: boolean;
        "display"?: boolean;
        "expand"?: "block" | "full";
        "fill"?: Fill;
        "onSmoothlyInputLoad"?: (event: SmoothlyInputClearCustomEvent<(parent: Editable) => void>) => void;
        "shape"?: "rounded";
        "size"?: "small" | "large" | "icon" | "flexible";
        "tooltip"?: string;
        "type"?: "form" | "input";
    }
    interface SmoothlyInputColor {
        "changed"?: boolean;
        "color"?: Color;
        "disabled"?: boolean;
        "looks"?: Looks;
        "name"?: string;
        "onSmoothlyFormDisable"?: (event: SmoothlyInputColorCustomEvent<(disabled: boolean) => void>) => void;
        "onSmoothlyInput"?: (event: SmoothlyInputColorCustomEvent<Record<string, any>>) => void;
        "onSmoothlyInputLoad"?: (event: SmoothlyInputColorCustomEvent<(parent: Editable) => void>) => void;
        "onSmoothlyInputLooks"?: (event: SmoothlyInputColorCustomEvent<(looks?: Looks, color?: Color) => void>) => void;
        "output"?: "rgb" | "hex";
        "readonly"?: boolean;
        "showLabel"?: boolean;
        "value"?: string | undefined;
    }
    interface SmoothlyInputColorDemo {
    }
    interface SmoothlyInputDate {
        "changed"?: boolean;
        "color"?: Color;
        "disabled"?: boolean;
        "errorMessage"?: string;
        "invalid"?: boolean;
        "looks"?: Looks;
        "max"?: isoly.Date;
        "min"?: isoly.Date;
        "name"?: string;
        "onSmoothlyFormDisable"?: (event: SmoothlyInputDateCustomEvent<(disabled: boolean) => void>) => void;
        "onSmoothlyInput"?: (event: SmoothlyInputDateCustomEvent<Record<string, any>>) => void;
        "onSmoothlyInputLoad"?: (event: SmoothlyInputDateCustomEvent<(parent: Editable) => void>) => void;
        "onSmoothlyInputLooks"?: (event: SmoothlyInputDateCustomEvent<(looks?: Looks, color?: Color) => void>) => void;
        "onSmoothlyValueChange"?: (event: SmoothlyInputDateCustomEvent<isoly.Date>) => void;
        "open"?: boolean;
        "readonly"?: boolean;
        "showLabel"?: boolean;
        "value"?: isoly.Date;
    }
    interface SmoothlyInputDateRange {
        "changed"?: boolean;
        "color"?: Color;
        "disabled"?: boolean;
        "end"?: isoly.Date | undefined;
        "invalid"?: boolean;
        "looks"?: Looks;
        "max"?: isoly.Date;
        "min"?: isoly.Date;
        "name"?: string;
        "onSmoothlyFormDisable"?: (event: SmoothlyInputDateRangeCustomEvent<(disabled: boolean) => void>) => void;
        "onSmoothlyInput"?: (event: SmoothlyInputDateRangeCustomEvent<{ [name: string]: isoly.DateRange | undefined }>) => void;
        "onSmoothlyInputLoad"?: (event: SmoothlyInputDateRangeCustomEvent<(parent: Editable) => void>) => void;
        "onSmoothlyInputLooks"?: (event: SmoothlyInputDateRangeCustomEvent<(looks?: Looks, color?: Color) => void>) => void;
        "placeholder"?: string;
        "readonly"?: boolean;
        "showLabel"?: boolean;
        "start"?: isoly.Date | undefined;
    }
    interface SmoothlyInputDateTime {
        "changed"?: boolean;
        "color"?: Color;
        "disabled"?: boolean;
        "errorMessage"?: string;
        "invalid"?: boolean;
        "looks"?: Looks;
        "max"?: isoly.DateTime;
        "min"?: isoly.DateTime;
        "name"?: string;
        "onSmoothlyFormDisable"?: (event: SmoothlyInputDateTimeCustomEvent<(disabled: boolean) => void>) => void;
        "onSmoothlyInput"?: (event: SmoothlyInputDateTimeCustomEvent<Record<string, any>>) => void;
        "onSmoothlyInputLoad"?: (event: SmoothlyInputDateTimeCustomEvent<(parent: Editable) => void>) => void;
        "onSmoothlyInputLooks"?: (event: SmoothlyInputDateTimeCustomEvent<(looks?: Looks, color?: Color) => void>) => void;
        "onSmoothlyValueChange"?: (event: SmoothlyInputDateTimeCustomEvent<isoly.DateTime>) => void;
        "open"?: boolean;
        "readonly"?: boolean;
        "showLabel"?: boolean;
        "value"?: isoly.DateTime;
    }
    interface SmoothlyInputDemo {
    }
    interface SmoothlyInputDemoStandard {
    }
    interface SmoothlyInputEdit {
        "color"?: Color;
        "disabled"?: boolean;
        "display"?: boolean;
        "expand"?: "block" | "full";
        "fill"?: Fill;
        "onSmoothlyInputLoad"?: (event: SmoothlyInputEditCustomEvent<(parent: Editable) => void>) => void;
        "shape"?: "rounded";
        "size"?: "flexible" | "small" | "large" | "icon";
        "toolTip"?: string;
        "type"?: "form" | "input";
    }
    interface SmoothlyInputFile {
        "accept"?: string;
        "camera"?: "front" | "back";
        "changed"?: boolean;
        "color"?: Color;
        "disabled"?: boolean;
        "looks"?: Looks;
        "name"?: string;
        "onSmoothlyFormDisable"?: (event: SmoothlyInputFileCustomEvent<(disabled: boolean) => void>) => void;
        "onSmoothlyInput"?: (event: SmoothlyInputFileCustomEvent<Record<string, any>>) => void;
        "onSmoothlyInputLoad"?: (event: SmoothlyInputFileCustomEvent<(parent: Editable) => void>) => void;
        "onSmoothlyInputLooks"?: (event: SmoothlyInputFileCustomEvent<(looks?: Looks, color?: Color) => void>) => void;
        "placeholder"?: string | undefined;
        "readonly"?: boolean;
        "showLabel"?: boolean;
        "value"?: File;
    }
    interface SmoothlyInputMonth {
        "color"?: Color;
        "inCalendar"?: boolean;
        "looks"?: Looks;
        "max"?: isoly.Date;
        "min"?: isoly.Date;
        "name"?: string;
        "next"?: boolean;
        "onSmoothlyFormDisable"?: (event: SmoothlyInputMonthCustomEvent<(disabled: boolean) => void>) => void;
        "onSmoothlyInput"?: (event: SmoothlyInputMonthCustomEvent<Data>) => void;
        "onSmoothlyInputLoad"?: (event: SmoothlyInputMonthCustomEvent<(parent: Editable) => void>) => void;
        "onSmoothlyInputLooks"?: (event: SmoothlyInputMonthCustomEvent<(looks?: Looks, color?: Color) => void>) => void;
        "previous"?: boolean;
        "readonly"?: boolean;
        "showLabel"?: boolean;
        "value"?: isoly.Date;
    }
    interface SmoothlyInputPriceDemo {
    }
    interface SmoothlyInputRadio {
        "changed"?: boolean;
        "clearable"?: boolean;
        "color"?: Color;
        "disabled"?: boolean;
        "looks"?: Looks;
        "name"?: string;
        "onSmoothlyFormDisable"?: (event: SmoothlyInputRadioCustomEvent<(disabled: boolean) => void>) => void;
        "onSmoothlyInput"?: (event: SmoothlyInputRadioCustomEvent<Data>) => void;
        "onSmoothlyInputLoad"?: (event: SmoothlyInputRadioCustomEvent<(parent: Editable) => void>) => void;
        "onSmoothlyInputLooks"?: (event: SmoothlyInputRadioCustomEvent<(looks?: Looks, color?: Color) => void>) => void;
        "readonly"?: boolean;
        "showLabel"?: boolean;
        "value"?: any;
    }
    interface SmoothlyInputRadioItem {
        "looks"?: Looks;
        "name"?: string;
        "onSmoothlyRadioItemRegister"?: (event: SmoothlyInputRadioItemCustomEvent<(name: string) => void>) => void;
        "onSmoothlySelect"?: (event: SmoothlyInputRadioItemCustomEvent<Selectable>) => void;
        "selected"?: boolean;
        "value"?: any;
    }
    interface SmoothlyInputRange {
        "changed"?: boolean;
        "color"?: Color;
        "defined"?: boolean;
        "disabled"?: boolean;
        "label"?: string;
        "looks"?: Looks;
        "max"?: number;
        "min"?: number;
        "name"?: string;
        "onSmoothlyFormDisable"?: (event: SmoothlyInputRangeCustomEvent<(disabled: boolean) => void>) => void;
        "onSmoothlyInput"?: (event: SmoothlyInputRangeCustomEvent<Record<string, any>>) => void;
        "onSmoothlyInputLoad"?: (event: SmoothlyInputRangeCustomEvent<(parent: Editable) => void>) => void;
        "onSmoothlyInputLooks"?: (event: SmoothlyInputRangeCustomEvent<(looks?: Looks, color?: Color) => void>) => void;
        "outputSide"?: "right" | "left";
        "readonly"?: boolean;
        "step"?: number;
        "type"?: Extract<tidily.Type, "text" | "percent">;
        "value"?: number | undefined;
    }
    interface SmoothlyInputRangeDemo {
    }
    interface SmoothlyInputReset {
        "color"?: Color;
        "disabled"?: boolean;
        "display"?: boolean;
        "expand"?: "block" | "full";
        "fill"?: Fill;
        "onSmoothlyInputLoad"?: (event: SmoothlyInputResetCustomEvent<(parent: Editable) => void>) => void;
        "shape"?: "rounded";
        "size"?: "flexible" | "small" | "large" | "icon";
        "tooltip"?: string;
        "type"?: "form" | "input";
    }
    interface SmoothlyInputSelect {
        "changed"?: boolean;
        "clearable"?: boolean;
        "color"?: Color;
        "defined"?: boolean;
        "disabled"?: boolean;
        "errorMessage"?: string;
        "inCalendar"?: boolean;
        "invalid"?: boolean;
        "looks"?: Looks;
        "menuHeight"?: `${number}${"items" | "rem" | "px" | "vh"}`;
        "multiple"?: boolean;
        "mutable"?: boolean;
        "name"?: string;
        "onSmoothlyFormDisable"?: (event: SmoothlyInputSelectCustomEvent<(disabled: boolean) => void>) => void;
        "onSmoothlyInput"?: (event: SmoothlyInputSelectCustomEvent<Data>) => void;
        "onSmoothlyInputLoad"?: (event: SmoothlyInputSelectCustomEvent<(parent: Editable) => void>) => void;
        "onSmoothlyInputLooks"?: (event: SmoothlyInputSelectCustomEvent<(looks?: Looks, color?: Color) => void>) => void;
        "onSmoothlyItemSelect"?: (event: SmoothlyInputSelectCustomEvent<HTMLSmoothlyItemElement>) => void;
        "ordered"?: boolean;
        "placeholder"?: string | any;
        "readonly"?: boolean;
        "required"?: boolean;
        "searchDisabled"?: boolean;
        "showLabel"?: boolean;
        "showSelected"?: boolean;
    }
    interface SmoothlyInputSubmit {
        "color"?: Color;
        "delete"?: boolean;
        "disabled"?: boolean;
        "display"?: boolean;
        "expand"?: "block" | "full";
        "fill"?: Fill;
        "icon"?: Icon | false;
        "onSmoothlyInputLoad"?: (event: SmoothlyInputSubmitCustomEvent<(parent: Editable) => void>) => void;
        "shape"?: "rounded";
        "size"?: "flexible" | "small" | "large" | "icon";
        "toolTip"?: string;
    }
    interface SmoothlyItem {
        "deselectable"?: boolean;
        "disabled"?: boolean;
        "marked"?: boolean;
        "onSmoothlyInputLoad"?: (event: SmoothlyItemCustomEvent<(parent: Editable) => void>) => void;
        "onSmoothlyItemSelect"?: (event: SmoothlyItemCustomEvent<HTMLSmoothlyItemElement>) => void;
        "selected"?: boolean;
        "value"?: any;
    }
    interface SmoothlyLabel {
        "description"?: string;
        "hue"?: number;
        "shape"?: "rectangle" | "rounded";
    }
    interface SmoothlyLazy {
        "content"?: VNode | FunctionalComponent;
        "show"?: boolean;
    }
    interface SmoothlyLoadMore {
        "multiple"?: boolean;
        "name"?: string;
        "onSmoothlyLoadMore"?: (event: SmoothlyLoadMoreCustomEvent<string>) => void;
        "triggerMode"?: "scroll" | "intersection";
    }
    interface SmoothlyModal {
        "align"?: "top" | "center";
        "closable"?: boolean;
        "onSmoothlyModalChange"?: (event: SmoothlyModalCustomEvent<boolean>) => void;
        "open"?: boolean;
    }
    interface SmoothlyNotification {
        "closable"?: boolean;
        "icon"?: boolean;
        "notice"?: Notice;
        "onRemove"?: (event: SmoothlyNotificationCustomEvent<Notice>) => void;
    }
    interface SmoothlyNotifier {
        "icon"?: boolean;
    }
    interface SmoothlySpinner {
        "overlay"?: boolean;
        "size"?: "small" | "icon" | "medium" | "large";
    }
    interface SmoothlySubmit {
        "color"?: Color;
        "disabled"?: boolean;
        "expand"?: "block" | "full";
        "fill"?: Fill;
        "onSmoothlyInputLoad"?: (event: SmoothlySubmitCustomEvent<(parent: Editable) => void>) => void;
        "prevent"?: boolean;
        "shape"?: "rounded";
        "size"?: "flexible" | "small" | "large" | "icon";
        "type"?: "link" | "button";
    }
    interface SmoothlySummary {
        "color"?: Color;
        "fill"?: Fill;
        "onSmoothlySummaryOpen"?: (event: SmoothlySummaryCustomEvent<boolean>) => void;
        "open"?: boolean;
        "size"?: "tiny" | "small" | "medium" | "large";
    }
    interface SmoothlyTab {
        "disabled"?: boolean;
        "label"?: string;
        "onSmoothlyTabLoad"?: (event: SmoothlyTabCustomEvent<void>) => void;
        "onSmoothlyTabOpen"?: (event: SmoothlyTabCustomEvent<string>) => void;
        "open"?: boolean;
        "tooltip"?: string;
    }
    interface SmoothlyTable {
        "columns"?: number;
    }
    interface SmoothlyTableBody {
    }
    interface SmoothlyTableCell {
        "span"?: number;
    }
    interface SmoothlyTableDemo {
    }
    interface SmoothlyTableDemoColspan {
    }
    interface SmoothlyTableDemoFillerRow {
    }
    interface SmoothlyTableDemoFiltered {
    }
    interface SmoothlyTableDemoGroup {
    }
    interface SmoothlyTableDemoNestedNoCell {
    }
    interface SmoothlyTableDemoNestedNoCellInner {
        "data"?: {
		id: number
		name: string
		age: number
		balance: number
	}[];
    }
    interface SmoothlyTableDemoSimple {
    }
    interface SmoothlyTableExpandableCell {
        "onSmoothlyTableExpandableCellChange"?: (event: SmoothlyTableExpandableCellCustomEvent<boolean>) => void;
        "onSmoothlyTableExpandableCellRegister"?: (event: SmoothlyTableExpandableCellCustomEvent<void>) => void;
        "open"?: boolean;
        "span"?: number;
    }
    interface SmoothlyTableExpandableRow {
        "onSmoothlyTableExpandableRowChange"?: (event: SmoothlyTableExpandableRowCustomEvent<boolean>) => void;
        "open"?: boolean;
    }
    interface SmoothlyTableFillerRow {
    }
    interface SmoothlyTableFoot {
    }
    interface SmoothlyTableHead {
    }
    interface SmoothlyTableRow {
    }
    interface SmoothlyTableRowGroup {
        "align"?: boolean;
        "onSmoothlyTableRowGroupChange"?: (event: SmoothlyTableRowGroupCustomEvent<boolean>) => void;
        "open"?: boolean;
    }
    interface SmoothlyTabs {
        "onSmoothlyTabOpen"?: (event: SmoothlyTabsCustomEvent<string>) => void;
        "tabs"?: "always" | "multiple";
    }
    interface SmoothlyTabsDemo {
    }
    interface SmoothlyThemeColor {
        "color"?: Color;
    }
    interface SmoothlyThemeColorVariant {
        "color"?: Color;
        "variant"?: "shade" | "tint" | "color";
    }
    interface SmoothlyThemeColors {
    }
    interface SmoothlyThemeDemo {
    }
    interface SmoothlyThemeGuide {
    }
    interface SmoothlyThemePicker {
        "element"?: string;
    }
    interface SmoothlyToggleSwitch {
        "checkmark"?: boolean;
        "color"?: Color;
        "disabled"?: boolean;
        "fill"?: Fill;
        "onSmoothlyToggleSwitchChange"?: (event: SmoothlyToggleSwitchCustomEvent<boolean>) => void;
        "selected"?: boolean;
        "size"?: "tiny" | "small" | "default" | "large";
    }
    interface SmoothlyToggleSwitchDemo {
    }
    interface SmoothlyTrigger {
        "color"?: Color | undefined;
        "disabled"?: boolean;
        "fill"?: Fill;
        "name"?: string;
        "onTrigger"?: (event: SmoothlyTriggerCustomEvent<Trigger>) => void;
        "type"?: "link" | "button";
        "value"?: any;
    }
    interface SmoothlyTriggerSink {
        "context"?: Window;
        "destination"?: string;
        "filter"?: string;
    }
    interface SmoothlyTriggerSource {
        "listen"?: string;
        "onSmoothlyMessage"?: (event: SmoothlyTriggerSourceCustomEvent<Message<any>>) => void;
        "onTrigger"?: (event: SmoothlyTriggerSourceCustomEvent<Trigger>) => void;
    }
    interface IntrinsicElements {
        "smoothly-app": SmoothlyApp;
        "smoothly-app-demo": SmoothlyAppDemo;
        "smoothly-app-room": SmoothlyAppRoom;
        "smoothly-back-to-top": SmoothlyBackToTop;
        "smoothly-burger": SmoothlyBurger;
        "smoothly-button": SmoothlyButton;
        "smoothly-button-confirm": SmoothlyButtonConfirm;
        "smoothly-button-demo": SmoothlyButtonDemo;
        "smoothly-calendar": SmoothlyCalendar;
        "smoothly-checkbox": SmoothlyCheckbox;
        "smoothly-color": SmoothlyColor;
        "smoothly-country": SmoothlyCountry;
        "smoothly-dialog": SmoothlyDialog;
        "smoothly-dialog-demo": SmoothlyDialogDemo;
        "smoothly-display": SmoothlyDisplay;
        "smoothly-display-demo": SmoothlyDisplayDemo;
        "smoothly-display-demo-json": SmoothlyDisplayDemoJson;
        "smoothly-display-json": SmoothlyDisplayJson;
        "smoothly-display-json-object": SmoothlyDisplayJsonObject;
        "smoothly-display-json-primitive": SmoothlyDisplayJsonPrimitive;
        "smoothly-display-json-record-key": SmoothlyDisplayJsonRecordKey;
        "smoothly-filter": SmoothlyFilter;
        "smoothly-filter-field": SmoothlyFilterField;
        "smoothly-filter-input": SmoothlyFilterInput;
        "smoothly-filter-select": SmoothlyFilterSelect;
        "smoothly-filter-toggle": SmoothlyFilterToggle;
        "smoothly-form": SmoothlyForm;
        "smoothly-form-demo": SmoothlyFormDemo;
        "smoothly-form-demo-all": SmoothlyFormDemoAll;
        "smoothly-form-demo-card": SmoothlyFormDemoCard;
        "smoothly-form-demo-controlled": SmoothlyFormDemoControlled;
        "smoothly-form-demo-date": SmoothlyFormDemoDate;
        "smoothly-form-demo-date-range": SmoothlyFormDemoDateRange;
        "smoothly-form-demo-login": SmoothlyFormDemoLogin;
        "smoothly-form-demo-pet": SmoothlyFormDemoPet;
        "smoothly-form-demo-prices": SmoothlyFormDemoPrices;
        "smoothly-form-demo-schedule": SmoothlyFormDemoSchedule;
        "smoothly-form-demo-transparent": SmoothlyFormDemoTransparent;
        "smoothly-form-demo-typed": SmoothlyFormDemoTyped;
        "smoothly-frame": SmoothlyFrame;
        "smoothly-icon": SmoothlyIcon;
        "smoothly-icon-demo": SmoothlyIconDemo;
        "smoothly-input": SmoothlyInput;
        "smoothly-input-checkbox": SmoothlyInputCheckbox;
        "smoothly-input-checkbox-demo": SmoothlyInputCheckboxDemo;
        "smoothly-input-clear": SmoothlyInputClear;
        "smoothly-input-color": SmoothlyInputColor;
        "smoothly-input-color-demo": SmoothlyInputColorDemo;
        "smoothly-input-date": SmoothlyInputDate;
        "smoothly-input-date-range": SmoothlyInputDateRange;
        "smoothly-input-date-time": SmoothlyInputDateTime;
        "smoothly-input-demo": SmoothlyInputDemo;
        "smoothly-input-demo-standard": SmoothlyInputDemoStandard;
        "smoothly-input-edit": SmoothlyInputEdit;
        "smoothly-input-file": SmoothlyInputFile;
        "smoothly-input-month": SmoothlyInputMonth;
        "smoothly-input-price-demo": SmoothlyInputPriceDemo;
        "smoothly-input-radio": SmoothlyInputRadio;
        "smoothly-input-radio-item": SmoothlyInputRadioItem;
        "smoothly-input-range": SmoothlyInputRange;
        "smoothly-input-range-demo": SmoothlyInputRangeDemo;
        "smoothly-input-reset": SmoothlyInputReset;
        "smoothly-input-select": SmoothlyInputSelect;
        "smoothly-input-submit": SmoothlyInputSubmit;
        "smoothly-item": SmoothlyItem;
        "smoothly-label": SmoothlyLabel;
        "smoothly-lazy": SmoothlyLazy;
        "smoothly-load-more": SmoothlyLoadMore;
        "smoothly-modal": SmoothlyModal;
        "smoothly-notification": SmoothlyNotification;
        "smoothly-notifier": SmoothlyNotifier;
        "smoothly-spinner": SmoothlySpinner;
        "smoothly-submit": SmoothlySubmit;
        "smoothly-summary": SmoothlySummary;
        "smoothly-tab": SmoothlyTab;
        "smoothly-table": SmoothlyTable;
        "smoothly-table-body": SmoothlyTableBody;
        "smoothly-table-cell": SmoothlyTableCell;
        "smoothly-table-demo": SmoothlyTableDemo;
        "smoothly-table-demo-colspan": SmoothlyTableDemoColspan;
        "smoothly-table-demo-filler-row": SmoothlyTableDemoFillerRow;
        "smoothly-table-demo-filtered": SmoothlyTableDemoFiltered;
        "smoothly-table-demo-group": SmoothlyTableDemoGroup;
        "smoothly-table-demo-nested-no-cell": SmoothlyTableDemoNestedNoCell;
        "smoothly-table-demo-nested-no-cell-inner": SmoothlyTableDemoNestedNoCellInner;
        "smoothly-table-demo-simple": SmoothlyTableDemoSimple;
        "smoothly-table-expandable-cell": SmoothlyTableExpandableCell;
        "smoothly-table-expandable-row": SmoothlyTableExpandableRow;
        "smoothly-table-filler-row": SmoothlyTableFillerRow;
        "smoothly-table-foot": SmoothlyTableFoot;
        "smoothly-table-head": SmoothlyTableHead;
        "smoothly-table-row": SmoothlyTableRow;
        "smoothly-table-row-group": SmoothlyTableRowGroup;
        "smoothly-tabs": SmoothlyTabs;
        "smoothly-tabs-demo": SmoothlyTabsDemo;
        "smoothly-theme-color": SmoothlyThemeColor;
        "smoothly-theme-color-variant": SmoothlyThemeColorVariant;
        "smoothly-theme-colors": SmoothlyThemeColors;
        "smoothly-theme-demo": SmoothlyThemeDemo;
        "smoothly-theme-guide": SmoothlyThemeGuide;
        "smoothly-theme-picker": SmoothlyThemePicker;
        "smoothly-toggle-switch": SmoothlyToggleSwitch;
        "smoothly-toggle-switch-demo": SmoothlyToggleSwitchDemo;
        "smoothly-trigger": SmoothlyTrigger;
        "smoothly-trigger-sink": SmoothlyTriggerSink;
        "smoothly-trigger-source": SmoothlyTriggerSource;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "smoothly-app": LocalJSX.SmoothlyApp & JSXBase.HTMLAttributes<HTMLSmoothlyAppElement>;
            "smoothly-app-demo": LocalJSX.SmoothlyAppDemo & JSXBase.HTMLAttributes<HTMLSmoothlyAppDemoElement>;
            "smoothly-app-room": LocalJSX.SmoothlyAppRoom & JSXBase.HTMLAttributes<HTMLSmoothlyAppRoomElement>;
            "smoothly-back-to-top": LocalJSX.SmoothlyBackToTop & JSXBase.HTMLAttributes<HTMLSmoothlyBackToTopElement>;
            "smoothly-burger": LocalJSX.SmoothlyBurger & JSXBase.HTMLAttributes<HTMLSmoothlyBurgerElement>;
            "smoothly-button": LocalJSX.SmoothlyButton & JSXBase.HTMLAttributes<HTMLSmoothlyButtonElement>;
            "smoothly-button-confirm": LocalJSX.SmoothlyButtonConfirm & JSXBase.HTMLAttributes<HTMLSmoothlyButtonConfirmElement>;
            "smoothly-button-demo": LocalJSX.SmoothlyButtonDemo & JSXBase.HTMLAttributes<HTMLSmoothlyButtonDemoElement>;
            "smoothly-calendar": LocalJSX.SmoothlyCalendar & JSXBase.HTMLAttributes<HTMLSmoothlyCalendarElement>;
            "smoothly-checkbox": LocalJSX.SmoothlyCheckbox & JSXBase.HTMLAttributes<HTMLSmoothlyCheckboxElement>;
            "smoothly-color": LocalJSX.SmoothlyColor & JSXBase.HTMLAttributes<HTMLSmoothlyColorElement>;
            "smoothly-country": LocalJSX.SmoothlyCountry & JSXBase.HTMLAttributes<HTMLSmoothlyCountryElement>;
            "smoothly-dialog": LocalJSX.SmoothlyDialog & JSXBase.HTMLAttributes<HTMLSmoothlyDialogElement>;
            "smoothly-dialog-demo": LocalJSX.SmoothlyDialogDemo & JSXBase.HTMLAttributes<HTMLSmoothlyDialogDemoElement>;
            "smoothly-display": LocalJSX.SmoothlyDisplay & JSXBase.HTMLAttributes<HTMLSmoothlyDisplayElement>;
            "smoothly-display-demo": LocalJSX.SmoothlyDisplayDemo & JSXBase.HTMLAttributes<HTMLSmoothlyDisplayDemoElement>;
            "smoothly-display-demo-json": LocalJSX.SmoothlyDisplayDemoJson & JSXBase.HTMLAttributes<HTMLSmoothlyDisplayDemoJsonElement>;
            "smoothly-display-json": LocalJSX.SmoothlyDisplayJson & JSXBase.HTMLAttributes<HTMLSmoothlyDisplayJsonElement>;
            "smoothly-display-json-object": LocalJSX.SmoothlyDisplayJsonObject & JSXBase.HTMLAttributes<HTMLSmoothlyDisplayJsonObjectElement>;
            "smoothly-display-json-primitive": LocalJSX.SmoothlyDisplayJsonPrimitive & JSXBase.HTMLAttributes<HTMLSmoothlyDisplayJsonPrimitiveElement>;
            "smoothly-display-json-record-key": LocalJSX.SmoothlyDisplayJsonRecordKey & JSXBase.HTMLAttributes<HTMLSmoothlyDisplayJsonRecordKeyElement>;
            "smoothly-filter": LocalJSX.SmoothlyFilter & JSXBase.HTMLAttributes<HTMLSmoothlyFilterElement>;
            "smoothly-filter-field": LocalJSX.SmoothlyFilterField & JSXBase.HTMLAttributes<HTMLSmoothlyFilterFieldElement>;
            "smoothly-filter-input": LocalJSX.SmoothlyFilterInput & JSXBase.HTMLAttributes<HTMLSmoothlyFilterInputElement>;
            "smoothly-filter-select": LocalJSX.SmoothlyFilterSelect & JSXBase.HTMLAttributes<HTMLSmoothlyFilterSelectElement>;
            "smoothly-filter-toggle": LocalJSX.SmoothlyFilterToggle & JSXBase.HTMLAttributes<HTMLSmoothlyFilterToggleElement>;
            "smoothly-form": LocalJSX.SmoothlyForm & JSXBase.HTMLAttributes<HTMLSmoothlyFormElement>;
            "smoothly-form-demo": LocalJSX.SmoothlyFormDemo & JSXBase.HTMLAttributes<HTMLSmoothlyFormDemoElement>;
            "smoothly-form-demo-all": LocalJSX.SmoothlyFormDemoAll & JSXBase.HTMLAttributes<HTMLSmoothlyFormDemoAllElement>;
            "smoothly-form-demo-card": LocalJSX.SmoothlyFormDemoCard & JSXBase.HTMLAttributes<HTMLSmoothlyFormDemoCardElement>;
            "smoothly-form-demo-controlled": LocalJSX.SmoothlyFormDemoControlled & JSXBase.HTMLAttributes<HTMLSmoothlyFormDemoControlledElement>;
            "smoothly-form-demo-date": LocalJSX.SmoothlyFormDemoDate & JSXBase.HTMLAttributes<HTMLSmoothlyFormDemoDateElement>;
            "smoothly-form-demo-date-range": LocalJSX.SmoothlyFormDemoDateRange & JSXBase.HTMLAttributes<HTMLSmoothlyFormDemoDateRangeElement>;
            "smoothly-form-demo-login": LocalJSX.SmoothlyFormDemoLogin & JSXBase.HTMLAttributes<HTMLSmoothlyFormDemoLoginElement>;
            "smoothly-form-demo-pet": LocalJSX.SmoothlyFormDemoPet & JSXBase.HTMLAttributes<HTMLSmoothlyFormDemoPetElement>;
            "smoothly-form-demo-prices": LocalJSX.SmoothlyFormDemoPrices & JSXBase.HTMLAttributes<HTMLSmoothlyFormDemoPricesElement>;
            "smoothly-form-demo-schedule": LocalJSX.SmoothlyFormDemoSchedule & JSXBase.HTMLAttributes<HTMLSmoothlyFormDemoScheduleElement>;
            "smoothly-form-demo-transparent": LocalJSX.SmoothlyFormDemoTransparent & JSXBase.HTMLAttributes<HTMLSmoothlyFormDemoTransparentElement>;
            "smoothly-form-demo-typed": LocalJSX.SmoothlyFormDemoTyped & JSXBase.HTMLAttributes<HTMLSmoothlyFormDemoTypedElement>;
            "smoothly-frame": LocalJSX.SmoothlyFrame & JSXBase.HTMLAttributes<HTMLSmoothlyFrameElement>;
            "smoothly-icon": LocalJSX.SmoothlyIcon & JSXBase.HTMLAttributes<HTMLSmoothlyIconElement>;
            "smoothly-icon-demo": LocalJSX.SmoothlyIconDemo & JSXBase.HTMLAttributes<HTMLSmoothlyIconDemoElement>;
            "smoothly-input": LocalJSX.SmoothlyInput & JSXBase.HTMLAttributes<HTMLSmoothlyInputElement>;
            "smoothly-input-checkbox": LocalJSX.SmoothlyInputCheckbox & JSXBase.HTMLAttributes<HTMLSmoothlyInputCheckboxElement>;
            "smoothly-input-checkbox-demo": LocalJSX.SmoothlyInputCheckboxDemo & JSXBase.HTMLAttributes<HTMLSmoothlyInputCheckboxDemoElement>;
            "smoothly-input-clear": LocalJSX.SmoothlyInputClear & JSXBase.HTMLAttributes<HTMLSmoothlyInputClearElement>;
            "smoothly-input-color": LocalJSX.SmoothlyInputColor & JSXBase.HTMLAttributes<HTMLSmoothlyInputColorElement>;
            "smoothly-input-color-demo": LocalJSX.SmoothlyInputColorDemo & JSXBase.HTMLAttributes<HTMLSmoothlyInputColorDemoElement>;
            "smoothly-input-date": LocalJSX.SmoothlyInputDate & JSXBase.HTMLAttributes<HTMLSmoothlyInputDateElement>;
            "smoothly-input-date-range": LocalJSX.SmoothlyInputDateRange & JSXBase.HTMLAttributes<HTMLSmoothlyInputDateRangeElement>;
            "smoothly-input-date-time": LocalJSX.SmoothlyInputDateTime & JSXBase.HTMLAttributes<HTMLSmoothlyInputDateTimeElement>;
            "smoothly-input-demo": LocalJSX.SmoothlyInputDemo & JSXBase.HTMLAttributes<HTMLSmoothlyInputDemoElement>;
            "smoothly-input-demo-standard": LocalJSX.SmoothlyInputDemoStandard & JSXBase.HTMLAttributes<HTMLSmoothlyInputDemoStandardElement>;
            "smoothly-input-edit": LocalJSX.SmoothlyInputEdit & JSXBase.HTMLAttributes<HTMLSmoothlyInputEditElement>;
            "smoothly-input-file": LocalJSX.SmoothlyInputFile & JSXBase.HTMLAttributes<HTMLSmoothlyInputFileElement>;
            "smoothly-input-month": LocalJSX.SmoothlyInputMonth & JSXBase.HTMLAttributes<HTMLSmoothlyInputMonthElement>;
            "smoothly-input-price-demo": LocalJSX.SmoothlyInputPriceDemo & JSXBase.HTMLAttributes<HTMLSmoothlyInputPriceDemoElement>;
            "smoothly-input-radio": LocalJSX.SmoothlyInputRadio & JSXBase.HTMLAttributes<HTMLSmoothlyInputRadioElement>;
            "smoothly-input-radio-item": LocalJSX.SmoothlyInputRadioItem & JSXBase.HTMLAttributes<HTMLSmoothlyInputRadioItemElement>;
            "smoothly-input-range": LocalJSX.SmoothlyInputRange & JSXBase.HTMLAttributes<HTMLSmoothlyInputRangeElement>;
            "smoothly-input-range-demo": LocalJSX.SmoothlyInputRangeDemo & JSXBase.HTMLAttributes<HTMLSmoothlyInputRangeDemoElement>;
            "smoothly-input-reset": LocalJSX.SmoothlyInputReset & JSXBase.HTMLAttributes<HTMLSmoothlyInputResetElement>;
            "smoothly-input-select": LocalJSX.SmoothlyInputSelect & JSXBase.HTMLAttributes<HTMLSmoothlyInputSelectElement>;
            "smoothly-input-submit": LocalJSX.SmoothlyInputSubmit & JSXBase.HTMLAttributes<HTMLSmoothlyInputSubmitElement>;
            "smoothly-item": LocalJSX.SmoothlyItem & JSXBase.HTMLAttributes<HTMLSmoothlyItemElement>;
            "smoothly-label": LocalJSX.SmoothlyLabel & JSXBase.HTMLAttributes<HTMLSmoothlyLabelElement>;
            "smoothly-lazy": LocalJSX.SmoothlyLazy & JSXBase.HTMLAttributes<HTMLSmoothlyLazyElement>;
            "smoothly-load-more": LocalJSX.SmoothlyLoadMore & JSXBase.HTMLAttributes<HTMLSmoothlyLoadMoreElement>;
            "smoothly-modal": LocalJSX.SmoothlyModal & JSXBase.HTMLAttributes<HTMLSmoothlyModalElement>;
            "smoothly-notification": LocalJSX.SmoothlyNotification & JSXBase.HTMLAttributes<HTMLSmoothlyNotificationElement>;
            "smoothly-notifier": LocalJSX.SmoothlyNotifier & JSXBase.HTMLAttributes<HTMLSmoothlyNotifierElement>;
            "smoothly-spinner": LocalJSX.SmoothlySpinner & JSXBase.HTMLAttributes<HTMLSmoothlySpinnerElement>;
            "smoothly-submit": LocalJSX.SmoothlySubmit & JSXBase.HTMLAttributes<HTMLSmoothlySubmitElement>;
            "smoothly-summary": LocalJSX.SmoothlySummary & JSXBase.HTMLAttributes<HTMLSmoothlySummaryElement>;
            "smoothly-tab": LocalJSX.SmoothlyTab & JSXBase.HTMLAttributes<HTMLSmoothlyTabElement>;
            "smoothly-table": LocalJSX.SmoothlyTable & JSXBase.HTMLAttributes<HTMLSmoothlyTableElement>;
            "smoothly-table-body": LocalJSX.SmoothlyTableBody & JSXBase.HTMLAttributes<HTMLSmoothlyTableBodyElement>;
            "smoothly-table-cell": LocalJSX.SmoothlyTableCell & JSXBase.HTMLAttributes<HTMLSmoothlyTableCellElement>;
            "smoothly-table-demo": LocalJSX.SmoothlyTableDemo & JSXBase.HTMLAttributes<HTMLSmoothlyTableDemoElement>;
            "smoothly-table-demo-colspan": LocalJSX.SmoothlyTableDemoColspan & JSXBase.HTMLAttributes<HTMLSmoothlyTableDemoColspanElement>;
            "smoothly-table-demo-filler-row": LocalJSX.SmoothlyTableDemoFillerRow & JSXBase.HTMLAttributes<HTMLSmoothlyTableDemoFillerRowElement>;
            "smoothly-table-demo-filtered": LocalJSX.SmoothlyTableDemoFiltered & JSXBase.HTMLAttributes<HTMLSmoothlyTableDemoFilteredElement>;
            "smoothly-table-demo-group": LocalJSX.SmoothlyTableDemoGroup & JSXBase.HTMLAttributes<HTMLSmoothlyTableDemoGroupElement>;
            "smoothly-table-demo-nested-no-cell": LocalJSX.SmoothlyTableDemoNestedNoCell & JSXBase.HTMLAttributes<HTMLSmoothlyTableDemoNestedNoCellElement>;
            "smoothly-table-demo-nested-no-cell-inner": LocalJSX.SmoothlyTableDemoNestedNoCellInner & JSXBase.HTMLAttributes<HTMLSmoothlyTableDemoNestedNoCellInnerElement>;
            "smoothly-table-demo-simple": LocalJSX.SmoothlyTableDemoSimple & JSXBase.HTMLAttributes<HTMLSmoothlyTableDemoSimpleElement>;
            "smoothly-table-expandable-cell": LocalJSX.SmoothlyTableExpandableCell & JSXBase.HTMLAttributes<HTMLSmoothlyTableExpandableCellElement>;
            "smoothly-table-expandable-row": LocalJSX.SmoothlyTableExpandableRow & JSXBase.HTMLAttributes<HTMLSmoothlyTableExpandableRowElement>;
            "smoothly-table-filler-row": LocalJSX.SmoothlyTableFillerRow & JSXBase.HTMLAttributes<HTMLSmoothlyTableFillerRowElement>;
            "smoothly-table-foot": LocalJSX.SmoothlyTableFoot & JSXBase.HTMLAttributes<HTMLSmoothlyTableFootElement>;
            "smoothly-table-head": LocalJSX.SmoothlyTableHead & JSXBase.HTMLAttributes<HTMLSmoothlyTableHeadElement>;
            "smoothly-table-row": LocalJSX.SmoothlyTableRow & JSXBase.HTMLAttributes<HTMLSmoothlyTableRowElement>;
            "smoothly-table-row-group": LocalJSX.SmoothlyTableRowGroup & JSXBase.HTMLAttributes<HTMLSmoothlyTableRowGroupElement>;
            "smoothly-tabs": LocalJSX.SmoothlyTabs & JSXBase.HTMLAttributes<HTMLSmoothlyTabsElement>;
            "smoothly-tabs-demo": LocalJSX.SmoothlyTabsDemo & JSXBase.HTMLAttributes<HTMLSmoothlyTabsDemoElement>;
            "smoothly-theme-color": LocalJSX.SmoothlyThemeColor & JSXBase.HTMLAttributes<HTMLSmoothlyThemeColorElement>;
            "smoothly-theme-color-variant": LocalJSX.SmoothlyThemeColorVariant & JSXBase.HTMLAttributes<HTMLSmoothlyThemeColorVariantElement>;
            "smoothly-theme-colors": LocalJSX.SmoothlyThemeColors & JSXBase.HTMLAttributes<HTMLSmoothlyThemeColorsElement>;
            "smoothly-theme-demo": LocalJSX.SmoothlyThemeDemo & JSXBase.HTMLAttributes<HTMLSmoothlyThemeDemoElement>;
            "smoothly-theme-guide": LocalJSX.SmoothlyThemeGuide & JSXBase.HTMLAttributes<HTMLSmoothlyThemeGuideElement>;
            "smoothly-theme-picker": LocalJSX.SmoothlyThemePicker & JSXBase.HTMLAttributes<HTMLSmoothlyThemePickerElement>;
            "smoothly-toggle-switch": LocalJSX.SmoothlyToggleSwitch & JSXBase.HTMLAttributes<HTMLSmoothlyToggleSwitchElement>;
            "smoothly-toggle-switch-demo": LocalJSX.SmoothlyToggleSwitchDemo & JSXBase.HTMLAttributes<HTMLSmoothlyToggleSwitchDemoElement>;
            "smoothly-trigger": LocalJSX.SmoothlyTrigger & JSXBase.HTMLAttributes<HTMLSmoothlyTriggerElement>;
            "smoothly-trigger-sink": LocalJSX.SmoothlyTriggerSink & JSXBase.HTMLAttributes<HTMLSmoothlyTriggerSinkElement>;
            "smoothly-trigger-source": LocalJSX.SmoothlyTriggerSource & JSXBase.HTMLAttributes<HTMLSmoothlyTriggerSourceElement>;
        }
    }
}
