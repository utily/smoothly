/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Color, Data, Fill, Icon, Message, Notice, Option, Submit, Trigger } from "./model";
import { FunctionalComponent, VNode } from "@stencil/core";
import { Button } from "./components/button/Button";
import { CountryCode, Currency, Date, DateRange, DateTime, isoly } from "isoly";
import { tidily, Type } from "tidily";
import { selectively } from "selectively";
import { Filter } from "./components/filter/Filter";
import { Looks } from "./components/input/Looks";
import { Editable } from "./components/input/Editable";
import { Selectable } from "./components/input/radio/Selected";
import { Controls } from "./components/picker/menu";
import { Controls as Controls1 } from "./components/picker/menu/index";
import { Slot } from "./components/picker/slot-elements/index";
export { Color, Data, Fill, Icon, Message, Notice, Option, Submit, Trigger } from "./model";
export { FunctionalComponent, VNode } from "@stencil/core";
export { Button } from "./components/button/Button";
export { CountryCode, Currency, Date, DateRange, DateTime, isoly } from "isoly";
export { tidily, Type } from "tidily";
export { selectively } from "selectively";
export { Filter } from "./components/filter/Filter";
export { Looks } from "./components/input/Looks";
export { Editable } from "./components/input/Editable";
export { Selectable } from "./components/input/radio/Selected";
export { Controls } from "./components/picker/menu";
export { Controls as Controls1 } from "./components/picker/menu/index";
export { Slot } from "./components/picker/slot-elements/index";
export namespace Components {
    interface SmoothlyApp {
        "color": Color;
        "home"?: string;
        "label": string;
        "menuOpen": boolean;
        "selectRoom": (path: string) => Promise<void>;
    }
    interface SmoothlyAppDemo {
        "baseUrl": string;
    }
    interface SmoothlyAppRoom {
        "content"?: VNode | FunctionalComponent;
        "disabled": boolean;
        "getContent": () => Promise<HTMLElement | undefined>;
        "icon"?: Icon;
        "label"?: string;
        "path": string | URLPattern;
        "selected"?: boolean;
        "setSelected": (selected: boolean, options?: { history?: boolean; }) => Promise<void>;
    }
    interface SmoothlyBackToTop {
        "bottom": string;
        "opacity": string;
        "right": string;
    }
    interface SmoothlyBurger {
        "mediaQuery": string;
        "open": boolean;
        "visible": boolean;
    }
    interface SmoothlyButton {
        "color"?: Color;
        "disabled": boolean;
        "expand"?: "block" | "full";
        "fill"?: Fill;
        "link"?: string;
        "shape"?: "rounded";
        "size": "small" | "large" | "icon" | "flexible";
        "type": Button.Properties["type"];
    }
    interface SmoothlyButtonConfirm {
        "color"?: Color;
        "disabled": boolean;
        "doubleClickTime": number;
        "expand"?: "block" | "full";
        "fill"?: Fill;
        "name": string;
        "shape"?: "rounded";
        "size": "small" | "large" | "icon" | "flexible";
        "type": "link" | "button";
    }
    interface SmoothlyButtonDemo {
    }
    interface SmoothlyCalendar {
        "doubleInput": boolean;
        "end"?: Date;
        "max": Date;
        "min": Date;
        "month"?: Date;
        "start"?: Date;
        "value": Date;
    }
    interface SmoothlyCheckbox {
        "checked": boolean;
        "clear": () => Promise<void>;
        "disabled": boolean;
        "intermediate": boolean;
        "name": string;
        "size": "tiny" | "small" | "medium" | "large";
        "toggle": () => Promise<void>;
        "unavailable": boolean;
        "value": any;
    }
    interface SmoothlyColor {
        "color"?: Color;
    }
    interface SmoothlyCountry {
        "text": "alpha2" | "name" | "none";
        "value": CountryCode.Alpha2;
    }
    interface SmoothlyDialog {
        "closable": boolean;
        "color": Color | undefined;
        "header": string | undefined;
        "open": boolean;
    }
    interface SmoothlyDialogDemo {
    }
    interface SmoothlyDisplay {
        "country"?: CountryCode.Alpha2;
        "currency"?: Currency;
        "format"?: DateTime.Format;
        "label"?: string;
        "type": Type | "json";
        "value"?: any;
    }
    interface SmoothlyDisplayAmount {
        "amount": number | string;
        "currency": isoly.Currency;
        "toInteger": boolean;
    }
    interface SmoothlyDisplayDemo {
    }
    interface SmoothlyDisplayJson {
        "value": any;
    }
    interface SmoothlyDisplayJsonArray {
        "open": boolean;
        "value": any[];
    }
    interface SmoothlyDisplayJsonPrimitive {
        "value": any;
    }
    interface SmoothlyDisplayJsonRecord {
        "open": boolean;
        "value": Record<string, any>;
    }
    interface SmoothlyDisplayJsonRecordKey {
        "value": any;
    }
    interface SmoothlyFilter {
    }
    interface SmoothlyFilterField {
        "clear": () => Promise<void>;
        "criteria": selectively.Criteria;
    }
    interface SmoothlyFilterInput {
        "label": string;
        "placeholder": string;
        "property": string;
    }
    interface SmoothlyFilterSelect {
        "label": string;
        "looks": Looks;
        "multiple": boolean;
        "property": string;
        "type": "array" | "string";
    }
    interface SmoothlyFilterToggle {
        "active": boolean;
        "flip": boolean;
        "icon": Icon;
        "not": boolean;
        "properties": Record<string, string>;
        "toolTip": string;
    }
    interface SmoothlyForm {
        "action"?: string;
        "changed": boolean;
        "clear": () => Promise<void>;
        "color"?: Color;
        "edit": (editable: boolean) => Promise<void>;
        "listen": (property: "changed", listener: (parent: Editable) => Promise<void>) => Promise<void>;
        "looks": Looks;
        "name"?: string;
        "prevent": boolean;
        "readonly": boolean;
        "reset": () => Promise<void>;
        "setInitialValue": () => Promise<void>;
        "submit": (remove?: boolean) => Promise<void>;
        "type"?: "update" | "change" | "fetch" | "create";
        "value": Readonly<Data>;
    }
    interface SmoothlyFrame {
        "name": string;
        "origin": string | undefined;
        "send": (message2: string | Message<any>, content?: Trigger | any) => Promise<void>;
        "url": string;
    }
    interface SmoothlyIcon {
        "color": Color;
        "fill": Fill;
        "flip"?: "x" | "y";
        "name": Icon | "empty";
        "rotate"?: number;
        "size": "tiny" | "small" | "medium" | "large";
        "toolTip"?: string;
    }
    interface SmoothlyIconDemo {
    }
    interface SmoothlyInput {
        "autocomplete": boolean;
        "changed": boolean;
        "clear": () => Promise<void>;
        "color"?: Color;
        "currency"?: isoly.Currency;
        "delay": number;
        "disabled": boolean;
        "edit": (editable: boolean) => Promise<void>;
        "getFormData": (name: string) => Promise<Record<string, any>>;
        "listen": (property: "changed", listener: (parent: Editable) => Promise<void>) => Promise<void>;
        "looks": Looks;
        "name": string;
        "placeholder": string | undefined;
        "readonly": boolean;
        "required": boolean;
        "reset": () => Promise<void>;
        "setInitialValue": () => Promise<void>;
        "setKeepFocusOnReRender": (keepFocus: boolean) => Promise<void>;
        "setSelectionRange": (start: number, end: number, direction?: tidily.Direction) => Promise<void>;
        "showLabel": boolean;
        "type": tidily.Type;
        "value": any;
    }
    interface SmoothlyInputCheckbox {
        "changed": boolean;
        "checked": boolean;
        "clear": () => Promise<void>;
        "disabled": boolean;
        "edit": (editable: boolean) => Promise<void>;
        "listen": (property: "changed", listener: (parent: Editable) => Promise<void>) => Promise<void>;
        "looks": Looks;
        "name": string;
        "readonly": boolean;
        "reset": () => Promise<void>;
        "setInitialValue": () => Promise<void>;
        "value": boolean;
    }
    interface SmoothlyInputClear {
        "color"?: Color;
        "disabled": boolean;
        "display": boolean;
        "expand"?: "block" | "full";
        "fill"?: Fill;
        "shape"?: "rounded";
        "size": "small" | "large" | "icon" | "flexible";
        "type": "form" | "input";
    }
    interface SmoothlyInputColor {
        "clear": () => Promise<void>;
        "looks": Looks;
        "name": string;
        "value": string | undefined;
    }
    interface SmoothlyInputDate {
        "clear": () => Promise<void>;
        "color"?: Color;
        "disabled": boolean;
        "looks": Looks;
        "max": Date;
        "min": Date;
        "name": string;
        "open": boolean;
        "showLabel": boolean;
        "value"?: Date;
    }
    interface SmoothlyInputDateRange {
        "changed": boolean;
        "clear": () => Promise<void>;
        "color"?: Color;
        "edit": (editable: boolean) => Promise<void>;
        "end": isoly.Date | undefined;
        "listen": (property: "changed", listener: (parent: Editable) => Promise<void>) => Promise<void>;
        "looks": Looks;
        "max"?: isoly.Date;
        "min"?: isoly.Date;
        "name": string;
        "placeholder": string;
        "readonly": boolean;
        "reset": () => Promise<void>;
        "setInitialValue": () => Promise<void>;
        "showLabel": boolean;
        "start": isoly.Date | undefined;
    }
    interface SmoothlyInputDemo {
    }
    interface SmoothlyInputDemoControlledForm {
    }
    interface SmoothlyInputEdit {
        "color"?: Color;
        "disabled": boolean;
        "display": boolean;
        "expand"?: "block" | "full";
        "fill"?: Fill;
        "shape"?: "rounded";
        "size": "flexible" | "small" | "large" | "icon";
        "toolTip": string;
        "type": "link" | "button";
    }
    interface SmoothlyInputFile {
        "accept"?: string;
        "binary": () => Promise<boolean>;
        "camera": "front" | "back";
        "changed": boolean;
        "clear": () => Promise<void>;
        "color"?: Color;
        "edit": (editable: boolean) => Promise<void>;
        "listen": (property: "changed", listener: (parent: Editable) => Promise<void>) => Promise<void>;
        "looks": Looks;
        "name": string;
        "placeholder": string | undefined;
        "readonly": boolean;
        "reset": () => Promise<void>;
        "setInitialValue": () => Promise<void>;
        "showLabel": boolean;
        "value"?: File;
    }
    interface SmoothlyInputMonth {
        "clear": () => Promise<void>;
        "color"?: Color;
        "edit": (editable: boolean) => Promise<void>;
        "inCalendar": boolean;
        "listen": (property: "changed", listener: (parent: Editable) => Promise<void>) => Promise<void>;
        "looks": Looks;
        "name": string;
        "next": boolean;
        "previous": boolean;
        "readonly": boolean;
        "reset": () => Promise<void>;
        "setInitialValue": () => Promise<void>;
        "value"?: isoly.Date;
    }
    interface SmoothlyInputRadio {
        "changed": boolean;
        "clear": () => Promise<void>;
        "clearable"?: boolean;
        "edit": (editable: boolean) => Promise<void>;
        "listen": (property: "changed", listener: (parent: Editable) => Promise<void>) => Promise<void>;
        "looks": Looks;
        "name": string;
        "readonly": boolean;
        "reset": () => Promise<void>;
        "setInitialValue": () => Promise<void>;
        "value": any;
    }
    interface SmoothlyInputRadioItem {
        "looks": Looks;
        "name": string;
        "selected": boolean;
        "value": any;
    }
    interface SmoothlyInputRange {
        "changed": boolean;
        "clear": () => Promise<void>;
        "edit": (editable: boolean) => Promise<void>;
        "labelText"?: string;
        "listen": (property: "changed", listener: (parent: Editable) => Promise<void>) => Promise<void>;
        "looks": Looks;
        "max": number;
        "min": number;
        "name": string;
        "outputSide": "right" | "left";
        "readonly": boolean;
        "reset": () => Promise<void>;
        "setInitialValue": () => Promise<void>;
        "step": number | "any";
        "value": number | undefined;
    }
    interface SmoothlyInputReset {
        "color"?: Color;
        "disabled": boolean;
        "display": boolean;
        "expand"?: "block" | "full";
        "fill"?: Fill;
        "shape"?: "rounded";
        "size": "small" | "large" | "icon" | "flexible";
        "tooltip": string;
        "type": "form" | "input";
    }
    interface SmoothlyInputSelect {
        "changed": boolean;
        "clear": () => Promise<void>;
        "clearable": boolean;
        "color"?: Color;
        "defined": boolean;
        "edit": (editable: boolean) => Promise<void>;
        "getItems": () => Promise<HTMLSmoothlyItemElement[]>;
        "inCalendar": boolean;
        "listen": (property: "changed", listener: (parent: Editable) => Promise<void>) => Promise<void>;
        "looks": Looks;
        "menuHeight"?: `${number}${"items" | "rem" | "px" | "vh"}`;
        "multiple": boolean;
        "name": string;
        "placeholder"?: string | any;
        "readonly": boolean;
        "required": boolean;
        "reset": () => Promise<void>;
        "searchDisabled": boolean;
        "setInitialValue": () => Promise<void>;
        "showSelected"?: boolean;
    }
    interface SmoothlyInputSubmit {
        "color"?: Color;
        "delete": boolean;
        "disabled": boolean;
        "display": boolean;
        "expand"?: "block" | "full";
        "fill"?: Fill;
        "shape"?: "rounded";
        "size": "flexible" | "small" | "large" | "icon";
        "toolTip": string;
        "type": "link" | "button";
    }
    interface SmoothlyItem {
        "deselectable": boolean;
        "filter": (filter: string) => Promise<void>;
        "marked": boolean;
        "selectable": boolean;
        "selected": boolean;
        "value": any;
    }
    interface SmoothlyLabel {
        "description": string;
        "hue": number;
        "shape": "rectangle" | "rounded";
    }
    interface SmoothlyLazy {
        "content"?: VNode | FunctionalComponent;
        "show": boolean;
    }
    interface SmoothlyLoadMore {
        "multiple": boolean;
        "name": string;
        "offset": string;
    }
    interface SmoothlyNextDemo {
    }
    interface SmoothlyNextDemoColspan {
    }
    interface SmoothlyNextDemoGroup {
    }
    interface SmoothlyNextDemoNested {
    }
    interface SmoothlyNextDemoNestedInner {
        "data"?: {
		id: number
		name: string
		age: number
		balance: number
	}[];
    }
    interface SmoothlyNextDemoSimple {
    }
    interface SmoothlyNextTable {
        "columns": number;
    }
    interface SmoothlyNextTableBody {
    }
    interface SmoothlyNextTableCell {
        "span": number;
    }
    interface SmoothlyNextTableDemoFiltered {
    }
    interface SmoothlyNextTableExpandableCell {
        "close": () => Promise<void>;
        "open": boolean;
        "span": number;
    }
    interface SmoothlyNextTableExpandableRow {
        "open": boolean;
    }
    interface SmoothlyNextTableFoot {
    }
    interface SmoothlyNextTableHead {
    }
    interface SmoothlyNextTableRow {
    }
    interface SmoothlyNextTableRowGroup {
        "align": boolean;
        "open": boolean;
    }
    interface SmoothlyNotification {
        "closable": boolean;
        "icon": boolean;
        "notice": Notice;
    }
    interface SmoothlyNotifier {
        "icon": boolean;
    }
    interface SmoothlyPicker {
        "changed": boolean;
        "clear": () => Promise<void>;
        "edit": (editable: boolean) => Promise<void>;
        "listen": (property: "changed", listener: (parent: Editable) => Promise<void>) => Promise<void>;
        "looks": Looks;
        "multiple": boolean;
        "mutable": boolean;
        "name": string;
        "open": boolean;
        "readonly": boolean;
        "reset": () => Promise<void>;
        "setInitialValue": () => Promise<void>;
        "validator"?: (value: string) => boolean | { result: boolean; notice: Notice };
    }
    interface SmoothlyPickerDemo {
    }
    interface SmoothlyPickerMenu {
        "looks": Looks;
        "multiple": boolean;
        "mutable": boolean;
        "open": boolean;
        "readonly": boolean;
        "validator"?: (value: string) => boolean | { result: boolean; notice: Notice };
    }
    interface SmoothlyPickerOption {
        "clickHandler": () => Promise<void>;
        "position": number;
        "required": boolean;
        "search": string[];
        "selected": boolean;
        "value": any;
        "visible": boolean;
    }
    interface SmoothlySlotElements {
        "clone": boolean;
        "nodes"?: Node | Node[];
    }
    interface SmoothlySlottedElements {
        "clone": boolean;
    }
    interface SmoothlySpinner {
        "overlay": boolean;
        "size": "small" | "icon" | "medium" | "large";
    }
    interface SmoothlySubmit {
        "color"?: Color;
        "disabled": boolean;
        "expand"?: "block" | "full";
        "fill"?: Fill;
        "prevent": boolean;
        "shape"?: "rounded";
        "size": "flexible" | "small" | "large" | "icon";
        "type": "link" | "button";
    }
    interface SmoothlySummary {
        "color": Color;
        "fill": Fill;
        "open": boolean;
        "size": "tiny" | "small" | "medium" | "large";
    }
    interface SmoothlyTab {
        "label": string;
        "open": boolean;
    }
    interface SmoothlyTable {
        "align": "middle" | "bottom" | "top";
        "color"?: Color;
        "open": boolean;
        "root": boolean;
    }
    interface SmoothlyTableCell {
    }
    interface SmoothlyTableDemo {
    }
    interface SmoothlyTableDemoFiltered {
    }
    interface SmoothlyTableExpandableCell {
        "open": boolean;
    }
    interface SmoothlyTableExpandableRow {
        "open": boolean;
    }
    interface SmoothlyTableFooter {
    }
    interface SmoothlyTableHeader {
        "name": string;
    }
    interface SmoothlyTableRow {
        "open": boolean;
    }
    interface SmoothlyTableTesting {
    }
    interface SmoothlyTabs {
    }
    interface SmoothlyTabsDemo {
    }
    interface SmoothlyThemeColor {
        "color": Color;
    }
    interface SmoothlyThemeColorVariant {
        "color": Color;
        "variant": "shade" | "tint" | "color";
    }
    interface SmoothlyThemeColors {
    }
    interface SmoothlyThemeDemo {
    }
    interface SmoothlyThemeGuide {
    }
    interface SmoothlyThemePicker {
        "element": string;
    }
    interface SmoothlyToggle {
        "disabled": boolean;
        "name": string;
        "selected": boolean;
        "shape": "rounded";
        "value"?: any;
    }
    interface SmoothlyToggleSwitch {
        "checkmark": boolean;
        "color": Color;
        "disabled": boolean;
        "fill": Fill;
        "selected": boolean;
        "size": "small" | "default" | "large";
    }
    interface SmoothlyTrigger {
        "color": Color | undefined;
        "disabled": boolean;
        "fill": Fill;
        "name": string;
        "type": "link" | "button";
        "value"?: any;
    }
    interface SmoothlyTriggerSink {
        "context"?: Window;
        "destination": string;
        "filter"?: string;
    }
    interface SmoothlyTriggerSource {
        "listen": string;
    }
}
export interface SmoothlyAppRoomCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyAppRoomElement;
}
export interface SmoothlyBurgerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyBurgerElement;
}
export interface SmoothlyButtonConfirmCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyButtonConfirmElement;
}
export interface SmoothlyCalendarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyCalendarElement;
}
export interface SmoothlyCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyCheckboxElement;
}
export interface SmoothlyDisplayDemoCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyDisplayDemoElement;
}
export interface SmoothlyFilterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyFilterElement;
}
export interface SmoothlyFilterFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyFilterFieldElement;
}
export interface SmoothlyFilterInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyFilterInputElement;
}
export interface SmoothlyFilterSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyFilterSelectElement;
}
export interface SmoothlyFilterToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyFilterToggleElement;
}
export interface SmoothlyFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyFormElement;
}
export interface SmoothlyFrameCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyFrameElement;
}
export interface SmoothlyInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputElement;
}
export interface SmoothlyInputCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputCheckboxElement;
}
export interface SmoothlyInputClearCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputClearElement;
}
export interface SmoothlyInputColorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputColorElement;
}
export interface SmoothlyInputDateCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputDateElement;
}
export interface SmoothlyInputDateRangeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputDateRangeElement;
}
export interface SmoothlyInputEditCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputEditElement;
}
export interface SmoothlyInputFileCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputFileElement;
}
export interface SmoothlyInputMonthCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputMonthElement;
}
export interface SmoothlyInputRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputRadioElement;
}
export interface SmoothlyInputRadioItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputRadioItemElement;
}
export interface SmoothlyInputRangeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputRangeElement;
}
export interface SmoothlyInputResetCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputResetElement;
}
export interface SmoothlyInputSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputSelectElement;
}
export interface SmoothlyInputSubmitCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputSubmitElement;
}
export interface SmoothlyItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyItemElement;
}
export interface SmoothlyLoadMoreCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyLoadMoreElement;
}
export interface SmoothlyNextTableExpandableCellCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyNextTableExpandableCellElement;
}
export interface SmoothlyNotificationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyNotificationElement;
}
export interface SmoothlyPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyPickerElement;
}
export interface SmoothlyPickerMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyPickerMenuElement;
}
export interface SmoothlyPickerOptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyPickerOptionElement;
}
export interface SmoothlySlotElementsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlySlotElementsElement;
}
export interface SmoothlySlottedElementsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlySlottedElementsElement;
}
export interface SmoothlySubmitCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlySubmitElement;
}
export interface SmoothlySummaryCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlySummaryElement;
}
export interface SmoothlyTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyTabElement;
}
export interface SmoothlyTableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyTableElement;
}
export interface SmoothlyTableExpandableCellCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyTableExpandableCellElement;
}
export interface SmoothlyTableExpandableRowCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyTableExpandableRowElement;
}
export interface SmoothlyTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyTabsElement;
}
export interface SmoothlyToggleSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyToggleSwitchElement;
}
export interface SmoothlyTriggerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyTriggerElement;
}
export interface SmoothlyTriggerSourceCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyTriggerSourceElement;
}
declare global {
    interface HTMLSmoothlyAppElement extends Components.SmoothlyApp, HTMLStencilElement {
    }
    var HTMLSmoothlyAppElement: {
        prototype: HTMLSmoothlyAppElement;
        new (): HTMLSmoothlyAppElement;
    };
    interface HTMLSmoothlyAppDemoElement extends Components.SmoothlyAppDemo, HTMLStencilElement {
    }
    var HTMLSmoothlyAppDemoElement: {
        prototype: HTMLSmoothlyAppDemoElement;
        new (): HTMLSmoothlyAppDemoElement;
    };
    interface HTMLSmoothlyAppRoomElementEventMap {
        "smoothlyRoomSelected": { history: boolean };
        "smoothlyRoomLoaded": { selected: boolean };
    }
    interface HTMLSmoothlyAppRoomElement extends Components.SmoothlyAppRoom, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyAppRoomElementEventMap>(type: K, listener: (this: HTMLSmoothlyAppRoomElement, ev: SmoothlyAppRoomCustomEvent<HTMLSmoothlyAppRoomElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyAppRoomElementEventMap>(type: K, listener: (this: HTMLSmoothlyAppRoomElement, ev: SmoothlyAppRoomCustomEvent<HTMLSmoothlyAppRoomElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyAppRoomElement: {
        prototype: HTMLSmoothlyAppRoomElement;
        new (): HTMLSmoothlyAppRoomElement;
    };
    interface HTMLSmoothlyBackToTopElement extends Components.SmoothlyBackToTop, HTMLStencilElement {
    }
    var HTMLSmoothlyBackToTopElement: {
        prototype: HTMLSmoothlyBackToTopElement;
        new (): HTMLSmoothlyBackToTopElement;
    };
    interface HTMLSmoothlyBurgerElementEventMap {
        "smoothlyNavStatus": boolean;
        "smoothlyVisibleStatus": boolean;
    }
    interface HTMLSmoothlyBurgerElement extends Components.SmoothlyBurger, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyBurgerElementEventMap>(type: K, listener: (this: HTMLSmoothlyBurgerElement, ev: SmoothlyBurgerCustomEvent<HTMLSmoothlyBurgerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyBurgerElementEventMap>(type: K, listener: (this: HTMLSmoothlyBurgerElement, ev: SmoothlyBurgerCustomEvent<HTMLSmoothlyBurgerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyBurgerElement: {
        prototype: HTMLSmoothlyBurgerElement;
        new (): HTMLSmoothlyBurgerElement;
    };
    interface HTMLSmoothlyButtonElement extends Components.SmoothlyButton, HTMLStencilElement {
    }
    var HTMLSmoothlyButtonElement: {
        prototype: HTMLSmoothlyButtonElement;
        new (): HTMLSmoothlyButtonElement;
    };
    interface HTMLSmoothlyButtonConfirmElementEventMap {
        "smoothlyInputLoad": (parent: HTMLElement) => void;
        "smoothlyConfirm": Data;
    }
    interface HTMLSmoothlyButtonConfirmElement extends Components.SmoothlyButtonConfirm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyButtonConfirmElementEventMap>(type: K, listener: (this: HTMLSmoothlyButtonConfirmElement, ev: SmoothlyButtonConfirmCustomEvent<HTMLSmoothlyButtonConfirmElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyButtonConfirmElementEventMap>(type: K, listener: (this: HTMLSmoothlyButtonConfirmElement, ev: SmoothlyButtonConfirmCustomEvent<HTMLSmoothlyButtonConfirmElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyButtonConfirmElement: {
        prototype: HTMLSmoothlyButtonConfirmElement;
        new (): HTMLSmoothlyButtonConfirmElement;
    };
    interface HTMLSmoothlyButtonDemoElement extends Components.SmoothlyButtonDemo, HTMLStencilElement {
    }
    var HTMLSmoothlyButtonDemoElement: {
        prototype: HTMLSmoothlyButtonDemoElement;
        new (): HTMLSmoothlyButtonDemoElement;
    };
    interface HTMLSmoothlyCalendarElementEventMap {
        "smoothlyValueChange": Date;
        "smoothlyStartChange": Date;
        "smoothlyEndChange": Date;
        "smoothlyDateSet": Date;
        "smoothlyDateRangeSet": DateRange;
    }
    interface HTMLSmoothlyCalendarElement extends Components.SmoothlyCalendar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyCalendarElementEventMap>(type: K, listener: (this: HTMLSmoothlyCalendarElement, ev: SmoothlyCalendarCustomEvent<HTMLSmoothlyCalendarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyCalendarElementEventMap>(type: K, listener: (this: HTMLSmoothlyCalendarElement, ev: SmoothlyCalendarCustomEvent<HTMLSmoothlyCalendarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyCalendarElement: {
        prototype: HTMLSmoothlyCalendarElement;
        new (): HTMLSmoothlyCalendarElement;
    };
    interface HTMLSmoothlyCheckboxElementEventMap {
        "smoothlyInput": Record<string, any>;
    }
    interface HTMLSmoothlyCheckboxElement extends Components.SmoothlyCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyCheckboxElementEventMap>(type: K, listener: (this: HTMLSmoothlyCheckboxElement, ev: SmoothlyCheckboxCustomEvent<HTMLSmoothlyCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyCheckboxElementEventMap>(type: K, listener: (this: HTMLSmoothlyCheckboxElement, ev: SmoothlyCheckboxCustomEvent<HTMLSmoothlyCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyCheckboxElement: {
        prototype: HTMLSmoothlyCheckboxElement;
        new (): HTMLSmoothlyCheckboxElement;
    };
    interface HTMLSmoothlyColorElement extends Components.SmoothlyColor, HTMLStencilElement {
    }
    var HTMLSmoothlyColorElement: {
        prototype: HTMLSmoothlyColorElement;
        new (): HTMLSmoothlyColorElement;
    };
    interface HTMLSmoothlyCountryElement extends Components.SmoothlyCountry, HTMLStencilElement {
    }
    var HTMLSmoothlyCountryElement: {
        prototype: HTMLSmoothlyCountryElement;
        new (): HTMLSmoothlyCountryElement;
    };
    interface HTMLSmoothlyDialogElement extends Components.SmoothlyDialog, HTMLStencilElement {
    }
    var HTMLSmoothlyDialogElement: {
        prototype: HTMLSmoothlyDialogElement;
        new (): HTMLSmoothlyDialogElement;
    };
    interface HTMLSmoothlyDialogDemoElement extends Components.SmoothlyDialogDemo, HTMLStencilElement {
    }
    var HTMLSmoothlyDialogDemoElement: {
        prototype: HTMLSmoothlyDialogDemoElement;
        new (): HTMLSmoothlyDialogDemoElement;
    };
    interface HTMLSmoothlyDisplayElement extends Components.SmoothlyDisplay, HTMLStencilElement {
    }
    var HTMLSmoothlyDisplayElement: {
        prototype: HTMLSmoothlyDisplayElement;
        new (): HTMLSmoothlyDisplayElement;
    };
    interface HTMLSmoothlyDisplayAmountElement extends Components.SmoothlyDisplayAmount, HTMLStencilElement {
    }
    var HTMLSmoothlyDisplayAmountElement: {
        prototype: HTMLSmoothlyDisplayAmountElement;
        new (): HTMLSmoothlyDisplayAmountElement;
    };
    interface HTMLSmoothlyDisplayDemoElementEventMap {
        "notice": Notice;
    }
    interface HTMLSmoothlyDisplayDemoElement extends Components.SmoothlyDisplayDemo, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyDisplayDemoElementEventMap>(type: K, listener: (this: HTMLSmoothlyDisplayDemoElement, ev: SmoothlyDisplayDemoCustomEvent<HTMLSmoothlyDisplayDemoElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyDisplayDemoElementEventMap>(type: K, listener: (this: HTMLSmoothlyDisplayDemoElement, ev: SmoothlyDisplayDemoCustomEvent<HTMLSmoothlyDisplayDemoElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyDisplayDemoElement: {
        prototype: HTMLSmoothlyDisplayDemoElement;
        new (): HTMLSmoothlyDisplayDemoElement;
    };
    interface HTMLSmoothlyDisplayJsonElement extends Components.SmoothlyDisplayJson, HTMLStencilElement {
    }
    var HTMLSmoothlyDisplayJsonElement: {
        prototype: HTMLSmoothlyDisplayJsonElement;
        new (): HTMLSmoothlyDisplayJsonElement;
    };
    interface HTMLSmoothlyDisplayJsonArrayElement extends Components.SmoothlyDisplayJsonArray, HTMLStencilElement {
    }
    var HTMLSmoothlyDisplayJsonArrayElement: {
        prototype: HTMLSmoothlyDisplayJsonArrayElement;
        new (): HTMLSmoothlyDisplayJsonArrayElement;
    };
    interface HTMLSmoothlyDisplayJsonPrimitiveElement extends Components.SmoothlyDisplayJsonPrimitive, HTMLStencilElement {
    }
    var HTMLSmoothlyDisplayJsonPrimitiveElement: {
        prototype: HTMLSmoothlyDisplayJsonPrimitiveElement;
        new (): HTMLSmoothlyDisplayJsonPrimitiveElement;
    };
    interface HTMLSmoothlyDisplayJsonRecordElement extends Components.SmoothlyDisplayJsonRecord, HTMLStencilElement {
    }
    var HTMLSmoothlyDisplayJsonRecordElement: {
        prototype: HTMLSmoothlyDisplayJsonRecordElement;
        new (): HTMLSmoothlyDisplayJsonRecordElement;
    };
    interface HTMLSmoothlyDisplayJsonRecordKeyElement extends Components.SmoothlyDisplayJsonRecordKey, HTMLStencilElement {
    }
    var HTMLSmoothlyDisplayJsonRecordKeyElement: {
        prototype: HTMLSmoothlyDisplayJsonRecordKeyElement;
        new (): HTMLSmoothlyDisplayJsonRecordKeyElement;
    };
    interface HTMLSmoothlyFilterElementEventMap {
        "smoothlyFilter": selectively.Criteria;
    }
    interface HTMLSmoothlyFilterElement extends Components.SmoothlyFilter, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyFilterElementEventMap>(type: K, listener: (this: HTMLSmoothlyFilterElement, ev: SmoothlyFilterCustomEvent<HTMLSmoothlyFilterElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyFilterElementEventMap>(type: K, listener: (this: HTMLSmoothlyFilterElement, ev: SmoothlyFilterCustomEvent<HTMLSmoothlyFilterElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyFilterElement: {
        prototype: HTMLSmoothlyFilterElement;
        new (): HTMLSmoothlyFilterElement;
    };
    interface HTMLSmoothlyFilterFieldElementEventMap {
        "smoothlyFilterField": selectively.Rule;
    }
    interface HTMLSmoothlyFilterFieldElement extends Components.SmoothlyFilterField, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyFilterFieldElementEventMap>(type: K, listener: (this: HTMLSmoothlyFilterFieldElement, ev: SmoothlyFilterFieldCustomEvent<HTMLSmoothlyFilterFieldElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyFilterFieldElementEventMap>(type: K, listener: (this: HTMLSmoothlyFilterFieldElement, ev: SmoothlyFilterFieldCustomEvent<HTMLSmoothlyFilterFieldElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyFilterFieldElement: {
        prototype: HTMLSmoothlyFilterFieldElement;
        new (): HTMLSmoothlyFilterFieldElement;
    };
    interface HTMLSmoothlyFilterInputElementEventMap {
        "smoothlyFilterUpdate": Filter.Update;
        "smoothlyFilterManipulate": Filter.Manipulate;
    }
    interface HTMLSmoothlyFilterInputElement extends Components.SmoothlyFilterInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyFilterInputElementEventMap>(type: K, listener: (this: HTMLSmoothlyFilterInputElement, ev: SmoothlyFilterInputCustomEvent<HTMLSmoothlyFilterInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyFilterInputElementEventMap>(type: K, listener: (this: HTMLSmoothlyFilterInputElement, ev: SmoothlyFilterInputCustomEvent<HTMLSmoothlyFilterInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyFilterInputElement: {
        prototype: HTMLSmoothlyFilterInputElement;
        new (): HTMLSmoothlyFilterInputElement;
    };
    interface HTMLSmoothlyFilterSelectElementEventMap {
        "smoothlyFilterUpdate": Filter.Update;
        "smoothlyFilterManipulate": Filter.Manipulate;
        "smoothlyInputLooks": (looks: Looks) => void;
    }
    interface HTMLSmoothlyFilterSelectElement extends Components.SmoothlyFilterSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyFilterSelectElementEventMap>(type: K, listener: (this: HTMLSmoothlyFilterSelectElement, ev: SmoothlyFilterSelectCustomEvent<HTMLSmoothlyFilterSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyFilterSelectElementEventMap>(type: K, listener: (this: HTMLSmoothlyFilterSelectElement, ev: SmoothlyFilterSelectCustomEvent<HTMLSmoothlyFilterSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyFilterSelectElement: {
        prototype: HTMLSmoothlyFilterSelectElement;
        new (): HTMLSmoothlyFilterSelectElement;
    };
    interface HTMLSmoothlyFilterToggleElementEventMap {
        "smoothlyFilterUpdate": Filter.Update;
        "smoothlyFilterManipulate": Filter.Manipulate;
    }
    interface HTMLSmoothlyFilterToggleElement extends Components.SmoothlyFilterToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyFilterToggleElementEventMap>(type: K, listener: (this: HTMLSmoothlyFilterToggleElement, ev: SmoothlyFilterToggleCustomEvent<HTMLSmoothlyFilterToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyFilterToggleElementEventMap>(type: K, listener: (this: HTMLSmoothlyFilterToggleElement, ev: SmoothlyFilterToggleCustomEvent<HTMLSmoothlyFilterToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyFilterToggleElement: {
        prototype: HTMLSmoothlyFilterToggleElement;
        new (): HTMLSmoothlyFilterToggleElement;
    };
    interface HTMLSmoothlyFormElementEventMap {
        "smoothlyFormDisable": (disabled: boolean) => void;
        "smoothlyFormInput": Data;
        "smoothlyFormSubmit": Submit;
        "smoothlyFormReset": void;
        "smoothlyFormEdit": boolean;
        "smoothlyFormClear": void;
        "notice": Notice;
    }
    interface HTMLSmoothlyFormElement extends Components.SmoothlyForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyFormElementEventMap>(type: K, listener: (this: HTMLSmoothlyFormElement, ev: SmoothlyFormCustomEvent<HTMLSmoothlyFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyFormElementEventMap>(type: K, listener: (this: HTMLSmoothlyFormElement, ev: SmoothlyFormCustomEvent<HTMLSmoothlyFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyFormElement: {
        prototype: HTMLSmoothlyFormElement;
        new (): HTMLSmoothlyFormElement;
    };
    interface HTMLSmoothlyFrameElementEventMap {
        "trigger": Trigger;
        "message2": Message<any>;
    }
    interface HTMLSmoothlyFrameElement extends Components.SmoothlyFrame, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyFrameElementEventMap>(type: K, listener: (this: HTMLSmoothlyFrameElement, ev: SmoothlyFrameCustomEvent<HTMLSmoothlyFrameElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyFrameElementEventMap>(type: K, listener: (this: HTMLSmoothlyFrameElement, ev: SmoothlyFrameCustomEvent<HTMLSmoothlyFrameElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyFrameElement: {
        prototype: HTMLSmoothlyFrameElement;
        new (): HTMLSmoothlyFrameElement;
    };
    interface HTMLSmoothlyIconElement extends Components.SmoothlyIcon, HTMLStencilElement {
    }
    var HTMLSmoothlyIconElement: {
        prototype: HTMLSmoothlyIconElement;
        new (): HTMLSmoothlyIconElement;
    };
    interface HTMLSmoothlyIconDemoElement extends Components.SmoothlyIconDemo, HTMLStencilElement {
    }
    var HTMLSmoothlyIconDemoElement: {
        prototype: HTMLSmoothlyIconDemoElement;
        new (): HTMLSmoothlyIconDemoElement;
    };
    interface HTMLSmoothlyInputElementEventMap {
        "smoothlyInputLooks": (looks: Looks, color: Color) => void;
        "smoothlyInputLoad": (parent: HTMLElement) => void;
        "smoothlyFormDisable": (disabled: boolean) => void;
        "smoothlyBlur": void;
        "smoothlyChange": Record<string, any>;
        "smoothlyInput": Record<string, any>;
    }
    interface HTMLSmoothlyInputElement extends Components.SmoothlyInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyInputElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputElement, ev: SmoothlyInputCustomEvent<HTMLSmoothlyInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyInputElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputElement, ev: SmoothlyInputCustomEvent<HTMLSmoothlyInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyInputElement: {
        prototype: HTMLSmoothlyInputElement;
        new (): HTMLSmoothlyInputElement;
    };
    interface HTMLSmoothlyInputCheckboxElementEventMap {
        "smoothlyInputLooks": (looks: Looks, color: Color) => void;
        "smoothlyInput": Data;
        "smoothlyInputLoad": (parent: HTMLElement) => void;
        "smoothlyFormDisable": (disabled: boolean) => void;
    }
    interface HTMLSmoothlyInputCheckboxElement extends Components.SmoothlyInputCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyInputCheckboxElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputCheckboxElement, ev: SmoothlyInputCheckboxCustomEvent<HTMLSmoothlyInputCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyInputCheckboxElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputCheckboxElement, ev: SmoothlyInputCheckboxCustomEvent<HTMLSmoothlyInputCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyInputCheckboxElement: {
        prototype: HTMLSmoothlyInputCheckboxElement;
        new (): HTMLSmoothlyInputCheckboxElement;
    };
    interface HTMLSmoothlyInputClearElementEventMap {
        "smoothlyInputLoad": (parent: HTMLElement) => void;
    }
    interface HTMLSmoothlyInputClearElement extends Components.SmoothlyInputClear, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyInputClearElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputClearElement, ev: SmoothlyInputClearCustomEvent<HTMLSmoothlyInputClearElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyInputClearElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputClearElement, ev: SmoothlyInputClearCustomEvent<HTMLSmoothlyInputClearElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyInputClearElement: {
        prototype: HTMLSmoothlyInputClearElement;
        new (): HTMLSmoothlyInputClearElement;
    };
    interface HTMLSmoothlyInputColorElementEventMap {
        "smoothlyInputLooks": (looks: Looks, color: Color) => void;
        "smoothlyInput": Record<string, any>;
        "smoothlyInputLoad": (parent: HTMLElement) => void;
    }
    interface HTMLSmoothlyInputColorElement extends Components.SmoothlyInputColor, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyInputColorElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputColorElement, ev: SmoothlyInputColorCustomEvent<HTMLSmoothlyInputColorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyInputColorElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputColorElement, ev: SmoothlyInputColorCustomEvent<HTMLSmoothlyInputColorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyInputColorElement: {
        prototype: HTMLSmoothlyInputColorElement;
        new (): HTMLSmoothlyInputColorElement;
    };
    interface HTMLSmoothlyInputDateElementEventMap {
        "smoothlyInputLoad": (parent: HTMLElement) => void;
        "smoothlyValueChange": Date;
        "smoothlyInput": Record<string, any>;
        "smoothlyInputLooks": (looks: Looks, color: Color) => void;
    }
    interface HTMLSmoothlyInputDateElement extends Components.SmoothlyInputDate, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyInputDateElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputDateElement, ev: SmoothlyInputDateCustomEvent<HTMLSmoothlyInputDateElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyInputDateElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputDateElement, ev: SmoothlyInputDateCustomEvent<HTMLSmoothlyInputDateElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyInputDateElement: {
        prototype: HTMLSmoothlyInputDateElement;
        new (): HTMLSmoothlyInputDateElement;
    };
    interface HTMLSmoothlyInputDateRangeElementEventMap {
        "smoothlyInput": { [name: string]: isoly.DateRange | undefined };
        "smoothlyInputLoad": (parent: HTMLElement) => void;
        "smoothlyInputLooks": (looks: Looks, color: Color) => void;
        "smoothlyFormDisable": (disabled: boolean) => void;
    }
    interface HTMLSmoothlyInputDateRangeElement extends Components.SmoothlyInputDateRange, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyInputDateRangeElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputDateRangeElement, ev: SmoothlyInputDateRangeCustomEvent<HTMLSmoothlyInputDateRangeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyInputDateRangeElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputDateRangeElement, ev: SmoothlyInputDateRangeCustomEvent<HTMLSmoothlyInputDateRangeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyInputDateRangeElement: {
        prototype: HTMLSmoothlyInputDateRangeElement;
        new (): HTMLSmoothlyInputDateRangeElement;
    };
    interface HTMLSmoothlyInputDemoElement extends Components.SmoothlyInputDemo, HTMLStencilElement {
    }
    var HTMLSmoothlyInputDemoElement: {
        prototype: HTMLSmoothlyInputDemoElement;
        new (): HTMLSmoothlyInputDemoElement;
    };
    interface HTMLSmoothlyInputDemoControlledFormElement extends Components.SmoothlyInputDemoControlledForm, HTMLStencilElement {
    }
    var HTMLSmoothlyInputDemoControlledFormElement: {
        prototype: HTMLSmoothlyInputDemoControlledFormElement;
        new (): HTMLSmoothlyInputDemoControlledFormElement;
    };
    interface HTMLSmoothlyInputEditElementEventMap {
        "smoothlyInputLoad": (parent: HTMLElement) => void;
    }
    interface HTMLSmoothlyInputEditElement extends Components.SmoothlyInputEdit, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyInputEditElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputEditElement, ev: SmoothlyInputEditCustomEvent<HTMLSmoothlyInputEditElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyInputEditElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputEditElement, ev: SmoothlyInputEditCustomEvent<HTMLSmoothlyInputEditElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyInputEditElement: {
        prototype: HTMLSmoothlyInputEditElement;
        new (): HTMLSmoothlyInputEditElement;
    };
    interface HTMLSmoothlyInputFileElementEventMap {
        "smoothlyInputLooks": (looks: Looks, color: Color) => void;
        "smoothlyInput": Record<string, any>;
        "smoothlyInputLoad": (parent: HTMLElement) => void;
        "smoothlyFormDisable": (disabled: boolean) => void;
    }
    interface HTMLSmoothlyInputFileElement extends Components.SmoothlyInputFile, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyInputFileElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputFileElement, ev: SmoothlyInputFileCustomEvent<HTMLSmoothlyInputFileElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyInputFileElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputFileElement, ev: SmoothlyInputFileCustomEvent<HTMLSmoothlyInputFileElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyInputFileElement: {
        prototype: HTMLSmoothlyInputFileElement;
        new (): HTMLSmoothlyInputFileElement;
    };
    interface HTMLSmoothlyInputMonthElementEventMap {
        "smoothlyInput": Data;
        "smoothlyInputLoad": (parent: HTMLElement) => void;
        "smoothlyFormDisable": (disabled: boolean) => void;
        "smoothlyInputLooks": (looks: Looks, color: Color) => void;
    }
    interface HTMLSmoothlyInputMonthElement extends Components.SmoothlyInputMonth, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyInputMonthElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputMonthElement, ev: SmoothlyInputMonthCustomEvent<HTMLSmoothlyInputMonthElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyInputMonthElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputMonthElement, ev: SmoothlyInputMonthCustomEvent<HTMLSmoothlyInputMonthElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyInputMonthElement: {
        prototype: HTMLSmoothlyInputMonthElement;
        new (): HTMLSmoothlyInputMonthElement;
    };
    interface HTMLSmoothlyInputRadioElementEventMap {
        "smoothlyInputLooks": (looks: Looks, color: Color) => void;
        "smoothlyInput": Data;
        "smoothlyInputLoad": (parent: HTMLElement) => void;
        "smoothlyFormDisable": (disabled: boolean) => void;
    }
    interface HTMLSmoothlyInputRadioElement extends Components.SmoothlyInputRadio, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyInputRadioElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputRadioElement, ev: SmoothlyInputRadioCustomEvent<HTMLSmoothlyInputRadioElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyInputRadioElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputRadioElement, ev: SmoothlyInputRadioCustomEvent<HTMLSmoothlyInputRadioElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyInputRadioElement: {
        prototype: HTMLSmoothlyInputRadioElement;
        new (): HTMLSmoothlyInputRadioElement;
    };
    interface HTMLSmoothlyInputRadioItemElementEventMap {
        "smoothlySelect": Selectable;
        "smoothlyRadioButtonRegister": (name: string) => void;
    }
    interface HTMLSmoothlyInputRadioItemElement extends Components.SmoothlyInputRadioItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyInputRadioItemElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputRadioItemElement, ev: SmoothlyInputRadioItemCustomEvent<HTMLSmoothlyInputRadioItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyInputRadioItemElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputRadioItemElement, ev: SmoothlyInputRadioItemCustomEvent<HTMLSmoothlyInputRadioItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyInputRadioItemElement: {
        prototype: HTMLSmoothlyInputRadioItemElement;
        new (): HTMLSmoothlyInputRadioItemElement;
    };
    interface HTMLSmoothlyInputRangeElementEventMap {
        "smoothlyInputLooks": (looks: Looks, color: Color) => void;
        "smoothlyInput": Record<string, any>;
        "smoothlyInputLoad": (parent: HTMLElement) => void;
        "smoothlyFormDisable": (disabled: boolean) => void;
    }
    interface HTMLSmoothlyInputRangeElement extends Components.SmoothlyInputRange, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyInputRangeElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputRangeElement, ev: SmoothlyInputRangeCustomEvent<HTMLSmoothlyInputRangeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyInputRangeElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputRangeElement, ev: SmoothlyInputRangeCustomEvent<HTMLSmoothlyInputRangeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyInputRangeElement: {
        prototype: HTMLSmoothlyInputRangeElement;
        new (): HTMLSmoothlyInputRangeElement;
    };
    interface HTMLSmoothlyInputResetElementEventMap {
        "smoothlyInputLoad": (parent: HTMLElement) => void;
    }
    interface HTMLSmoothlyInputResetElement extends Components.SmoothlyInputReset, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyInputResetElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputResetElement, ev: SmoothlyInputResetCustomEvent<HTMLSmoothlyInputResetElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyInputResetElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputResetElement, ev: SmoothlyInputResetCustomEvent<HTMLSmoothlyInputResetElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyInputResetElement: {
        prototype: HTMLSmoothlyInputResetElement;
        new (): HTMLSmoothlyInputResetElement;
    };
    interface HTMLSmoothlyInputSelectElementEventMap {
        "smoothlyInput": Data;
        "smoothlyInputLooks": (looks: Looks, color: Color) => void;
        "smoothlyInputLoad": (parent: HTMLElement) => void;
        "smoothlyFormDisable": (disabled: boolean) => void;
        "smoothlyItemSelect": HTMLSmoothlyItemElement;
    }
    interface HTMLSmoothlyInputSelectElement extends Components.SmoothlyInputSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyInputSelectElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputSelectElement, ev: SmoothlyInputSelectCustomEvent<HTMLSmoothlyInputSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyInputSelectElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputSelectElement, ev: SmoothlyInputSelectCustomEvent<HTMLSmoothlyInputSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyInputSelectElement: {
        prototype: HTMLSmoothlyInputSelectElement;
        new (): HTMLSmoothlyInputSelectElement;
    };
    interface HTMLSmoothlyInputSubmitElementEventMap {
        "smoothlyInputLoad": (parent: HTMLElement) => void;
    }
    interface HTMLSmoothlyInputSubmitElement extends Components.SmoothlyInputSubmit, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyInputSubmitElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputSubmitElement, ev: SmoothlyInputSubmitCustomEvent<HTMLSmoothlyInputSubmitElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyInputSubmitElementEventMap>(type: K, listener: (this: HTMLSmoothlyInputSubmitElement, ev: SmoothlyInputSubmitCustomEvent<HTMLSmoothlyInputSubmitElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyInputSubmitElement: {
        prototype: HTMLSmoothlyInputSubmitElement;
        new (): HTMLSmoothlyInputSubmitElement;
    };
    interface HTMLSmoothlyItemElementEventMap {
        "smoothlyItemSelect": HTMLSmoothlyItemElement;
        "smoothlyInputLoad": (parent: HTMLElement) => void;
    }
    interface HTMLSmoothlyItemElement extends Components.SmoothlyItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyItemElementEventMap>(type: K, listener: (this: HTMLSmoothlyItemElement, ev: SmoothlyItemCustomEvent<HTMLSmoothlyItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyItemElementEventMap>(type: K, listener: (this: HTMLSmoothlyItemElement, ev: SmoothlyItemCustomEvent<HTMLSmoothlyItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyItemElement: {
        prototype: HTMLSmoothlyItemElement;
        new (): HTMLSmoothlyItemElement;
    };
    interface HTMLSmoothlyLabelElement extends Components.SmoothlyLabel, HTMLStencilElement {
    }
    var HTMLSmoothlyLabelElement: {
        prototype: HTMLSmoothlyLabelElement;
        new (): HTMLSmoothlyLabelElement;
    };
    interface HTMLSmoothlyLazyElement extends Components.SmoothlyLazy, HTMLStencilElement {
    }
    var HTMLSmoothlyLazyElement: {
        prototype: HTMLSmoothlyLazyElement;
        new (): HTMLSmoothlyLazyElement;
    };
    interface HTMLSmoothlyLoadMoreElementEventMap {
        "smoothlyLoadMore": string;
    }
    interface HTMLSmoothlyLoadMoreElement extends Components.SmoothlyLoadMore, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyLoadMoreElementEventMap>(type: K, listener: (this: HTMLSmoothlyLoadMoreElement, ev: SmoothlyLoadMoreCustomEvent<HTMLSmoothlyLoadMoreElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyLoadMoreElementEventMap>(type: K, listener: (this: HTMLSmoothlyLoadMoreElement, ev: SmoothlyLoadMoreCustomEvent<HTMLSmoothlyLoadMoreElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyLoadMoreElement: {
        prototype: HTMLSmoothlyLoadMoreElement;
        new (): HTMLSmoothlyLoadMoreElement;
    };
    interface HTMLSmoothlyNextDemoElement extends Components.SmoothlyNextDemo, HTMLStencilElement {
    }
    var HTMLSmoothlyNextDemoElement: {
        prototype: HTMLSmoothlyNextDemoElement;
        new (): HTMLSmoothlyNextDemoElement;
    };
    interface HTMLSmoothlyNextDemoColspanElement extends Components.SmoothlyNextDemoColspan, HTMLStencilElement {
    }
    var HTMLSmoothlyNextDemoColspanElement: {
        prototype: HTMLSmoothlyNextDemoColspanElement;
        new (): HTMLSmoothlyNextDemoColspanElement;
    };
    interface HTMLSmoothlyNextDemoGroupElement extends Components.SmoothlyNextDemoGroup, HTMLStencilElement {
    }
    var HTMLSmoothlyNextDemoGroupElement: {
        prototype: HTMLSmoothlyNextDemoGroupElement;
        new (): HTMLSmoothlyNextDemoGroupElement;
    };
    interface HTMLSmoothlyNextDemoNestedElement extends Components.SmoothlyNextDemoNested, HTMLStencilElement {
    }
    var HTMLSmoothlyNextDemoNestedElement: {
        prototype: HTMLSmoothlyNextDemoNestedElement;
        new (): HTMLSmoothlyNextDemoNestedElement;
    };
    interface HTMLSmoothlyNextDemoNestedInnerElement extends Components.SmoothlyNextDemoNestedInner, HTMLStencilElement {
    }
    var HTMLSmoothlyNextDemoNestedInnerElement: {
        prototype: HTMLSmoothlyNextDemoNestedInnerElement;
        new (): HTMLSmoothlyNextDemoNestedInnerElement;
    };
    interface HTMLSmoothlyNextDemoSimpleElement extends Components.SmoothlyNextDemoSimple, HTMLStencilElement {
    }
    var HTMLSmoothlyNextDemoSimpleElement: {
        prototype: HTMLSmoothlyNextDemoSimpleElement;
        new (): HTMLSmoothlyNextDemoSimpleElement;
    };
    interface HTMLSmoothlyNextTableElement extends Components.SmoothlyNextTable, HTMLStencilElement {
    }
    var HTMLSmoothlyNextTableElement: {
        prototype: HTMLSmoothlyNextTableElement;
        new (): HTMLSmoothlyNextTableElement;
    };
    interface HTMLSmoothlyNextTableBodyElement extends Components.SmoothlyNextTableBody, HTMLStencilElement {
    }
    var HTMLSmoothlyNextTableBodyElement: {
        prototype: HTMLSmoothlyNextTableBodyElement;
        new (): HTMLSmoothlyNextTableBodyElement;
    };
    interface HTMLSmoothlyNextTableCellElement extends Components.SmoothlyNextTableCell, HTMLStencilElement {
    }
    var HTMLSmoothlyNextTableCellElement: {
        prototype: HTMLSmoothlyNextTableCellElement;
        new (): HTMLSmoothlyNextTableCellElement;
    };
    interface HTMLSmoothlyNextTableDemoFilteredElement extends Components.SmoothlyNextTableDemoFiltered, HTMLStencilElement {
    }
    var HTMLSmoothlyNextTableDemoFilteredElement: {
        prototype: HTMLSmoothlyNextTableDemoFilteredElement;
        new (): HTMLSmoothlyNextTableDemoFilteredElement;
    };
    interface HTMLSmoothlyNextTableExpandableCellElementEventMap {
        "smoothlyNextTableExpandableCellOpened": void;
        "smoothlyNextTableExpandableCellRegister": void;
    }
    interface HTMLSmoothlyNextTableExpandableCellElement extends Components.SmoothlyNextTableExpandableCell, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyNextTableExpandableCellElementEventMap>(type: K, listener: (this: HTMLSmoothlyNextTableExpandableCellElement, ev: SmoothlyNextTableExpandableCellCustomEvent<HTMLSmoothlyNextTableExpandableCellElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyNextTableExpandableCellElementEventMap>(type: K, listener: (this: HTMLSmoothlyNextTableExpandableCellElement, ev: SmoothlyNextTableExpandableCellCustomEvent<HTMLSmoothlyNextTableExpandableCellElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyNextTableExpandableCellElement: {
        prototype: HTMLSmoothlyNextTableExpandableCellElement;
        new (): HTMLSmoothlyNextTableExpandableCellElement;
    };
    interface HTMLSmoothlyNextTableExpandableRowElement extends Components.SmoothlyNextTableExpandableRow, HTMLStencilElement {
    }
    var HTMLSmoothlyNextTableExpandableRowElement: {
        prototype: HTMLSmoothlyNextTableExpandableRowElement;
        new (): HTMLSmoothlyNextTableExpandableRowElement;
    };
    interface HTMLSmoothlyNextTableFootElement extends Components.SmoothlyNextTableFoot, HTMLStencilElement {
    }
    var HTMLSmoothlyNextTableFootElement: {
        prototype: HTMLSmoothlyNextTableFootElement;
        new (): HTMLSmoothlyNextTableFootElement;
    };
    interface HTMLSmoothlyNextTableHeadElement extends Components.SmoothlyNextTableHead, HTMLStencilElement {
    }
    var HTMLSmoothlyNextTableHeadElement: {
        prototype: HTMLSmoothlyNextTableHeadElement;
        new (): HTMLSmoothlyNextTableHeadElement;
    };
    interface HTMLSmoothlyNextTableRowElement extends Components.SmoothlyNextTableRow, HTMLStencilElement {
    }
    var HTMLSmoothlyNextTableRowElement: {
        prototype: HTMLSmoothlyNextTableRowElement;
        new (): HTMLSmoothlyNextTableRowElement;
    };
    interface HTMLSmoothlyNextTableRowGroupElement extends Components.SmoothlyNextTableRowGroup, HTMLStencilElement {
    }
    var HTMLSmoothlyNextTableRowGroupElement: {
        prototype: HTMLSmoothlyNextTableRowGroupElement;
        new (): HTMLSmoothlyNextTableRowGroupElement;
    };
    interface HTMLSmoothlyNotificationElementEventMap {
        "remove": Notice;
    }
    interface HTMLSmoothlyNotificationElement extends Components.SmoothlyNotification, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyNotificationElementEventMap>(type: K, listener: (this: HTMLSmoothlyNotificationElement, ev: SmoothlyNotificationCustomEvent<HTMLSmoothlyNotificationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyNotificationElementEventMap>(type: K, listener: (this: HTMLSmoothlyNotificationElement, ev: SmoothlyNotificationCustomEvent<HTMLSmoothlyNotificationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyNotificationElement: {
        prototype: HTMLSmoothlyNotificationElement;
        new (): HTMLSmoothlyNotificationElement;
    };
    interface HTMLSmoothlyNotifierElement extends Components.SmoothlyNotifier, HTMLStencilElement {
    }
    var HTMLSmoothlyNotifierElement: {
        prototype: HTMLSmoothlyNotifierElement;
        new (): HTMLSmoothlyNotifierElement;
    };
    interface HTMLSmoothlyPickerElementEventMap {
        "smoothlyPickerLoaded": Controls;
        "smoothlyInput": Record<string, any | any[]>;
        "smoothlyChange": Record<string, any | any[]>;
        "smoothlyInputLooks": (looks: Looks) => void;
        "smoothlyFormDisable": (disabled: boolean) => void;
        "smoothlyInputLoad": (parent: HTMLElement) => void;
    }
    interface HTMLSmoothlyPickerElement extends Components.SmoothlyPicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyPickerElementEventMap>(type: K, listener: (this: HTMLSmoothlyPickerElement, ev: SmoothlyPickerCustomEvent<HTMLSmoothlyPickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyPickerElementEventMap>(type: K, listener: (this: HTMLSmoothlyPickerElement, ev: SmoothlyPickerCustomEvent<HTMLSmoothlyPickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyPickerElement: {
        prototype: HTMLSmoothlyPickerElement;
        new (): HTMLSmoothlyPickerElement;
    };
    interface HTMLSmoothlyPickerDemoElement extends Components.SmoothlyPickerDemo, HTMLStencilElement {
    }
    var HTMLSmoothlyPickerDemoElement: {
        prototype: HTMLSmoothlyPickerDemoElement;
        new (): HTMLSmoothlyPickerDemoElement;
    };
    interface HTMLSmoothlyPickerMenuElementEventMap {
        "notice": Notice;
        "smoothlyPickerMenuLoaded": Controls1;
    }
    interface HTMLSmoothlyPickerMenuElement extends Components.SmoothlyPickerMenu, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyPickerMenuElementEventMap>(type: K, listener: (this: HTMLSmoothlyPickerMenuElement, ev: SmoothlyPickerMenuCustomEvent<HTMLSmoothlyPickerMenuElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyPickerMenuElementEventMap>(type: K, listener: (this: HTMLSmoothlyPickerMenuElement, ev: SmoothlyPickerMenuCustomEvent<HTMLSmoothlyPickerMenuElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyPickerMenuElement: {
        prototype: HTMLSmoothlyPickerMenuElement;
        new (): HTMLSmoothlyPickerMenuElement;
    };
    interface HTMLSmoothlyPickerOptionElementEventMap {
        "smoothlyPickerOptionLoad": Option.Load;
        "smoothlyPickerOptionLoaded": Option;
        "smoothlyPickerOptionChange": Option;
    }
    interface HTMLSmoothlyPickerOptionElement extends Components.SmoothlyPickerOption, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyPickerOptionElementEventMap>(type: K, listener: (this: HTMLSmoothlyPickerOptionElement, ev: SmoothlyPickerOptionCustomEvent<HTMLSmoothlyPickerOptionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyPickerOptionElementEventMap>(type: K, listener: (this: HTMLSmoothlyPickerOptionElement, ev: SmoothlyPickerOptionCustomEvent<HTMLSmoothlyPickerOptionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyPickerOptionElement: {
        prototype: HTMLSmoothlyPickerOptionElement;
        new (): HTMLSmoothlyPickerOptionElement;
    };
    interface HTMLSmoothlySlotElementsElementEventMap {
        "smoothlySlotEmpty": Slot;
    }
    interface HTMLSmoothlySlotElementsElement extends Components.SmoothlySlotElements, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlySlotElementsElementEventMap>(type: K, listener: (this: HTMLSmoothlySlotElementsElement, ev: SmoothlySlotElementsCustomEvent<HTMLSmoothlySlotElementsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlySlotElementsElementEventMap>(type: K, listener: (this: HTMLSmoothlySlotElementsElement, ev: SmoothlySlotElementsCustomEvent<HTMLSmoothlySlotElementsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlySlotElementsElement: {
        prototype: HTMLSmoothlySlotElementsElement;
        new (): HTMLSmoothlySlotElementsElement;
    };
    interface HTMLSmoothlySlottedElementsElementEventMap {
        "smoothlySlottedChange": Node[];
    }
    interface HTMLSmoothlySlottedElementsElement extends Components.SmoothlySlottedElements, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlySlottedElementsElementEventMap>(type: K, listener: (this: HTMLSmoothlySlottedElementsElement, ev: SmoothlySlottedElementsCustomEvent<HTMLSmoothlySlottedElementsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlySlottedElementsElementEventMap>(type: K, listener: (this: HTMLSmoothlySlottedElementsElement, ev: SmoothlySlottedElementsCustomEvent<HTMLSmoothlySlottedElementsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlySlottedElementsElement: {
        prototype: HTMLSmoothlySlottedElementsElement;
        new (): HTMLSmoothlySlottedElementsElement;
    };
    interface HTMLSmoothlySpinnerElement extends Components.SmoothlySpinner, HTMLStencilElement {
    }
    var HTMLSmoothlySpinnerElement: {
        prototype: HTMLSmoothlySpinnerElement;
        new (): HTMLSmoothlySpinnerElement;
    };
    interface HTMLSmoothlySubmitElementEventMap {
        "smoothlyInputLoad": (parent: HTMLElement) => void;
    }
    interface HTMLSmoothlySubmitElement extends Components.SmoothlySubmit, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlySubmitElementEventMap>(type: K, listener: (this: HTMLSmoothlySubmitElement, ev: SmoothlySubmitCustomEvent<HTMLSmoothlySubmitElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlySubmitElementEventMap>(type: K, listener: (this: HTMLSmoothlySubmitElement, ev: SmoothlySubmitCustomEvent<HTMLSmoothlySubmitElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlySubmitElement: {
        prototype: HTMLSmoothlySubmitElement;
        new (): HTMLSmoothlySubmitElement;
    };
    interface HTMLSmoothlySummaryElementEventMap {
        "smoothlySummaryOpen": boolean;
    }
    interface HTMLSmoothlySummaryElement extends Components.SmoothlySummary, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlySummaryElementEventMap>(type: K, listener: (this: HTMLSmoothlySummaryElement, ev: SmoothlySummaryCustomEvent<HTMLSmoothlySummaryElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlySummaryElementEventMap>(type: K, listener: (this: HTMLSmoothlySummaryElement, ev: SmoothlySummaryCustomEvent<HTMLSmoothlySummaryElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlySummaryElement: {
        prototype: HTMLSmoothlySummaryElement;
        new (): HTMLSmoothlySummaryElement;
    };
    interface HTMLSmoothlyTabElementEventMap {
        "expansionOpen": HTMLDivElement;
    }
    interface HTMLSmoothlyTabElement extends Components.SmoothlyTab, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyTabElementEventMap>(type: K, listener: (this: HTMLSmoothlyTabElement, ev: SmoothlyTabCustomEvent<HTMLSmoothlyTabElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyTabElementEventMap>(type: K, listener: (this: HTMLSmoothlyTabElement, ev: SmoothlyTabCustomEvent<HTMLSmoothlyTabElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyTabElement: {
        prototype: HTMLSmoothlyTabElement;
        new (): HTMLSmoothlyTabElement;
    };
    interface HTMLSmoothlyTableElementEventMap {
        "smoothlyNestedTable": () => void;
        "smoothlySpotlightChange": { allowSpotlight: boolean; owner?: EventTarget };
        "smoothlyTableLoad": (owner: EventTarget) => void;
    }
    interface HTMLSmoothlyTableElement extends Components.SmoothlyTable, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyTableElementEventMap>(type: K, listener: (this: HTMLSmoothlyTableElement, ev: SmoothlyTableCustomEvent<HTMLSmoothlyTableElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyTableElementEventMap>(type: K, listener: (this: HTMLSmoothlyTableElement, ev: SmoothlyTableCustomEvent<HTMLSmoothlyTableElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyTableElement: {
        prototype: HTMLSmoothlyTableElement;
        new (): HTMLSmoothlyTableElement;
    };
    interface HTMLSmoothlyTableCellElement extends Components.SmoothlyTableCell, HTMLStencilElement {
    }
    var HTMLSmoothlyTableCellElement: {
        prototype: HTMLSmoothlyTableCellElement;
        new (): HTMLSmoothlyTableCellElement;
    };
    interface HTMLSmoothlyTableDemoElement extends Components.SmoothlyTableDemo, HTMLStencilElement {
    }
    var HTMLSmoothlyTableDemoElement: {
        prototype: HTMLSmoothlyTableDemoElement;
        new (): HTMLSmoothlyTableDemoElement;
    };
    interface HTMLSmoothlyTableDemoFilteredElement extends Components.SmoothlyTableDemoFiltered, HTMLStencilElement {
    }
    var HTMLSmoothlyTableDemoFilteredElement: {
        prototype: HTMLSmoothlyTableDemoFilteredElement;
        new (): HTMLSmoothlyTableDemoFilteredElement;
    };
    interface HTMLSmoothlyTableExpandableCellElementEventMap {
        "smoothlyExpansionOpen": HTMLElement;
        "smoothlyExpansionLoad": void;
        "smoothlyExpandableChange": boolean;
        "smoothlyExpandableLoad": { allowSpotlight: (allowed: boolean) => void };
    }
    interface HTMLSmoothlyTableExpandableCellElement extends Components.SmoothlyTableExpandableCell, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyTableExpandableCellElementEventMap>(type: K, listener: (this: HTMLSmoothlyTableExpandableCellElement, ev: SmoothlyTableExpandableCellCustomEvent<HTMLSmoothlyTableExpandableCellElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyTableExpandableCellElementEventMap>(type: K, listener: (this: HTMLSmoothlyTableExpandableCellElement, ev: SmoothlyTableExpandableCellCustomEvent<HTMLSmoothlyTableExpandableCellElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyTableExpandableCellElement: {
        prototype: HTMLSmoothlyTableExpandableCellElement;
        new (): HTMLSmoothlyTableExpandableCellElement;
    };
    interface HTMLSmoothlyTableExpandableRowElementEventMap {
        "smoothlyExpansionOpen": HTMLElement;
        "smoothlyExpandableChange": boolean;
        "smoothlyExpandableLoad": { allowSpotlight: (allowed: boolean) => void };
    }
    interface HTMLSmoothlyTableExpandableRowElement extends Components.SmoothlyTableExpandableRow, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyTableExpandableRowElementEventMap>(type: K, listener: (this: HTMLSmoothlyTableExpandableRowElement, ev: SmoothlyTableExpandableRowCustomEvent<HTMLSmoothlyTableExpandableRowElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyTableExpandableRowElementEventMap>(type: K, listener: (this: HTMLSmoothlyTableExpandableRowElement, ev: SmoothlyTableExpandableRowCustomEvent<HTMLSmoothlyTableExpandableRowElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyTableExpandableRowElement: {
        prototype: HTMLSmoothlyTableExpandableRowElement;
        new (): HTMLSmoothlyTableExpandableRowElement;
    };
    interface HTMLSmoothlyTableFooterElement extends Components.SmoothlyTableFooter, HTMLStencilElement {
    }
    var HTMLSmoothlyTableFooterElement: {
        prototype: HTMLSmoothlyTableFooterElement;
        new (): HTMLSmoothlyTableFooterElement;
    };
    interface HTMLSmoothlyTableHeaderElement extends Components.SmoothlyTableHeader, HTMLStencilElement {
    }
    var HTMLSmoothlyTableHeaderElement: {
        prototype: HTMLSmoothlyTableHeaderElement;
        new (): HTMLSmoothlyTableHeaderElement;
    };
    interface HTMLSmoothlyTableRowElement extends Components.SmoothlyTableRow, HTMLStencilElement {
    }
    var HTMLSmoothlyTableRowElement: {
        prototype: HTMLSmoothlyTableRowElement;
        new (): HTMLSmoothlyTableRowElement;
    };
    interface HTMLSmoothlyTableTestingElement extends Components.SmoothlyTableTesting, HTMLStencilElement {
    }
    var HTMLSmoothlyTableTestingElement: {
        prototype: HTMLSmoothlyTableTestingElement;
        new (): HTMLSmoothlyTableTestingElement;
    };
    interface HTMLSmoothlyTabsElementEventMap {
        "selectedTab": string;
    }
    interface HTMLSmoothlyTabsElement extends Components.SmoothlyTabs, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyTabsElementEventMap>(type: K, listener: (this: HTMLSmoothlyTabsElement, ev: SmoothlyTabsCustomEvent<HTMLSmoothlyTabsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyTabsElementEventMap>(type: K, listener: (this: HTMLSmoothlyTabsElement, ev: SmoothlyTabsCustomEvent<HTMLSmoothlyTabsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyTabsElement: {
        prototype: HTMLSmoothlyTabsElement;
        new (): HTMLSmoothlyTabsElement;
    };
    interface HTMLSmoothlyTabsDemoElement extends Components.SmoothlyTabsDemo, HTMLStencilElement {
    }
    var HTMLSmoothlyTabsDemoElement: {
        prototype: HTMLSmoothlyTabsDemoElement;
        new (): HTMLSmoothlyTabsDemoElement;
    };
    interface HTMLSmoothlyThemeColorElement extends Components.SmoothlyThemeColor, HTMLStencilElement {
    }
    var HTMLSmoothlyThemeColorElement: {
        prototype: HTMLSmoothlyThemeColorElement;
        new (): HTMLSmoothlyThemeColorElement;
    };
    interface HTMLSmoothlyThemeColorVariantElement extends Components.SmoothlyThemeColorVariant, HTMLStencilElement {
    }
    var HTMLSmoothlyThemeColorVariantElement: {
        prototype: HTMLSmoothlyThemeColorVariantElement;
        new (): HTMLSmoothlyThemeColorVariantElement;
    };
    interface HTMLSmoothlyThemeColorsElement extends Components.SmoothlyThemeColors, HTMLStencilElement {
    }
    var HTMLSmoothlyThemeColorsElement: {
        prototype: HTMLSmoothlyThemeColorsElement;
        new (): HTMLSmoothlyThemeColorsElement;
    };
    interface HTMLSmoothlyThemeDemoElement extends Components.SmoothlyThemeDemo, HTMLStencilElement {
    }
    var HTMLSmoothlyThemeDemoElement: {
        prototype: HTMLSmoothlyThemeDemoElement;
        new (): HTMLSmoothlyThemeDemoElement;
    };
    interface HTMLSmoothlyThemeGuideElement extends Components.SmoothlyThemeGuide, HTMLStencilElement {
    }
    var HTMLSmoothlyThemeGuideElement: {
        prototype: HTMLSmoothlyThemeGuideElement;
        new (): HTMLSmoothlyThemeGuideElement;
    };
    interface HTMLSmoothlyThemePickerElement extends Components.SmoothlyThemePicker, HTMLStencilElement {
    }
    var HTMLSmoothlyThemePickerElement: {
        prototype: HTMLSmoothlyThemePickerElement;
        new (): HTMLSmoothlyThemePickerElement;
    };
    interface HTMLSmoothlyToggleElement extends Components.SmoothlyToggle, HTMLStencilElement {
    }
    var HTMLSmoothlyToggleElement: {
        prototype: HTMLSmoothlyToggleElement;
        new (): HTMLSmoothlyToggleElement;
    };
    interface HTMLSmoothlyToggleSwitchElementEventMap {
        "smoothlyToggleSwitchChange": boolean;
    }
    interface HTMLSmoothlyToggleSwitchElement extends Components.SmoothlyToggleSwitch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyToggleSwitchElementEventMap>(type: K, listener: (this: HTMLSmoothlyToggleSwitchElement, ev: SmoothlyToggleSwitchCustomEvent<HTMLSmoothlyToggleSwitchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyToggleSwitchElementEventMap>(type: K, listener: (this: HTMLSmoothlyToggleSwitchElement, ev: SmoothlyToggleSwitchCustomEvent<HTMLSmoothlyToggleSwitchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyToggleSwitchElement: {
        prototype: HTMLSmoothlyToggleSwitchElement;
        new (): HTMLSmoothlyToggleSwitchElement;
    };
    interface HTMLSmoothlyTriggerElementEventMap {
        "trigger": Trigger;
    }
    interface HTMLSmoothlyTriggerElement extends Components.SmoothlyTrigger, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyTriggerElementEventMap>(type: K, listener: (this: HTMLSmoothlyTriggerElement, ev: SmoothlyTriggerCustomEvent<HTMLSmoothlyTriggerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyTriggerElementEventMap>(type: K, listener: (this: HTMLSmoothlyTriggerElement, ev: SmoothlyTriggerCustomEvent<HTMLSmoothlyTriggerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyTriggerElement: {
        prototype: HTMLSmoothlyTriggerElement;
        new (): HTMLSmoothlyTriggerElement;
    };
    interface HTMLSmoothlyTriggerSinkElement extends Components.SmoothlyTriggerSink, HTMLStencilElement {
    }
    var HTMLSmoothlyTriggerSinkElement: {
        prototype: HTMLSmoothlyTriggerSinkElement;
        new (): HTMLSmoothlyTriggerSinkElement;
    };
    interface HTMLSmoothlyTriggerSourceElementEventMap {
        "trigger": Trigger;
        "smoothlyMessage": Message<any>;
    }
    interface HTMLSmoothlyTriggerSourceElement extends Components.SmoothlyTriggerSource, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSmoothlyTriggerSourceElementEventMap>(type: K, listener: (this: HTMLSmoothlyTriggerSourceElement, ev: SmoothlyTriggerSourceCustomEvent<HTMLSmoothlyTriggerSourceElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSmoothlyTriggerSourceElementEventMap>(type: K, listener: (this: HTMLSmoothlyTriggerSourceElement, ev: SmoothlyTriggerSourceCustomEvent<HTMLSmoothlyTriggerSourceElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSmoothlyTriggerSourceElement: {
        prototype: HTMLSmoothlyTriggerSourceElement;
        new (): HTMLSmoothlyTriggerSourceElement;
    };
    interface HTMLElementTagNameMap {
        "smoothly-app": HTMLSmoothlyAppElement;
        "smoothly-app-demo": HTMLSmoothlyAppDemoElement;
        "smoothly-app-room": HTMLSmoothlyAppRoomElement;
        "smoothly-back-to-top": HTMLSmoothlyBackToTopElement;
        "smoothly-burger": HTMLSmoothlyBurgerElement;
        "smoothly-button": HTMLSmoothlyButtonElement;
        "smoothly-button-confirm": HTMLSmoothlyButtonConfirmElement;
        "smoothly-button-demo": HTMLSmoothlyButtonDemoElement;
        "smoothly-calendar": HTMLSmoothlyCalendarElement;
        "smoothly-checkbox": HTMLSmoothlyCheckboxElement;
        "smoothly-color": HTMLSmoothlyColorElement;
        "smoothly-country": HTMLSmoothlyCountryElement;
        "smoothly-dialog": HTMLSmoothlyDialogElement;
        "smoothly-dialog-demo": HTMLSmoothlyDialogDemoElement;
        "smoothly-display": HTMLSmoothlyDisplayElement;
        "smoothly-display-amount": HTMLSmoothlyDisplayAmountElement;
        "smoothly-display-demo": HTMLSmoothlyDisplayDemoElement;
        "smoothly-display-json": HTMLSmoothlyDisplayJsonElement;
        "smoothly-display-json-array": HTMLSmoothlyDisplayJsonArrayElement;
        "smoothly-display-json-primitive": HTMLSmoothlyDisplayJsonPrimitiveElement;
        "smoothly-display-json-record": HTMLSmoothlyDisplayJsonRecordElement;
        "smoothly-display-json-record-key": HTMLSmoothlyDisplayJsonRecordKeyElement;
        "smoothly-filter": HTMLSmoothlyFilterElement;
        "smoothly-filter-field": HTMLSmoothlyFilterFieldElement;
        "smoothly-filter-input": HTMLSmoothlyFilterInputElement;
        "smoothly-filter-select": HTMLSmoothlyFilterSelectElement;
        "smoothly-filter-toggle": HTMLSmoothlyFilterToggleElement;
        "smoothly-form": HTMLSmoothlyFormElement;
        "smoothly-frame": HTMLSmoothlyFrameElement;
        "smoothly-icon": HTMLSmoothlyIconElement;
        "smoothly-icon-demo": HTMLSmoothlyIconDemoElement;
        "smoothly-input": HTMLSmoothlyInputElement;
        "smoothly-input-checkbox": HTMLSmoothlyInputCheckboxElement;
        "smoothly-input-clear": HTMLSmoothlyInputClearElement;
        "smoothly-input-color": HTMLSmoothlyInputColorElement;
        "smoothly-input-date": HTMLSmoothlyInputDateElement;
        "smoothly-input-date-range": HTMLSmoothlyInputDateRangeElement;
        "smoothly-input-demo": HTMLSmoothlyInputDemoElement;
        "smoothly-input-demo-controlled-form": HTMLSmoothlyInputDemoControlledFormElement;
        "smoothly-input-edit": HTMLSmoothlyInputEditElement;
        "smoothly-input-file": HTMLSmoothlyInputFileElement;
        "smoothly-input-month": HTMLSmoothlyInputMonthElement;
        "smoothly-input-radio": HTMLSmoothlyInputRadioElement;
        "smoothly-input-radio-item": HTMLSmoothlyInputRadioItemElement;
        "smoothly-input-range": HTMLSmoothlyInputRangeElement;
        "smoothly-input-reset": HTMLSmoothlyInputResetElement;
        "smoothly-input-select": HTMLSmoothlyInputSelectElement;
        "smoothly-input-submit": HTMLSmoothlyInputSubmitElement;
        "smoothly-item": HTMLSmoothlyItemElement;
        "smoothly-label": HTMLSmoothlyLabelElement;
        "smoothly-lazy": HTMLSmoothlyLazyElement;
        "smoothly-load-more": HTMLSmoothlyLoadMoreElement;
        "smoothly-next-demo": HTMLSmoothlyNextDemoElement;
        "smoothly-next-demo-colspan": HTMLSmoothlyNextDemoColspanElement;
        "smoothly-next-demo-group": HTMLSmoothlyNextDemoGroupElement;
        "smoothly-next-demo-nested": HTMLSmoothlyNextDemoNestedElement;
        "smoothly-next-demo-nested-inner": HTMLSmoothlyNextDemoNestedInnerElement;
        "smoothly-next-demo-simple": HTMLSmoothlyNextDemoSimpleElement;
        "smoothly-next-table": HTMLSmoothlyNextTableElement;
        "smoothly-next-table-body": HTMLSmoothlyNextTableBodyElement;
        "smoothly-next-table-cell": HTMLSmoothlyNextTableCellElement;
        "smoothly-next-table-demo-filtered": HTMLSmoothlyNextTableDemoFilteredElement;
        "smoothly-next-table-expandable-cell": HTMLSmoothlyNextTableExpandableCellElement;
        "smoothly-next-table-expandable-row": HTMLSmoothlyNextTableExpandableRowElement;
        "smoothly-next-table-foot": HTMLSmoothlyNextTableFootElement;
        "smoothly-next-table-head": HTMLSmoothlyNextTableHeadElement;
        "smoothly-next-table-row": HTMLSmoothlyNextTableRowElement;
        "smoothly-next-table-row-group": HTMLSmoothlyNextTableRowGroupElement;
        "smoothly-notification": HTMLSmoothlyNotificationElement;
        "smoothly-notifier": HTMLSmoothlyNotifierElement;
        "smoothly-picker": HTMLSmoothlyPickerElement;
        "smoothly-picker-demo": HTMLSmoothlyPickerDemoElement;
        "smoothly-picker-menu": HTMLSmoothlyPickerMenuElement;
        "smoothly-picker-option": HTMLSmoothlyPickerOptionElement;
        "smoothly-slot-elements": HTMLSmoothlySlotElementsElement;
        "smoothly-slotted-elements": HTMLSmoothlySlottedElementsElement;
        "smoothly-spinner": HTMLSmoothlySpinnerElement;
        "smoothly-submit": HTMLSmoothlySubmitElement;
        "smoothly-summary": HTMLSmoothlySummaryElement;
        "smoothly-tab": HTMLSmoothlyTabElement;
        "smoothly-table": HTMLSmoothlyTableElement;
        "smoothly-table-cell": HTMLSmoothlyTableCellElement;
        "smoothly-table-demo": HTMLSmoothlyTableDemoElement;
        "smoothly-table-demo-filtered": HTMLSmoothlyTableDemoFilteredElement;
        "smoothly-table-expandable-cell": HTMLSmoothlyTableExpandableCellElement;
        "smoothly-table-expandable-row": HTMLSmoothlyTableExpandableRowElement;
        "smoothly-table-footer": HTMLSmoothlyTableFooterElement;
        "smoothly-table-header": HTMLSmoothlyTableHeaderElement;
        "smoothly-table-row": HTMLSmoothlyTableRowElement;
        "smoothly-table-testing": HTMLSmoothlyTableTestingElement;
        "smoothly-tabs": HTMLSmoothlyTabsElement;
        "smoothly-tabs-demo": HTMLSmoothlyTabsDemoElement;
        "smoothly-theme-color": HTMLSmoothlyThemeColorElement;
        "smoothly-theme-color-variant": HTMLSmoothlyThemeColorVariantElement;
        "smoothly-theme-colors": HTMLSmoothlyThemeColorsElement;
        "smoothly-theme-demo": HTMLSmoothlyThemeDemoElement;
        "smoothly-theme-guide": HTMLSmoothlyThemeGuideElement;
        "smoothly-theme-picker": HTMLSmoothlyThemePickerElement;
        "smoothly-toggle": HTMLSmoothlyToggleElement;
        "smoothly-toggle-switch": HTMLSmoothlyToggleSwitchElement;
        "smoothly-trigger": HTMLSmoothlyTriggerElement;
        "smoothly-trigger-sink": HTMLSmoothlyTriggerSinkElement;
        "smoothly-trigger-source": HTMLSmoothlyTriggerSourceElement;
    }
}
declare namespace LocalJSX {
    interface SmoothlyApp {
        "color"?: Color;
        "home"?: string;
        "label"?: string;
        "menuOpen"?: boolean;
    }
    interface SmoothlyAppDemo {
        "baseUrl"?: string;
    }
    interface SmoothlyAppRoom {
        "content"?: VNode | FunctionalComponent;
        "disabled"?: boolean;
        "icon"?: Icon;
        "label"?: string;
        "onSmoothlyRoomLoaded"?: (event: SmoothlyAppRoomCustomEvent<{ selected: boolean }>) => void;
        "onSmoothlyRoomSelected"?: (event: SmoothlyAppRoomCustomEvent<{ history: boolean }>) => void;
        "path"?: string | URLPattern;
        "selected"?: boolean;
    }
    interface SmoothlyBackToTop {
        "bottom"?: string;
        "opacity"?: string;
        "right"?: string;
    }
    interface SmoothlyBurger {
        "mediaQuery"?: string;
        "onSmoothlyNavStatus"?: (event: SmoothlyBurgerCustomEvent<boolean>) => void;
        "onSmoothlyVisibleStatus"?: (event: SmoothlyBurgerCustomEvent<boolean>) => void;
        "open"?: boolean;
        "visible"?: boolean;
    }
    interface SmoothlyButton {
        "color"?: Color;
        "disabled"?: boolean;
        "expand"?: "block" | "full";
        "fill"?: Fill;
        "link"?: string;
        "shape"?: "rounded";
        "size"?: "small" | "large" | "icon" | "flexible";
        "type"?: Button.Properties["type"];
    }
    interface SmoothlyButtonConfirm {
        "color"?: Color;
        "disabled"?: boolean;
        "doubleClickTime"?: number;
        "expand"?: "block" | "full";
        "fill"?: Fill;
        "name"?: string;
        "onSmoothlyConfirm"?: (event: SmoothlyButtonConfirmCustomEvent<Data>) => void;
        "onSmoothlyInputLoad"?: (event: SmoothlyButtonConfirmCustomEvent<(parent: HTMLElement) => void>) => void;
        "shape"?: "rounded";
        "size"?: "small" | "large" | "icon" | "flexible";
        "type"?: "link" | "button";
    }
    interface SmoothlyButtonDemo {
    }
    interface SmoothlyCalendar {
        "doubleInput"?: boolean;
        "end"?: Date;
        "max"?: Date;
        "min"?: Date;
        "month"?: Date;
        "onSmoothlyDateRangeSet"?: (event: SmoothlyCalendarCustomEvent<DateRange>) => void;
        "onSmoothlyDateSet"?: (event: SmoothlyCalendarCustomEvent<Date>) => void;
        "onSmoothlyEndChange"?: (event: SmoothlyCalendarCustomEvent<Date>) => void;
        "onSmoothlyStartChange"?: (event: SmoothlyCalendarCustomEvent<Date>) => void;
        "onSmoothlyValueChange"?: (event: SmoothlyCalendarCustomEvent<Date>) => void;
        "start"?: Date;
        "value"?: Date;
    }
    interface SmoothlyCheckbox {
        "checked"?: boolean;
        "disabled"?: boolean;
        "intermediate"?: boolean;
        "name"?: string;
        "onSmoothlyInput"?: (event: SmoothlyCheckboxCustomEvent<Record<string, any>>) => void;
        "size"?: "tiny" | "small" | "medium" | "large";
        "unavailable"?: boolean;
        "value"?: any;
    }
    interface SmoothlyColor {
        "color"?: Color;
    }
    interface SmoothlyCountry {
        "text"?: "alpha2" | "name" | "none";
        "value"?: CountryCode.Alpha2;
    }
    interface SmoothlyDialog {
        "closable"?: boolean;
        "color"?: Color | undefined;
        "header"?: string | undefined;
        "open"?: boolean;
    }
    interface SmoothlyDialogDemo {
    }
    interface SmoothlyDisplay {
        "country"?: CountryCode.Alpha2;
        "currency"?: Currency;
        "format"?: DateTime.Format;
        "label"?: string;
        "type"?: Type | "json";
        "value"?: any;
    }
    interface SmoothlyDisplayAmount {
        "amount"?: number | string;
        "currency"?: isoly.Currency;
        "toInteger"?: boolean;
    }
    interface SmoothlyDisplayDemo {
        "onNotice"?: (event: SmoothlyDisplayDemoCustomEvent<Notice>) => void;
    }
    interface SmoothlyDisplayJson {
        "value"?: any;
    }
    interface SmoothlyDisplayJsonArray {
        "open"?: boolean;
        "value"?: any[];
    }
    interface SmoothlyDisplayJsonPrimitive {
        "value"?: any;
    }
    interface SmoothlyDisplayJsonRecord {
        "open"?: boolean;
        "value"?: Record<string, any>;
    }
    interface SmoothlyDisplayJsonRecordKey {
        "value"?: any;
    }
    interface SmoothlyFilter {
        "onSmoothlyFilter"?: (event: SmoothlyFilterCustomEvent<selectively.Criteria>) => void;
    }
    interface SmoothlyFilterField {
        "criteria"?: selectively.Criteria;
        "onSmoothlyFilterField"?: (event: SmoothlyFilterFieldCustomEvent<selectively.Rule>) => void;
    }
    interface SmoothlyFilterInput {
        "label"?: string;
        "onSmoothlyFilterManipulate"?: (event: SmoothlyFilterInputCustomEvent<Filter.Manipulate>) => void;
        "onSmoothlyFilterUpdate"?: (event: SmoothlyFilterInputCustomEvent<Filter.Update>) => void;
        "placeholder"?: string;
        "property"?: string;
    }
    interface SmoothlyFilterSelect {
        "label"?: string;
        "looks"?: Looks;
        "multiple"?: boolean;
        "onSmoothlyFilterManipulate"?: (event: SmoothlyFilterSelectCustomEvent<Filter.Manipulate>) => void;
        "onSmoothlyFilterUpdate"?: (event: SmoothlyFilterSelectCustomEvent<Filter.Update>) => void;
        "onSmoothlyInputLooks"?: (event: SmoothlyFilterSelectCustomEvent<(looks: Looks) => void>) => void;
        "property"?: string;
        "type"?: "array" | "string";
    }
    interface SmoothlyFilterToggle {
        "active"?: boolean;
        "flip"?: boolean;
        "icon"?: Icon;
        "not"?: boolean;
        "onSmoothlyFilterManipulate"?: (event: SmoothlyFilterToggleCustomEvent<Filter.Manipulate>) => void;
        "onSmoothlyFilterUpdate"?: (event: SmoothlyFilterToggleCustomEvent<Filter.Update>) => void;
        "properties"?: Record<string, string>;
        "toolTip"?: string;
    }
    interface SmoothlyForm {
        "action"?: string;
        "changed"?: boolean;
        "color"?: Color;
        "looks"?: Looks;
        "name"?: string;
        "onNotice"?: (event: SmoothlyFormCustomEvent<Notice>) => void;
        "onSmoothlyFormClear"?: (event: SmoothlyFormCustomEvent<void>) => void;
        "onSmoothlyFormDisable"?: (event: SmoothlyFormCustomEvent<(disabled: boolean) => void>) => void;
        "onSmoothlyFormEdit"?: (event: SmoothlyFormCustomEvent<boolean>) => void;
        "onSmoothlyFormInput"?: (event: SmoothlyFormCustomEvent<Data>) => void;
        "onSmoothlyFormReset"?: (event: SmoothlyFormCustomEvent<void>) => void;
        "onSmoothlyFormSubmit"?: (event: SmoothlyFormCustomEvent<Submit>) => void;
        "prevent"?: boolean;
        "readonly"?: boolean;
        "type"?: "update" | "change" | "fetch" | "create";
        "value"?: Readonly<Data>;
    }
    interface SmoothlyFrame {
        "name"?: string;
        "onMessage2"?: (event: SmoothlyFrameCustomEvent<Message<any>>) => void;
        "onTrigger"?: (event: SmoothlyFrameCustomEvent<Trigger>) => void;
        "origin"?: string | undefined;
        "url"?: string;
    }
    interface SmoothlyIcon {
        "color"?: Color;
        "fill"?: Fill;
        "flip"?: "x" | "y";
        "name"?: Icon | "empty";
        "rotate"?: number;
        "size"?: "tiny" | "small" | "medium" | "large";
        "toolTip"?: string;
    }
    interface SmoothlyIconDemo {
    }
    interface SmoothlyInput {
        "autocomplete"?: boolean;
        "changed"?: boolean;
        "color"?: Color;
        "currency"?: isoly.Currency;
        "delay"?: number;
        "disabled"?: boolean;
        "looks"?: Looks;
        "name"?: string;
        "onSmoothlyBlur"?: (event: SmoothlyInputCustomEvent<void>) => void;
        "onSmoothlyChange"?: (event: SmoothlyInputCustomEvent<Record<string, any>>) => void;
        "onSmoothlyFormDisable"?: (event: SmoothlyInputCustomEvent<(disabled: boolean) => void>) => void;
        "onSmoothlyInput"?: (event: SmoothlyInputCustomEvent<Record<string, any>>) => void;
        "onSmoothlyInputLoad"?: (event: SmoothlyInputCustomEvent<(parent: HTMLElement) => void>) => void;
        "onSmoothlyInputLooks"?: (event: SmoothlyInputCustomEvent<(looks: Looks, color: Color) => void>) => void;
        "placeholder"?: string | undefined;
        "readonly"?: boolean;
        "required"?: boolean;
        "showLabel"?: boolean;
        "type"?: tidily.Type;
        "value"?: any;
    }
    interface SmoothlyInputCheckbox {
        "changed"?: boolean;
        "checked"?: boolean;
        "disabled"?: boolean;
        "looks"?: Looks;
        "name"?: string;
        "onSmoothlyFormDisable"?: (event: SmoothlyInputCheckboxCustomEvent<(disabled: boolean) => void>) => void;
        "onSmoothlyInput"?: (event: SmoothlyInputCheckboxCustomEvent<Data>) => void;
        "onSmoothlyInputLoad"?: (event: SmoothlyInputCheckboxCustomEvent<(parent: HTMLElement) => void>) => void;
        "onSmoothlyInputLooks"?: (event: SmoothlyInputCheckboxCustomEvent<(looks: Looks, color: Color) => void>) => void;
        "readonly"?: boolean;
        "value"?: boolean;
    }
    interface SmoothlyInputClear {
        "color"?: Color;
        "disabled"?: boolean;
        "display"?: boolean;
        "expand"?: "block" | "full";
        "fill"?: Fill;
        "onSmoothlyInputLoad"?: (event: SmoothlyInputClearCustomEvent<(parent: HTMLElement) => void>) => void;
        "shape"?: "rounded";
        "size"?: "small" | "large" | "icon" | "flexible";
        "type"?: "form" | "input";
    }
    interface SmoothlyInputColor {
        "looks"?: Looks;
        "name"?: string;
        "onSmoothlyInput"?: (event: SmoothlyInputColorCustomEvent<Record<string, any>>) => void;
        "onSmoothlyInputLoad"?: (event: SmoothlyInputColorCustomEvent<(parent: HTMLElement) => void>) => void;
        "onSmoothlyInputLooks"?: (event: SmoothlyInputColorCustomEvent<(looks: Looks, color: Color) => void>) => void;
        "value"?: string | undefined;
    }
    interface SmoothlyInputDate {
        "color"?: Color;
        "disabled"?: boolean;
        "looks"?: Looks;
        "max"?: Date;
        "min"?: Date;
        "name"?: string;
        "onSmoothlyInput"?: (event: SmoothlyInputDateCustomEvent<Record<string, any>>) => void;
        "onSmoothlyInputLoad"?: (event: SmoothlyInputDateCustomEvent<(parent: HTMLElement) => void>) => void;
        "onSmoothlyInputLooks"?: (event: SmoothlyInputDateCustomEvent<(looks: Looks, color: Color) => void>) => void;
        "onSmoothlyValueChange"?: (event: SmoothlyInputDateCustomEvent<Date>) => void;
        "open"?: boolean;
        "showLabel"?: boolean;
        "value"?: Date;
    }
    interface SmoothlyInputDateRange {
        "changed"?: boolean;
        "color"?: Color;
        "end"?: isoly.Date | undefined;
        "looks"?: Looks;
        "max"?: isoly.Date;
        "min"?: isoly.Date;
        "name"?: string;
        "onSmoothlyFormDisable"?: (event: SmoothlyInputDateRangeCustomEvent<(disabled: boolean) => void>) => void;
        "onSmoothlyInput"?: (event: SmoothlyInputDateRangeCustomEvent<{ [name: string]: isoly.DateRange | undefined }>) => void;
        "onSmoothlyInputLoad"?: (event: SmoothlyInputDateRangeCustomEvent<(parent: HTMLElement) => void>) => void;
        "onSmoothlyInputLooks"?: (event: SmoothlyInputDateRangeCustomEvent<(looks: Looks, color: Color) => void>) => void;
        "placeholder"?: string;
        "readonly"?: boolean;
        "showLabel"?: boolean;
        "start"?: isoly.Date | undefined;
    }
    interface SmoothlyInputDemo {
    }
    interface SmoothlyInputDemoControlledForm {
    }
    interface SmoothlyInputEdit {
        "color"?: Color;
        "disabled"?: boolean;
        "display"?: boolean;
        "expand"?: "block" | "full";
        "fill"?: Fill;
        "onSmoothlyInputLoad"?: (event: SmoothlyInputEditCustomEvent<(parent: HTMLElement) => void>) => void;
        "shape"?: "rounded";
        "size"?: "flexible" | "small" | "large" | "icon";
        "toolTip"?: string;
        "type"?: "link" | "button";
    }
    interface SmoothlyInputFile {
        "accept"?: string;
        "camera"?: "front" | "back";
        "changed"?: boolean;
        "color"?: Color;
        "looks"?: Looks;
        "name"?: string;
        "onSmoothlyFormDisable"?: (event: SmoothlyInputFileCustomEvent<(disabled: boolean) => void>) => void;
        "onSmoothlyInput"?: (event: SmoothlyInputFileCustomEvent<Record<string, any>>) => void;
        "onSmoothlyInputLoad"?: (event: SmoothlyInputFileCustomEvent<(parent: HTMLElement) => void>) => void;
        "onSmoothlyInputLooks"?: (event: SmoothlyInputFileCustomEvent<(looks: Looks, color: Color) => void>) => void;
        "placeholder"?: string | undefined;
        "readonly"?: boolean;
        "showLabel"?: boolean;
        "value"?: File;
    }
    interface SmoothlyInputMonth {
        "color"?: Color;
        "inCalendar"?: boolean;
        "looks"?: Looks;
        "name"?: string;
        "next"?: boolean;
        "onSmoothlyFormDisable"?: (event: SmoothlyInputMonthCustomEvent<(disabled: boolean) => void>) => void;
        "onSmoothlyInput"?: (event: SmoothlyInputMonthCustomEvent<Data>) => void;
        "onSmoothlyInputLoad"?: (event: SmoothlyInputMonthCustomEvent<(parent: HTMLElement) => void>) => void;
        "onSmoothlyInputLooks"?: (event: SmoothlyInputMonthCustomEvent<(looks: Looks, color: Color) => void>) => void;
        "previous"?: boolean;
        "readonly"?: boolean;
        "value"?: isoly.Date;
    }
    interface SmoothlyInputRadio {
        "changed"?: boolean;
        "clearable"?: boolean;
        "looks"?: Looks;
        "name"?: string;
        "onSmoothlyFormDisable"?: (event: SmoothlyInputRadioCustomEvent<(disabled: boolean) => void>) => void;
        "onSmoothlyInput"?: (event: SmoothlyInputRadioCustomEvent<Data>) => void;
        "onSmoothlyInputLoad"?: (event: SmoothlyInputRadioCustomEvent<(parent: HTMLElement) => void>) => void;
        "onSmoothlyInputLooks"?: (event: SmoothlyInputRadioCustomEvent<(looks: Looks, color: Color) => void>) => void;
        "readonly"?: boolean;
        "value"?: any;
    }
    interface SmoothlyInputRadioItem {
        "looks"?: Looks;
        "name"?: string;
        "onSmoothlyRadioButtonRegister"?: (event: SmoothlyInputRadioItemCustomEvent<(name: string) => void>) => void;
        "onSmoothlySelect"?: (event: SmoothlyInputRadioItemCustomEvent<Selectable>) => void;
        "selected"?: boolean;
        "value"?: any;
    }
    interface SmoothlyInputRange {
        "changed"?: boolean;
        "labelText"?: string;
        "looks"?: Looks;
        "max"?: number;
        "min"?: number;
        "name"?: string;
        "onSmoothlyFormDisable"?: (event: SmoothlyInputRangeCustomEvent<(disabled: boolean) => void>) => void;
        "onSmoothlyInput"?: (event: SmoothlyInputRangeCustomEvent<Record<string, any>>) => void;
        "onSmoothlyInputLoad"?: (event: SmoothlyInputRangeCustomEvent<(parent: HTMLElement) => void>) => void;
        "onSmoothlyInputLooks"?: (event: SmoothlyInputRangeCustomEvent<(looks: Looks, color: Color) => void>) => void;
        "outputSide"?: "right" | "left";
        "readonly"?: boolean;
        "step"?: number | "any";
        "value"?: number | undefined;
    }
    interface SmoothlyInputReset {
        "color"?: Color;
        "disabled"?: boolean;
        "display"?: boolean;
        "expand"?: "block" | "full";
        "fill"?: Fill;
        "onSmoothlyInputLoad"?: (event: SmoothlyInputResetCustomEvent<(parent: HTMLElement) => void>) => void;
        "shape"?: "rounded";
        "size"?: "small" | "large" | "icon" | "flexible";
        "tooltip"?: string;
        "type"?: "form" | "input";
    }
    interface SmoothlyInputSelect {
        "changed"?: boolean;
        "clearable"?: boolean;
        "color"?: Color;
        "defined"?: boolean;
        "inCalendar"?: boolean;
        "looks"?: Looks;
        "menuHeight"?: `${number}${"items" | "rem" | "px" | "vh"}`;
        "multiple"?: boolean;
        "name"?: string;
        "onSmoothlyFormDisable"?: (event: SmoothlyInputSelectCustomEvent<(disabled: boolean) => void>) => void;
        "onSmoothlyInput"?: (event: SmoothlyInputSelectCustomEvent<Data>) => void;
        "onSmoothlyInputLoad"?: (event: SmoothlyInputSelectCustomEvent<(parent: HTMLElement) => void>) => void;
        "onSmoothlyInputLooks"?: (event: SmoothlyInputSelectCustomEvent<(looks: Looks, color: Color) => void>) => void;
        "onSmoothlyItemSelect"?: (event: SmoothlyInputSelectCustomEvent<HTMLSmoothlyItemElement>) => void;
        "placeholder"?: string | any;
        "readonly"?: boolean;
        "required"?: boolean;
        "searchDisabled"?: boolean;
        "showSelected"?: boolean;
    }
    interface SmoothlyInputSubmit {
        "color"?: Color;
        "delete"?: boolean;
        "disabled"?: boolean;
        "display"?: boolean;
        "expand"?: "block" | "full";
        "fill"?: Fill;
        "onSmoothlyInputLoad"?: (event: SmoothlyInputSubmitCustomEvent<(parent: HTMLElement) => void>) => void;
        "shape"?: "rounded";
        "size"?: "flexible" | "small" | "large" | "icon";
        "toolTip"?: string;
        "type"?: "link" | "button";
    }
    interface SmoothlyItem {
        "deselectable"?: boolean;
        "marked"?: boolean;
        "onSmoothlyInputLoad"?: (event: SmoothlyItemCustomEvent<(parent: HTMLElement) => void>) => void;
        "onSmoothlyItemSelect"?: (event: SmoothlyItemCustomEvent<HTMLSmoothlyItemElement>) => void;
        "selectable"?: boolean;
        "selected"?: boolean;
        "value"?: any;
    }
    interface SmoothlyLabel {
        "description"?: string;
        "hue"?: number;
        "shape"?: "rectangle" | "rounded";
    }
    interface SmoothlyLazy {
        "content"?: VNode | FunctionalComponent;
        "show"?: boolean;
    }
    interface SmoothlyLoadMore {
        "multiple"?: boolean;
        "name"?: string;
        "offset"?: string;
        "onSmoothlyLoadMore"?: (event: SmoothlyLoadMoreCustomEvent<string>) => void;
    }
    interface SmoothlyNextDemo {
    }
    interface SmoothlyNextDemoColspan {
    }
    interface SmoothlyNextDemoGroup {
    }
    interface SmoothlyNextDemoNested {
    }
    interface SmoothlyNextDemoNestedInner {
        "data"?: {
		id: number
		name: string
		age: number
		balance: number
	}[];
    }
    interface SmoothlyNextDemoSimple {
    }
    interface SmoothlyNextTable {
        "columns"?: number;
    }
    interface SmoothlyNextTableBody {
    }
    interface SmoothlyNextTableCell {
        "span"?: number;
    }
    interface SmoothlyNextTableDemoFiltered {
    }
    interface SmoothlyNextTableExpandableCell {
        "onSmoothlyNextTableExpandableCellOpened"?: (event: SmoothlyNextTableExpandableCellCustomEvent<void>) => void;
        "onSmoothlyNextTableExpandableCellRegister"?: (event: SmoothlyNextTableExpandableCellCustomEvent<void>) => void;
        "open"?: boolean;
        "span"?: number;
    }
    interface SmoothlyNextTableExpandableRow {
        "open"?: boolean;
    }
    interface SmoothlyNextTableFoot {
    }
    interface SmoothlyNextTableHead {
    }
    interface SmoothlyNextTableRow {
    }
    interface SmoothlyNextTableRowGroup {
        "align"?: boolean;
        "open"?: boolean;
    }
    interface SmoothlyNotification {
        "closable"?: boolean;
        "icon"?: boolean;
        "notice"?: Notice;
        "onRemove"?: (event: SmoothlyNotificationCustomEvent<Notice>) => void;
    }
    interface SmoothlyNotifier {
        "icon"?: boolean;
    }
    interface SmoothlyPicker {
        "changed"?: boolean;
        "looks"?: Looks;
        "multiple"?: boolean;
        "mutable"?: boolean;
        "name"?: string;
        "onSmoothlyChange"?: (event: SmoothlyPickerCustomEvent<Record<string, any | any[]>>) => void;
        "onSmoothlyFormDisable"?: (event: SmoothlyPickerCustomEvent<(disabled: boolean) => void>) => void;
        "onSmoothlyInput"?: (event: SmoothlyPickerCustomEvent<Record<string, any | any[]>>) => void;
        "onSmoothlyInputLoad"?: (event: SmoothlyPickerCustomEvent<(parent: HTMLElement) => void>) => void;
        "onSmoothlyInputLooks"?: (event: SmoothlyPickerCustomEvent<(looks: Looks) => void>) => void;
        "onSmoothlyPickerLoaded"?: (event: SmoothlyPickerCustomEvent<Controls>) => void;
        "open"?: boolean;
        "readonly"?: boolean;
        "validator"?: (value: string) => boolean | { result: boolean; notice: Notice };
    }
    interface SmoothlyPickerDemo {
    }
    interface SmoothlyPickerMenu {
        "looks"?: Looks;
        "multiple"?: boolean;
        "mutable"?: boolean;
        "onNotice"?: (event: SmoothlyPickerMenuCustomEvent<Notice>) => void;
        "onSmoothlyPickerMenuLoaded"?: (event: SmoothlyPickerMenuCustomEvent<Controls1>) => void;
        "open"?: boolean;
        "readonly"?: boolean;
        "validator"?: (value: string) => boolean | { result: boolean; notice: Notice };
    }
    interface SmoothlyPickerOption {
        "onSmoothlyPickerOptionChange"?: (event: SmoothlyPickerOptionCustomEvent<Option>) => void;
        "onSmoothlyPickerOptionLoad"?: (event: SmoothlyPickerOptionCustomEvent<Option.Load>) => void;
        "onSmoothlyPickerOptionLoaded"?: (event: SmoothlyPickerOptionCustomEvent<Option>) => void;
        "position"?: number;
        "required"?: boolean;
        "search"?: string[];
        "selected"?: boolean;
        "value"?: any;
        "visible"?: boolean;
    }
    interface SmoothlySlotElements {
        "clone"?: boolean;
        "nodes"?: Node | Node[];
        "onSmoothlySlotEmpty"?: (event: SmoothlySlotElementsCustomEvent<Slot>) => void;
    }
    interface SmoothlySlottedElements {
        "clone"?: boolean;
        "onSmoothlySlottedChange"?: (event: SmoothlySlottedElementsCustomEvent<Node[]>) => void;
    }
    interface SmoothlySpinner {
        "overlay"?: boolean;
        "size"?: "small" | "icon" | "medium" | "large";
    }
    interface SmoothlySubmit {
        "color"?: Color;
        "disabled"?: boolean;
        "expand"?: "block" | "full";
        "fill"?: Fill;
        "onSmoothlyInputLoad"?: (event: SmoothlySubmitCustomEvent<(parent: HTMLElement) => void>) => void;
        "prevent"?: boolean;
        "shape"?: "rounded";
        "size"?: "flexible" | "small" | "large" | "icon";
        "type"?: "link" | "button";
    }
    interface SmoothlySummary {
        "color"?: Color;
        "fill"?: Fill;
        "onSmoothlySummaryOpen"?: (event: SmoothlySummaryCustomEvent<boolean>) => void;
        "open"?: boolean;
        "size"?: "tiny" | "small" | "medium" | "large";
    }
    interface SmoothlyTab {
        "label"?: string;
        "onExpansionOpen"?: (event: SmoothlyTabCustomEvent<HTMLDivElement>) => void;
        "open"?: boolean;
    }
    interface SmoothlyTable {
        "align"?: "middle" | "bottom" | "top";
        "color"?: Color;
        "onSmoothlyNestedTable"?: (event: SmoothlyTableCustomEvent<() => void>) => void;
        "onSmoothlySpotlightChange"?: (event: SmoothlyTableCustomEvent<{ allowSpotlight: boolean; owner?: EventTarget }>) => void;
        "onSmoothlyTableLoad"?: (event: SmoothlyTableCustomEvent<(owner: EventTarget) => void>) => void;
        "open"?: boolean;
        "root"?: boolean;
    }
    interface SmoothlyTableCell {
    }
    interface SmoothlyTableDemo {
    }
    interface SmoothlyTableDemoFiltered {
    }
    interface SmoothlyTableExpandableCell {
        "onSmoothlyExpandableChange"?: (event: SmoothlyTableExpandableCellCustomEvent<boolean>) => void;
        "onSmoothlyExpandableLoad"?: (event: SmoothlyTableExpandableCellCustomEvent<{ allowSpotlight: (allowed: boolean) => void }>) => void;
        "onSmoothlyExpansionLoad"?: (event: SmoothlyTableExpandableCellCustomEvent<void>) => void;
        "onSmoothlyExpansionOpen"?: (event: SmoothlyTableExpandableCellCustomEvent<HTMLElement>) => void;
        "open"?: boolean;
    }
    interface SmoothlyTableExpandableRow {
        "onSmoothlyExpandableChange"?: (event: SmoothlyTableExpandableRowCustomEvent<boolean>) => void;
        "onSmoothlyExpandableLoad"?: (event: SmoothlyTableExpandableRowCustomEvent<{ allowSpotlight: (allowed: boolean) => void }>) => void;
        "onSmoothlyExpansionOpen"?: (event: SmoothlyTableExpandableRowCustomEvent<HTMLElement>) => void;
        "open"?: boolean;
    }
    interface SmoothlyTableFooter {
    }
    interface SmoothlyTableHeader {
        "name"?: string;
    }
    interface SmoothlyTableRow {
        "open"?: boolean;
    }
    interface SmoothlyTableTesting {
    }
    interface SmoothlyTabs {
        "onSelectedTab"?: (event: SmoothlyTabsCustomEvent<string>) => void;
    }
    interface SmoothlyTabsDemo {
    }
    interface SmoothlyThemeColor {
        "color"?: Color;
    }
    interface SmoothlyThemeColorVariant {
        "color"?: Color;
        "variant"?: "shade" | "tint" | "color";
    }
    interface SmoothlyThemeColors {
    }
    interface SmoothlyThemeDemo {
    }
    interface SmoothlyThemeGuide {
    }
    interface SmoothlyThemePicker {
        "element"?: string;
    }
    interface SmoothlyToggle {
        "disabled"?: boolean;
        "name"?: string;
        "selected"?: boolean;
        "shape"?: "rounded";
        "value"?: any;
    }
    interface SmoothlyToggleSwitch {
        "checkmark"?: boolean;
        "color"?: Color;
        "disabled"?: boolean;
        "fill"?: Fill;
        "onSmoothlyToggleSwitchChange"?: (event: SmoothlyToggleSwitchCustomEvent<boolean>) => void;
        "selected"?: boolean;
        "size"?: "small" | "default" | "large";
    }
    interface SmoothlyTrigger {
        "color"?: Color | undefined;
        "disabled"?: boolean;
        "fill"?: Fill;
        "name"?: string;
        "onTrigger"?: (event: SmoothlyTriggerCustomEvent<Trigger>) => void;
        "type"?: "link" | "button";
        "value"?: any;
    }
    interface SmoothlyTriggerSink {
        "context"?: Window;
        "destination"?: string;
        "filter"?: string;
    }
    interface SmoothlyTriggerSource {
        "listen"?: string;
        "onSmoothlyMessage"?: (event: SmoothlyTriggerSourceCustomEvent<Message<any>>) => void;
        "onTrigger"?: (event: SmoothlyTriggerSourceCustomEvent<Trigger>) => void;
    }
    interface IntrinsicElements {
        "smoothly-app": SmoothlyApp;
        "smoothly-app-demo": SmoothlyAppDemo;
        "smoothly-app-room": SmoothlyAppRoom;
        "smoothly-back-to-top": SmoothlyBackToTop;
        "smoothly-burger": SmoothlyBurger;
        "smoothly-button": SmoothlyButton;
        "smoothly-button-confirm": SmoothlyButtonConfirm;
        "smoothly-button-demo": SmoothlyButtonDemo;
        "smoothly-calendar": SmoothlyCalendar;
        "smoothly-checkbox": SmoothlyCheckbox;
        "smoothly-color": SmoothlyColor;
        "smoothly-country": SmoothlyCountry;
        "smoothly-dialog": SmoothlyDialog;
        "smoothly-dialog-demo": SmoothlyDialogDemo;
        "smoothly-display": SmoothlyDisplay;
        "smoothly-display-amount": SmoothlyDisplayAmount;
        "smoothly-display-demo": SmoothlyDisplayDemo;
        "smoothly-display-json": SmoothlyDisplayJson;
        "smoothly-display-json-array": SmoothlyDisplayJsonArray;
        "smoothly-display-json-primitive": SmoothlyDisplayJsonPrimitive;
        "smoothly-display-json-record": SmoothlyDisplayJsonRecord;
        "smoothly-display-json-record-key": SmoothlyDisplayJsonRecordKey;
        "smoothly-filter": SmoothlyFilter;
        "smoothly-filter-field": SmoothlyFilterField;
        "smoothly-filter-input": SmoothlyFilterInput;
        "smoothly-filter-select": SmoothlyFilterSelect;
        "smoothly-filter-toggle": SmoothlyFilterToggle;
        "smoothly-form": SmoothlyForm;
        "smoothly-frame": SmoothlyFrame;
        "smoothly-icon": SmoothlyIcon;
        "smoothly-icon-demo": SmoothlyIconDemo;
        "smoothly-input": SmoothlyInput;
        "smoothly-input-checkbox": SmoothlyInputCheckbox;
        "smoothly-input-clear": SmoothlyInputClear;
        "smoothly-input-color": SmoothlyInputColor;
        "smoothly-input-date": SmoothlyInputDate;
        "smoothly-input-date-range": SmoothlyInputDateRange;
        "smoothly-input-demo": SmoothlyInputDemo;
        "smoothly-input-demo-controlled-form": SmoothlyInputDemoControlledForm;
        "smoothly-input-edit": SmoothlyInputEdit;
        "smoothly-input-file": SmoothlyInputFile;
        "smoothly-input-month": SmoothlyInputMonth;
        "smoothly-input-radio": SmoothlyInputRadio;
        "smoothly-input-radio-item": SmoothlyInputRadioItem;
        "smoothly-input-range": SmoothlyInputRange;
        "smoothly-input-reset": SmoothlyInputReset;
        "smoothly-input-select": SmoothlyInputSelect;
        "smoothly-input-submit": SmoothlyInputSubmit;
        "smoothly-item": SmoothlyItem;
        "smoothly-label": SmoothlyLabel;
        "smoothly-lazy": SmoothlyLazy;
        "smoothly-load-more": SmoothlyLoadMore;
        "smoothly-next-demo": SmoothlyNextDemo;
        "smoothly-next-demo-colspan": SmoothlyNextDemoColspan;
        "smoothly-next-demo-group": SmoothlyNextDemoGroup;
        "smoothly-next-demo-nested": SmoothlyNextDemoNested;
        "smoothly-next-demo-nested-inner": SmoothlyNextDemoNestedInner;
        "smoothly-next-demo-simple": SmoothlyNextDemoSimple;
        "smoothly-next-table": SmoothlyNextTable;
        "smoothly-next-table-body": SmoothlyNextTableBody;
        "smoothly-next-table-cell": SmoothlyNextTableCell;
        "smoothly-next-table-demo-filtered": SmoothlyNextTableDemoFiltered;
        "smoothly-next-table-expandable-cell": SmoothlyNextTableExpandableCell;
        "smoothly-next-table-expandable-row": SmoothlyNextTableExpandableRow;
        "smoothly-next-table-foot": SmoothlyNextTableFoot;
        "smoothly-next-table-head": SmoothlyNextTableHead;
        "smoothly-next-table-row": SmoothlyNextTableRow;
        "smoothly-next-table-row-group": SmoothlyNextTableRowGroup;
        "smoothly-notification": SmoothlyNotification;
        "smoothly-notifier": SmoothlyNotifier;
        "smoothly-picker": SmoothlyPicker;
        "smoothly-picker-demo": SmoothlyPickerDemo;
        "smoothly-picker-menu": SmoothlyPickerMenu;
        "smoothly-picker-option": SmoothlyPickerOption;
        "smoothly-slot-elements": SmoothlySlotElements;
        "smoothly-slotted-elements": SmoothlySlottedElements;
        "smoothly-spinner": SmoothlySpinner;
        "smoothly-submit": SmoothlySubmit;
        "smoothly-summary": SmoothlySummary;
        "smoothly-tab": SmoothlyTab;
        "smoothly-table": SmoothlyTable;
        "smoothly-table-cell": SmoothlyTableCell;
        "smoothly-table-demo": SmoothlyTableDemo;
        "smoothly-table-demo-filtered": SmoothlyTableDemoFiltered;
        "smoothly-table-expandable-cell": SmoothlyTableExpandableCell;
        "smoothly-table-expandable-row": SmoothlyTableExpandableRow;
        "smoothly-table-footer": SmoothlyTableFooter;
        "smoothly-table-header": SmoothlyTableHeader;
        "smoothly-table-row": SmoothlyTableRow;
        "smoothly-table-testing": SmoothlyTableTesting;
        "smoothly-tabs": SmoothlyTabs;
        "smoothly-tabs-demo": SmoothlyTabsDemo;
        "smoothly-theme-color": SmoothlyThemeColor;
        "smoothly-theme-color-variant": SmoothlyThemeColorVariant;
        "smoothly-theme-colors": SmoothlyThemeColors;
        "smoothly-theme-demo": SmoothlyThemeDemo;
        "smoothly-theme-guide": SmoothlyThemeGuide;
        "smoothly-theme-picker": SmoothlyThemePicker;
        "smoothly-toggle": SmoothlyToggle;
        "smoothly-toggle-switch": SmoothlyToggleSwitch;
        "smoothly-trigger": SmoothlyTrigger;
        "smoothly-trigger-sink": SmoothlyTriggerSink;
        "smoothly-trigger-source": SmoothlyTriggerSource;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "smoothly-app": LocalJSX.SmoothlyApp & JSXBase.HTMLAttributes<HTMLSmoothlyAppElement>;
            "smoothly-app-demo": LocalJSX.SmoothlyAppDemo & JSXBase.HTMLAttributes<HTMLSmoothlyAppDemoElement>;
            "smoothly-app-room": LocalJSX.SmoothlyAppRoom & JSXBase.HTMLAttributes<HTMLSmoothlyAppRoomElement>;
            "smoothly-back-to-top": LocalJSX.SmoothlyBackToTop & JSXBase.HTMLAttributes<HTMLSmoothlyBackToTopElement>;
            "smoothly-burger": LocalJSX.SmoothlyBurger & JSXBase.HTMLAttributes<HTMLSmoothlyBurgerElement>;
            "smoothly-button": LocalJSX.SmoothlyButton & JSXBase.HTMLAttributes<HTMLSmoothlyButtonElement>;
            "smoothly-button-confirm": LocalJSX.SmoothlyButtonConfirm & JSXBase.HTMLAttributes<HTMLSmoothlyButtonConfirmElement>;
            "smoothly-button-demo": LocalJSX.SmoothlyButtonDemo & JSXBase.HTMLAttributes<HTMLSmoothlyButtonDemoElement>;
            "smoothly-calendar": LocalJSX.SmoothlyCalendar & JSXBase.HTMLAttributes<HTMLSmoothlyCalendarElement>;
            "smoothly-checkbox": LocalJSX.SmoothlyCheckbox & JSXBase.HTMLAttributes<HTMLSmoothlyCheckboxElement>;
            "smoothly-color": LocalJSX.SmoothlyColor & JSXBase.HTMLAttributes<HTMLSmoothlyColorElement>;
            "smoothly-country": LocalJSX.SmoothlyCountry & JSXBase.HTMLAttributes<HTMLSmoothlyCountryElement>;
            "smoothly-dialog": LocalJSX.SmoothlyDialog & JSXBase.HTMLAttributes<HTMLSmoothlyDialogElement>;
            "smoothly-dialog-demo": LocalJSX.SmoothlyDialogDemo & JSXBase.HTMLAttributes<HTMLSmoothlyDialogDemoElement>;
            "smoothly-display": LocalJSX.SmoothlyDisplay & JSXBase.HTMLAttributes<HTMLSmoothlyDisplayElement>;
            "smoothly-display-amount": LocalJSX.SmoothlyDisplayAmount & JSXBase.HTMLAttributes<HTMLSmoothlyDisplayAmountElement>;
            "smoothly-display-demo": LocalJSX.SmoothlyDisplayDemo & JSXBase.HTMLAttributes<HTMLSmoothlyDisplayDemoElement>;
            "smoothly-display-json": LocalJSX.SmoothlyDisplayJson & JSXBase.HTMLAttributes<HTMLSmoothlyDisplayJsonElement>;
            "smoothly-display-json-array": LocalJSX.SmoothlyDisplayJsonArray & JSXBase.HTMLAttributes<HTMLSmoothlyDisplayJsonArrayElement>;
            "smoothly-display-json-primitive": LocalJSX.SmoothlyDisplayJsonPrimitive & JSXBase.HTMLAttributes<HTMLSmoothlyDisplayJsonPrimitiveElement>;
            "smoothly-display-json-record": LocalJSX.SmoothlyDisplayJsonRecord & JSXBase.HTMLAttributes<HTMLSmoothlyDisplayJsonRecordElement>;
            "smoothly-display-json-record-key": LocalJSX.SmoothlyDisplayJsonRecordKey & JSXBase.HTMLAttributes<HTMLSmoothlyDisplayJsonRecordKeyElement>;
            "smoothly-filter": LocalJSX.SmoothlyFilter & JSXBase.HTMLAttributes<HTMLSmoothlyFilterElement>;
            "smoothly-filter-field": LocalJSX.SmoothlyFilterField & JSXBase.HTMLAttributes<HTMLSmoothlyFilterFieldElement>;
            "smoothly-filter-input": LocalJSX.SmoothlyFilterInput & JSXBase.HTMLAttributes<HTMLSmoothlyFilterInputElement>;
            "smoothly-filter-select": LocalJSX.SmoothlyFilterSelect & JSXBase.HTMLAttributes<HTMLSmoothlyFilterSelectElement>;
            "smoothly-filter-toggle": LocalJSX.SmoothlyFilterToggle & JSXBase.HTMLAttributes<HTMLSmoothlyFilterToggleElement>;
            "smoothly-form": LocalJSX.SmoothlyForm & JSXBase.HTMLAttributes<HTMLSmoothlyFormElement>;
            "smoothly-frame": LocalJSX.SmoothlyFrame & JSXBase.HTMLAttributes<HTMLSmoothlyFrameElement>;
            "smoothly-icon": LocalJSX.SmoothlyIcon & JSXBase.HTMLAttributes<HTMLSmoothlyIconElement>;
            "smoothly-icon-demo": LocalJSX.SmoothlyIconDemo & JSXBase.HTMLAttributes<HTMLSmoothlyIconDemoElement>;
            "smoothly-input": LocalJSX.SmoothlyInput & JSXBase.HTMLAttributes<HTMLSmoothlyInputElement>;
            "smoothly-input-checkbox": LocalJSX.SmoothlyInputCheckbox & JSXBase.HTMLAttributes<HTMLSmoothlyInputCheckboxElement>;
            "smoothly-input-clear": LocalJSX.SmoothlyInputClear & JSXBase.HTMLAttributes<HTMLSmoothlyInputClearElement>;
            "smoothly-input-color": LocalJSX.SmoothlyInputColor & JSXBase.HTMLAttributes<HTMLSmoothlyInputColorElement>;
            "smoothly-input-date": LocalJSX.SmoothlyInputDate & JSXBase.HTMLAttributes<HTMLSmoothlyInputDateElement>;
            "smoothly-input-date-range": LocalJSX.SmoothlyInputDateRange & JSXBase.HTMLAttributes<HTMLSmoothlyInputDateRangeElement>;
            "smoothly-input-demo": LocalJSX.SmoothlyInputDemo & JSXBase.HTMLAttributes<HTMLSmoothlyInputDemoElement>;
            "smoothly-input-demo-controlled-form": LocalJSX.SmoothlyInputDemoControlledForm & JSXBase.HTMLAttributes<HTMLSmoothlyInputDemoControlledFormElement>;
            "smoothly-input-edit": LocalJSX.SmoothlyInputEdit & JSXBase.HTMLAttributes<HTMLSmoothlyInputEditElement>;
            "smoothly-input-file": LocalJSX.SmoothlyInputFile & JSXBase.HTMLAttributes<HTMLSmoothlyInputFileElement>;
            "smoothly-input-month": LocalJSX.SmoothlyInputMonth & JSXBase.HTMLAttributes<HTMLSmoothlyInputMonthElement>;
            "smoothly-input-radio": LocalJSX.SmoothlyInputRadio & JSXBase.HTMLAttributes<HTMLSmoothlyInputRadioElement>;
            "smoothly-input-radio-item": LocalJSX.SmoothlyInputRadioItem & JSXBase.HTMLAttributes<HTMLSmoothlyInputRadioItemElement>;
            "smoothly-input-range": LocalJSX.SmoothlyInputRange & JSXBase.HTMLAttributes<HTMLSmoothlyInputRangeElement>;
            "smoothly-input-reset": LocalJSX.SmoothlyInputReset & JSXBase.HTMLAttributes<HTMLSmoothlyInputResetElement>;
            "smoothly-input-select": LocalJSX.SmoothlyInputSelect & JSXBase.HTMLAttributes<HTMLSmoothlyInputSelectElement>;
            "smoothly-input-submit": LocalJSX.SmoothlyInputSubmit & JSXBase.HTMLAttributes<HTMLSmoothlyInputSubmitElement>;
            "smoothly-item": LocalJSX.SmoothlyItem & JSXBase.HTMLAttributes<HTMLSmoothlyItemElement>;
            "smoothly-label": LocalJSX.SmoothlyLabel & JSXBase.HTMLAttributes<HTMLSmoothlyLabelElement>;
            "smoothly-lazy": LocalJSX.SmoothlyLazy & JSXBase.HTMLAttributes<HTMLSmoothlyLazyElement>;
            "smoothly-load-more": LocalJSX.SmoothlyLoadMore & JSXBase.HTMLAttributes<HTMLSmoothlyLoadMoreElement>;
            "smoothly-next-demo": LocalJSX.SmoothlyNextDemo & JSXBase.HTMLAttributes<HTMLSmoothlyNextDemoElement>;
            "smoothly-next-demo-colspan": LocalJSX.SmoothlyNextDemoColspan & JSXBase.HTMLAttributes<HTMLSmoothlyNextDemoColspanElement>;
            "smoothly-next-demo-group": LocalJSX.SmoothlyNextDemoGroup & JSXBase.HTMLAttributes<HTMLSmoothlyNextDemoGroupElement>;
            "smoothly-next-demo-nested": LocalJSX.SmoothlyNextDemoNested & JSXBase.HTMLAttributes<HTMLSmoothlyNextDemoNestedElement>;
            "smoothly-next-demo-nested-inner": LocalJSX.SmoothlyNextDemoNestedInner & JSXBase.HTMLAttributes<HTMLSmoothlyNextDemoNestedInnerElement>;
            "smoothly-next-demo-simple": LocalJSX.SmoothlyNextDemoSimple & JSXBase.HTMLAttributes<HTMLSmoothlyNextDemoSimpleElement>;
            "smoothly-next-table": LocalJSX.SmoothlyNextTable & JSXBase.HTMLAttributes<HTMLSmoothlyNextTableElement>;
            "smoothly-next-table-body": LocalJSX.SmoothlyNextTableBody & JSXBase.HTMLAttributes<HTMLSmoothlyNextTableBodyElement>;
            "smoothly-next-table-cell": LocalJSX.SmoothlyNextTableCell & JSXBase.HTMLAttributes<HTMLSmoothlyNextTableCellElement>;
            "smoothly-next-table-demo-filtered": LocalJSX.SmoothlyNextTableDemoFiltered & JSXBase.HTMLAttributes<HTMLSmoothlyNextTableDemoFilteredElement>;
            "smoothly-next-table-expandable-cell": LocalJSX.SmoothlyNextTableExpandableCell & JSXBase.HTMLAttributes<HTMLSmoothlyNextTableExpandableCellElement>;
            "smoothly-next-table-expandable-row": LocalJSX.SmoothlyNextTableExpandableRow & JSXBase.HTMLAttributes<HTMLSmoothlyNextTableExpandableRowElement>;
            "smoothly-next-table-foot": LocalJSX.SmoothlyNextTableFoot & JSXBase.HTMLAttributes<HTMLSmoothlyNextTableFootElement>;
            "smoothly-next-table-head": LocalJSX.SmoothlyNextTableHead & JSXBase.HTMLAttributes<HTMLSmoothlyNextTableHeadElement>;
            "smoothly-next-table-row": LocalJSX.SmoothlyNextTableRow & JSXBase.HTMLAttributes<HTMLSmoothlyNextTableRowElement>;
            "smoothly-next-table-row-group": LocalJSX.SmoothlyNextTableRowGroup & JSXBase.HTMLAttributes<HTMLSmoothlyNextTableRowGroupElement>;
            "smoothly-notification": LocalJSX.SmoothlyNotification & JSXBase.HTMLAttributes<HTMLSmoothlyNotificationElement>;
            "smoothly-notifier": LocalJSX.SmoothlyNotifier & JSXBase.HTMLAttributes<HTMLSmoothlyNotifierElement>;
            "smoothly-picker": LocalJSX.SmoothlyPicker & JSXBase.HTMLAttributes<HTMLSmoothlyPickerElement>;
            "smoothly-picker-demo": LocalJSX.SmoothlyPickerDemo & JSXBase.HTMLAttributes<HTMLSmoothlyPickerDemoElement>;
            "smoothly-picker-menu": LocalJSX.SmoothlyPickerMenu & JSXBase.HTMLAttributes<HTMLSmoothlyPickerMenuElement>;
            "smoothly-picker-option": LocalJSX.SmoothlyPickerOption & JSXBase.HTMLAttributes<HTMLSmoothlyPickerOptionElement>;
            "smoothly-slot-elements": LocalJSX.SmoothlySlotElements & JSXBase.HTMLAttributes<HTMLSmoothlySlotElementsElement>;
            "smoothly-slotted-elements": LocalJSX.SmoothlySlottedElements & JSXBase.HTMLAttributes<HTMLSmoothlySlottedElementsElement>;
            "smoothly-spinner": LocalJSX.SmoothlySpinner & JSXBase.HTMLAttributes<HTMLSmoothlySpinnerElement>;
            "smoothly-submit": LocalJSX.SmoothlySubmit & JSXBase.HTMLAttributes<HTMLSmoothlySubmitElement>;
            "smoothly-summary": LocalJSX.SmoothlySummary & JSXBase.HTMLAttributes<HTMLSmoothlySummaryElement>;
            "smoothly-tab": LocalJSX.SmoothlyTab & JSXBase.HTMLAttributes<HTMLSmoothlyTabElement>;
            "smoothly-table": LocalJSX.SmoothlyTable & JSXBase.HTMLAttributes<HTMLSmoothlyTableElement>;
            "smoothly-table-cell": LocalJSX.SmoothlyTableCell & JSXBase.HTMLAttributes<HTMLSmoothlyTableCellElement>;
            "smoothly-table-demo": LocalJSX.SmoothlyTableDemo & JSXBase.HTMLAttributes<HTMLSmoothlyTableDemoElement>;
            "smoothly-table-demo-filtered": LocalJSX.SmoothlyTableDemoFiltered & JSXBase.HTMLAttributes<HTMLSmoothlyTableDemoFilteredElement>;
            "smoothly-table-expandable-cell": LocalJSX.SmoothlyTableExpandableCell & JSXBase.HTMLAttributes<HTMLSmoothlyTableExpandableCellElement>;
            "smoothly-table-expandable-row": LocalJSX.SmoothlyTableExpandableRow & JSXBase.HTMLAttributes<HTMLSmoothlyTableExpandableRowElement>;
            "smoothly-table-footer": LocalJSX.SmoothlyTableFooter & JSXBase.HTMLAttributes<HTMLSmoothlyTableFooterElement>;
            "smoothly-table-header": LocalJSX.SmoothlyTableHeader & JSXBase.HTMLAttributes<HTMLSmoothlyTableHeaderElement>;
            "smoothly-table-row": LocalJSX.SmoothlyTableRow & JSXBase.HTMLAttributes<HTMLSmoothlyTableRowElement>;
            "smoothly-table-testing": LocalJSX.SmoothlyTableTesting & JSXBase.HTMLAttributes<HTMLSmoothlyTableTestingElement>;
            "smoothly-tabs": LocalJSX.SmoothlyTabs & JSXBase.HTMLAttributes<HTMLSmoothlyTabsElement>;
            "smoothly-tabs-demo": LocalJSX.SmoothlyTabsDemo & JSXBase.HTMLAttributes<HTMLSmoothlyTabsDemoElement>;
            "smoothly-theme-color": LocalJSX.SmoothlyThemeColor & JSXBase.HTMLAttributes<HTMLSmoothlyThemeColorElement>;
            "smoothly-theme-color-variant": LocalJSX.SmoothlyThemeColorVariant & JSXBase.HTMLAttributes<HTMLSmoothlyThemeColorVariantElement>;
            "smoothly-theme-colors": LocalJSX.SmoothlyThemeColors & JSXBase.HTMLAttributes<HTMLSmoothlyThemeColorsElement>;
            "smoothly-theme-demo": LocalJSX.SmoothlyThemeDemo & JSXBase.HTMLAttributes<HTMLSmoothlyThemeDemoElement>;
            "smoothly-theme-guide": LocalJSX.SmoothlyThemeGuide & JSXBase.HTMLAttributes<HTMLSmoothlyThemeGuideElement>;
            "smoothly-theme-picker": LocalJSX.SmoothlyThemePicker & JSXBase.HTMLAttributes<HTMLSmoothlyThemePickerElement>;
            "smoothly-toggle": LocalJSX.SmoothlyToggle & JSXBase.HTMLAttributes<HTMLSmoothlyToggleElement>;
            "smoothly-toggle-switch": LocalJSX.SmoothlyToggleSwitch & JSXBase.HTMLAttributes<HTMLSmoothlyToggleSwitchElement>;
            "smoothly-trigger": LocalJSX.SmoothlyTrigger & JSXBase.HTMLAttributes<HTMLSmoothlyTriggerElement>;
            "smoothly-trigger-sink": LocalJSX.SmoothlyTriggerSink & JSXBase.HTMLAttributes<HTMLSmoothlyTriggerSinkElement>;
            "smoothly-trigger-source": LocalJSX.SmoothlyTriggerSource & JSXBase.HTMLAttributes<HTMLSmoothlyTriggerSourceElement>;
        }
    }
}
