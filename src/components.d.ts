/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { SmoothlyAccordion } from "./components/accordion";
import { address } from "./components/address-display";
import { address as address1 } from "./components/address-display/index";
import { Color, Data as Data1, Fill, Message, Notice, Option, Trigger } from "./model";
import { Icon } from "./components/icon/Icon";
import { CountryCode, Currency, Date, DateRange, DateTime, isoly } from "isoly";
import { Direction, Type } from "tidily";
import { Criteria } from "selectively";
import { Data } from "./model/Data";
import { GoogleFont } from "./model/GoogleFont";
import { Controls } from "./components/picker/menu";
import { Controls as Controls1 } from "./components/picker/menu/index";
import { Selected } from "./components/radio-button/Selected";
import { Slot } from "./components/picker/slot-elements/index";
export namespace Components {
    interface SmoothlyAccordion {
        "removeItem": (el: HTMLSmoothlyAccordionItemElement) => Promise<void>;
        "value"?: string;
    }
    interface SmoothlyAccordionItem {
        "brand"?: string | string[];
        "name": string;
        "open"?: boolean;
    }
    interface SmoothlyAddress {
        "editable": boolean;
        "value": address;
    }
    interface SmoothlyAddressDisplay {
        "editable": boolean;
        "value": address;
    }
    interface SmoothlyAddresses {
        "editable": boolean[];
        "value": address[];
    }
    interface SmoothlyApp {
        "color": Color;
        "label": string;
        "menuOpen": boolean;
    }
    interface SmoothlyAppDemo {
        "baseUrl": string;
    }
    interface SmoothlyAppRoom {
        "getContent": () => Promise<HTMLElement>;
        "icon"?: Icon;
        "label"?: string;
        "path": string | URLPattern;
        "selected"?: boolean;
        "to"?: string;
    }
    interface SmoothlyBacktotop {
        "bottom": string;
        "opacity": string;
        "right": string;
    }
    interface SmoothlyBurger {
        "mediaQuery": string;
        "open": boolean;
        "visible": boolean;
    }
    interface SmoothlyButton {
        "color"?: Color;
        "disabled": boolean;
        "download"?: boolean;
        "expand"?: "block" | "full";
        "fill"?: Fill;
        "link"?: string;
        "shape"?: "rounded";
        "size": "small" | "large" | "icon" | "flexible";
        "type": "link" | "button";
    }
    interface SmoothlyButtonDemo {
    }
    interface SmoothlyCalendar {
        "doubleInput": boolean;
        "end"?: Date;
        "max": Date;
        "min": Date;
        "month"?: Date;
        "start"?: Date;
        "value": Date;
    }
    interface SmoothlyCheckbox {
        "checked": boolean;
        "disabled": boolean;
        "intermediate": boolean;
        "name": string;
        "size": "tiny" | "small" | "medium" | "large";
        "toggle": () => Promise<void>;
        "value": any;
    }
    interface SmoothlyColor {
        "color"?: Color;
    }
    interface SmoothlyCountry {
        "text": "alpha2" | "name" | "none";
        "value": CountryCode.Alpha2;
    }
    interface SmoothlyDialog {
        "closable": boolean;
        "color": Color | undefined;
        "header": string | undefined;
        "open": boolean;
    }
    interface SmoothlyDialogDemo {
    }
    interface SmoothlyDisplay {
        "country"?: CountryCode.Alpha2;
        "currency"?: Currency;
        "format"?: DateTime.Format;
        "type": Type;
        "value"?: any;
    }
    interface SmoothlyDisplayAmount {
        "amount": number | string;
        "currency": Currency;
        "toInteger": boolean;
    }
    /**
     * DEPRECATED, use  <smoothly-display type="date-time">
     */
    interface SmoothlyDisplayDateTime {
        "datetime": DateTime;
    }
    interface SmoothlyDisplayDemo {
    }
    interface SmoothlyFilter {
        "clear": (event: MouseEvent) => Promise<void>;
        "criteria": Record<string, Criteria>;
        "inputValue": Criteria;
        "placeholder": string | undefined;
    }
    interface SmoothlyFilterInput {
        "autocomplete": boolean;
        "clear": () => Promise<void>;
        "comparison": "equals" | "less" | "greater" | "starts" | "ends" | "includes";
        "currency"?: Currency;
        "disabled": boolean;
        "maxLength": number;
        "minLength": number;
        "name": string;
        "pattern"?: RegExp;
        "placeholder"?: string;
        "readonly": boolean;
        "required": boolean;
        "showLabel": boolean;
        "type": string;
        "value": string;
    }
    interface SmoothlyForm {
        "action"?: string;
        "changed": boolean;
        "clear": () => Promise<void>;
        "looks": "plain" | "grid" | "border" | "line";
        "method"?: "GET" | "POST";
        "name"?: string;
        "prevent": boolean;
        "processing": boolean;
        "submit": () => Promise<void>;
        "value": Readonly<Data>;
    }
    interface SmoothlyFrame {
        "name": string;
        "origin": string | undefined;
        "send": (message2: string | Message<any>, content?: Trigger | any) => Promise<void>;
        "url": string;
    }
    interface SmoothlyGoogleFont {
        "value"?: GoogleFont;
    }
    interface SmoothlyIcon {
        "color": Color;
        "fill": Fill;
        "name"?: Icon | "empty";
        "size": "tiny" | "small" | "medium" | "large";
        "toolTip"?: string;
    }
    interface SmoothlyIconDemo {
    }
    interface SmoothlyInput {
        "autocomplete": boolean;
        "changed": boolean;
        "clear": () => Promise<void>;
        "currency"?: Currency;
        "disabled": boolean;
        "getFormData": (name: string) => Promise<Record<string, any>>;
        "maxLength": number;
        "minLength": number;
        "name": string;
        "pattern": RegExp | undefined;
        "placeholder": string | undefined;
        "readonly": boolean;
        "required": boolean;
        "setKeepFocusOnReRender": (keepFocus: boolean) => Promise<void>;
        "setSelectionRange": (start: number, end: number, direction?: Direction) => Promise<void>;
        "showLabel": boolean;
        "type": string;
        "value": any;
    }
    interface SmoothlyInputClear {
        "color"?: Color;
        "disabled": boolean;
        "display": boolean;
        "expand"?: "block" | "full";
        "fill"?: Fill;
        "shape"?: "rounded";
        "size": "small" | "large" | "icon" | "flexible";
        "type": "form" | "input";
    }
    interface SmoothlyInputDate {
        "clear": () => Promise<void>;
        "disabled": boolean;
        "max": Date;
        "min": Date;
        "name": string;
        "open": boolean;
        "value"?: Date;
    }
    interface SmoothlyInputDateRange {
        "clear": () => Promise<void>;
        "end"?: isoly.Date;
        "labelEnd": string;
        "labelStart": string;
        "max": isoly.Date;
        "min": isoly.Date;
        "name": string;
        "open": boolean;
        "showLabel": boolean;
        "start"?: isoly.Date;
        "value"?: isoly.Date;
    }
    interface SmoothlyInputDemo {
    }
    interface SmoothlyInputFile {
        "accept"?: string;
        "camera": "front" | "back";
        "clear": () => Promise<void>;
        "name": string;
        "placeholder": string | undefined;
        "showLabel": boolean;
        "value"?: File;
    }
    interface SmoothlyInputMonth {
        "value"?: Date;
    }
    interface SmoothlyInputSelect {
        "initialPrompt"?: string;
        "reset": () => Promise<void>;
    }
    interface SmoothlyItem {
        "filter": (filter: string) => Promise<boolean>;
        "marked": boolean;
        "selected": boolean;
        "value": any;
    }
    interface SmoothlyNotification {
        "closable": boolean;
        "icon": boolean;
        "notice": Notice;
    }
    interface SmoothlyNotifier {
    }
    interface SmoothlyPicker {
        "clear": () => Promise<void>;
        "multiple": boolean;
        "mutable": boolean;
        "name": string;
        "open": boolean;
        "readonly": boolean;
        "validator"?: (value: string) => boolean | { result: boolean; notice: Notice };
    }
    interface SmoothlyPickerDemo {
    }
    interface SmoothlyPickerMenu {
        "multiple": boolean;
        "mutable": boolean;
        "readonly": boolean;
        "validator"?: (value: string) => boolean | { result: boolean; notice: Notice };
    }
    interface SmoothlyPickerOption {
        "clickHandler": () => Promise<void>;
        "search": string[];
        "selected": boolean;
        "value": any;
        "visible": boolean;
    }
    interface SmoothlyPopup {
        "direction": "up" | "down";
        "visible": boolean;
    }
    interface SmoothlyQuiet {
        "color": string;
    }
    interface SmoothlyRadio {
        "checked": boolean;
        "name": string;
        "tab": number;
        "value": string;
    }
    interface SmoothlyRadioButton {
        "decoration": "button" | "radio";
        "deselectable"?: boolean;
        "name": string;
        "value"?: any;
    }
    interface SmoothlyRadioButtonItem {
        "color"?: Color;
        "selected": boolean;
        "value": any;
    }
    interface SmoothlyRadioGroup {
        "orientation"?: "horizontal" | "vertical";
    }
    interface SmoothlyReorder {
    }
    interface SmoothlySelectDemo {
    }
    interface SmoothlySkeleton {
        "align": "left" | "center" | "right";
        "color": string;
        "distance": string;
        "period": number;
        "width": string;
        "widths": string[];
    }
    interface SmoothlySlotElements {
        "clone": boolean;
        "nodes"?: Node | Node[];
    }
    interface SmoothlySlottedElements {
        "clone": boolean;
    }
    interface SmoothlySpinner {
        "active": boolean;
        "size": "small" | "medium" | "large";
    }
    interface SmoothlySubmit {
        "color"?: Color;
        "disabled": boolean;
        "expand"?: "block" | "full";
        "fill"?: Fill;
        "prevent": boolean;
        "shape"?: "rounded";
        "size": "flexible" | "small" | "large" | "icon";
        "type": "link" | "button";
    }
    interface SmoothlySummary {
        "color": Color;
        "fill": Fill;
        "open": boolean;
        "size": "tiny" | "small" | "medium" | "large";
    }
    interface SmoothlySvg {
        "color": string;
        "size"?: "large" | "medium" | "small" | "tiny" | { height: string; width: string };
        "url": string;
    }
    interface SmoothlyTab {
        "label": string;
        "open": boolean;
    }
    interface SmoothlyTabSwitch {
    }
    interface SmoothlyTable {
        "align": "middle" | "bottom" | "top";
        "open": boolean;
        "root": boolean;
    }
    interface SmoothlyTableCell {
    }
    interface SmoothlyTableDemo {
    }
    interface SmoothlyTableDemoFiltered {
    }
    interface SmoothlyTableExpandableCell {
        "align": "left" | "center" | "right";
        "open": boolean;
    }
    interface SmoothlyTableExpandableRow {
        "align": "left" | "center" | "right";
        "open": boolean;
    }
    interface SmoothlyTableHeader {
        "name": string;
    }
    interface SmoothlyTableRow {
        "open": boolean;
    }
    interface SmoothlyTableTesting {
    }
    interface SmoothlyToggle {
        "disabled": boolean;
        "name": string;
        "selected": boolean;
        "shape": "rounded";
        "value"?: any;
    }
    interface SmoothlyToggleSwitch {
        "disabled": boolean;
        "name": string;
        "selected": boolean;
        "size": "small" | "default" | "large";
        "value"?: any;
    }
    interface SmoothlyTrigger {
        "color": Color | undefined;
        "disabled": boolean;
        "fill": Fill;
        "name": string;
        "type": "link" | "button";
        "value"?: any;
    }
    interface SmoothlyTriggerSink {
        "context"?: Window;
        "destination": string;
        "filter"?: string;
    }
    interface SmoothlyTriggerSource {
        "listen": string;
    }
    interface SmoothlyTuple {
        "tuple": [string, string];
    }
    interface SmoothlyUrlencoded {
        "data": string;
    }
}
export interface SmoothlyAccordionItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyAccordionItemElement;
}
export interface SmoothlyAppRoomCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyAppRoomElement;
}
export interface SmoothlyBurgerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyBurgerElement;
}
export interface SmoothlyCalendarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyCalendarElement;
}
export interface SmoothlyCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyCheckboxElement;
}
export interface SmoothlyDisplayDemoCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyDisplayDemoElement;
}
export interface SmoothlyFilterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyFilterElement;
}
export interface SmoothlyFilterInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyFilterInputElement;
}
export interface SmoothlyFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyFormElement;
}
export interface SmoothlyFrameCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyFrameElement;
}
export interface SmoothlyInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputElement;
}
export interface SmoothlyInputClearCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputClearElement;
}
export interface SmoothlyInputDateCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputDateElement;
}
export interface SmoothlyInputDateRangeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputDateRangeElement;
}
export interface SmoothlyInputFileCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputFileElement;
}
export interface SmoothlyInputMonthCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputMonthElement;
}
export interface SmoothlyInputSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyInputSelectElement;
}
export interface SmoothlyItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyItemElement;
}
export interface SmoothlyNotificationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyNotificationElement;
}
export interface SmoothlyPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyPickerElement;
}
export interface SmoothlyPickerMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyPickerMenuElement;
}
export interface SmoothlyPickerOptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyPickerOptionElement;
}
export interface SmoothlyPopupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyPopupElement;
}
export interface SmoothlyRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyRadioElement;
}
export interface SmoothlyRadioButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyRadioButtonElement;
}
export interface SmoothlyRadioButtonItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyRadioButtonItemElement;
}
export interface SmoothlyReorderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyReorderElement;
}
export interface SmoothlySlotElementsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlySlotElementsElement;
}
export interface SmoothlySlottedElementsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlySlottedElementsElement;
}
export interface SmoothlySubmitCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlySubmitElement;
}
export interface SmoothlySummaryCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlySummaryElement;
}
export interface SmoothlyTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyTabElement;
}
export interface SmoothlyTableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyTableElement;
}
export interface SmoothlyTableExpandableCellCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyTableExpandableCellElement;
}
export interface SmoothlyTableExpandableRowCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyTableExpandableRowElement;
}
export interface SmoothlyTriggerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyTriggerElement;
}
export interface SmoothlyTriggerSourceCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothlyTriggerSourceElement;
}
declare global {
    interface HTMLSmoothlyAccordionElement extends Components.SmoothlyAccordion, HTMLStencilElement {
    }
    var HTMLSmoothlyAccordionElement: {
        prototype: HTMLSmoothlyAccordionElement;
        new (): HTMLSmoothlyAccordionElement;
    };
    interface HTMLSmoothlyAccordionItemElement extends Components.SmoothlyAccordionItem, HTMLStencilElement {
    }
    var HTMLSmoothlyAccordionItemElement: {
        prototype: HTMLSmoothlyAccordionItemElement;
        new (): HTMLSmoothlyAccordionItemElement;
    };
    interface HTMLSmoothlyAddressElement extends Components.SmoothlyAddress, HTMLStencilElement {
    }
    var HTMLSmoothlyAddressElement: {
        prototype: HTMLSmoothlyAddressElement;
        new (): HTMLSmoothlyAddressElement;
    };
    interface HTMLSmoothlyAddressDisplayElement extends Components.SmoothlyAddressDisplay, HTMLStencilElement {
    }
    var HTMLSmoothlyAddressDisplayElement: {
        prototype: HTMLSmoothlyAddressDisplayElement;
        new (): HTMLSmoothlyAddressDisplayElement;
    };
    interface HTMLSmoothlyAddressesElement extends Components.SmoothlyAddresses, HTMLStencilElement {
    }
    var HTMLSmoothlyAddressesElement: {
        prototype: HTMLSmoothlyAddressesElement;
        new (): HTMLSmoothlyAddressesElement;
    };
    interface HTMLSmoothlyAppElement extends Components.SmoothlyApp, HTMLStencilElement {
    }
    var HTMLSmoothlyAppElement: {
        prototype: HTMLSmoothlyAppElement;
        new (): HTMLSmoothlyAppElement;
    };
    interface HTMLSmoothlyAppDemoElement extends Components.SmoothlyAppDemo, HTMLStencilElement {
    }
    var HTMLSmoothlyAppDemoElement: {
        prototype: HTMLSmoothlyAppDemoElement;
        new (): HTMLSmoothlyAppDemoElement;
    };
    interface HTMLSmoothlyAppRoomElement extends Components.SmoothlyAppRoom, HTMLStencilElement {
    }
    var HTMLSmoothlyAppRoomElement: {
        prototype: HTMLSmoothlyAppRoomElement;
        new (): HTMLSmoothlyAppRoomElement;
    };
    interface HTMLSmoothlyBacktotopElement extends Components.SmoothlyBacktotop, HTMLStencilElement {
    }
    var HTMLSmoothlyBacktotopElement: {
        prototype: HTMLSmoothlyBacktotopElement;
        new (): HTMLSmoothlyBacktotopElement;
    };
    interface HTMLSmoothlyBurgerElement extends Components.SmoothlyBurger, HTMLStencilElement {
    }
    var HTMLSmoothlyBurgerElement: {
        prototype: HTMLSmoothlyBurgerElement;
        new (): HTMLSmoothlyBurgerElement;
    };
    interface HTMLSmoothlyButtonElement extends Components.SmoothlyButton, HTMLStencilElement {
    }
    var HTMLSmoothlyButtonElement: {
        prototype: HTMLSmoothlyButtonElement;
        new (): HTMLSmoothlyButtonElement;
    };
    interface HTMLSmoothlyButtonDemoElement extends Components.SmoothlyButtonDemo, HTMLStencilElement {
    }
    var HTMLSmoothlyButtonDemoElement: {
        prototype: HTMLSmoothlyButtonDemoElement;
        new (): HTMLSmoothlyButtonDemoElement;
    };
    interface HTMLSmoothlyCalendarElement extends Components.SmoothlyCalendar, HTMLStencilElement {
    }
    var HTMLSmoothlyCalendarElement: {
        prototype: HTMLSmoothlyCalendarElement;
        new (): HTMLSmoothlyCalendarElement;
    };
    interface HTMLSmoothlyCheckboxElement extends Components.SmoothlyCheckbox, HTMLStencilElement {
    }
    var HTMLSmoothlyCheckboxElement: {
        prototype: HTMLSmoothlyCheckboxElement;
        new (): HTMLSmoothlyCheckboxElement;
    };
    interface HTMLSmoothlyColorElement extends Components.SmoothlyColor, HTMLStencilElement {
    }
    var HTMLSmoothlyColorElement: {
        prototype: HTMLSmoothlyColorElement;
        new (): HTMLSmoothlyColorElement;
    };
    interface HTMLSmoothlyCountryElement extends Components.SmoothlyCountry, HTMLStencilElement {
    }
    var HTMLSmoothlyCountryElement: {
        prototype: HTMLSmoothlyCountryElement;
        new (): HTMLSmoothlyCountryElement;
    };
    interface HTMLSmoothlyDialogElement extends Components.SmoothlyDialog, HTMLStencilElement {
    }
    var HTMLSmoothlyDialogElement: {
        prototype: HTMLSmoothlyDialogElement;
        new (): HTMLSmoothlyDialogElement;
    };
    interface HTMLSmoothlyDialogDemoElement extends Components.SmoothlyDialogDemo, HTMLStencilElement {
    }
    var HTMLSmoothlyDialogDemoElement: {
        prototype: HTMLSmoothlyDialogDemoElement;
        new (): HTMLSmoothlyDialogDemoElement;
    };
    interface HTMLSmoothlyDisplayElement extends Components.SmoothlyDisplay, HTMLStencilElement {
    }
    var HTMLSmoothlyDisplayElement: {
        prototype: HTMLSmoothlyDisplayElement;
        new (): HTMLSmoothlyDisplayElement;
    };
    interface HTMLSmoothlyDisplayAmountElement extends Components.SmoothlyDisplayAmount, HTMLStencilElement {
    }
    var HTMLSmoothlyDisplayAmountElement: {
        prototype: HTMLSmoothlyDisplayAmountElement;
        new (): HTMLSmoothlyDisplayAmountElement;
    };
    /**
     * DEPRECATED, use  <smoothly-display type="date-time">
     */
    interface HTMLSmoothlyDisplayDateTimeElement extends Components.SmoothlyDisplayDateTime, HTMLStencilElement {
    }
    var HTMLSmoothlyDisplayDateTimeElement: {
        prototype: HTMLSmoothlyDisplayDateTimeElement;
        new (): HTMLSmoothlyDisplayDateTimeElement;
    };
    interface HTMLSmoothlyDisplayDemoElement extends Components.SmoothlyDisplayDemo, HTMLStencilElement {
    }
    var HTMLSmoothlyDisplayDemoElement: {
        prototype: HTMLSmoothlyDisplayDemoElement;
        new (): HTMLSmoothlyDisplayDemoElement;
    };
    interface HTMLSmoothlyFilterElement extends Components.SmoothlyFilter, HTMLStencilElement {
    }
    var HTMLSmoothlyFilterElement: {
        prototype: HTMLSmoothlyFilterElement;
        new (): HTMLSmoothlyFilterElement;
    };
    interface HTMLSmoothlyFilterInputElement extends Components.SmoothlyFilterInput, HTMLStencilElement {
    }
    var HTMLSmoothlyFilterInputElement: {
        prototype: HTMLSmoothlyFilterInputElement;
        new (): HTMLSmoothlyFilterInputElement;
    };
    interface HTMLSmoothlyFormElement extends Components.SmoothlyForm, HTMLStencilElement {
    }
    var HTMLSmoothlyFormElement: {
        prototype: HTMLSmoothlyFormElement;
        new (): HTMLSmoothlyFormElement;
    };
    interface HTMLSmoothlyFrameElement extends Components.SmoothlyFrame, HTMLStencilElement {
    }
    var HTMLSmoothlyFrameElement: {
        prototype: HTMLSmoothlyFrameElement;
        new (): HTMLSmoothlyFrameElement;
    };
    interface HTMLSmoothlyGoogleFontElement extends Components.SmoothlyGoogleFont, HTMLStencilElement {
    }
    var HTMLSmoothlyGoogleFontElement: {
        prototype: HTMLSmoothlyGoogleFontElement;
        new (): HTMLSmoothlyGoogleFontElement;
    };
    interface HTMLSmoothlyIconElement extends Components.SmoothlyIcon, HTMLStencilElement {
    }
    var HTMLSmoothlyIconElement: {
        prototype: HTMLSmoothlyIconElement;
        new (): HTMLSmoothlyIconElement;
    };
    interface HTMLSmoothlyIconDemoElement extends Components.SmoothlyIconDemo, HTMLStencilElement {
    }
    var HTMLSmoothlyIconDemoElement: {
        prototype: HTMLSmoothlyIconDemoElement;
        new (): HTMLSmoothlyIconDemoElement;
    };
    interface HTMLSmoothlyInputElement extends Components.SmoothlyInput, HTMLStencilElement {
    }
    var HTMLSmoothlyInputElement: {
        prototype: HTMLSmoothlyInputElement;
        new (): HTMLSmoothlyInputElement;
    };
    interface HTMLSmoothlyInputClearElement extends Components.SmoothlyInputClear, HTMLStencilElement {
    }
    var HTMLSmoothlyInputClearElement: {
        prototype: HTMLSmoothlyInputClearElement;
        new (): HTMLSmoothlyInputClearElement;
    };
    interface HTMLSmoothlyInputDateElement extends Components.SmoothlyInputDate, HTMLStencilElement {
    }
    var HTMLSmoothlyInputDateElement: {
        prototype: HTMLSmoothlyInputDateElement;
        new (): HTMLSmoothlyInputDateElement;
    };
    interface HTMLSmoothlyInputDateRangeElement extends Components.SmoothlyInputDateRange, HTMLStencilElement {
    }
    var HTMLSmoothlyInputDateRangeElement: {
        prototype: HTMLSmoothlyInputDateRangeElement;
        new (): HTMLSmoothlyInputDateRangeElement;
    };
    interface HTMLSmoothlyInputDemoElement extends Components.SmoothlyInputDemo, HTMLStencilElement {
    }
    var HTMLSmoothlyInputDemoElement: {
        prototype: HTMLSmoothlyInputDemoElement;
        new (): HTMLSmoothlyInputDemoElement;
    };
    interface HTMLSmoothlyInputFileElement extends Components.SmoothlyInputFile, HTMLStencilElement {
    }
    var HTMLSmoothlyInputFileElement: {
        prototype: HTMLSmoothlyInputFileElement;
        new (): HTMLSmoothlyInputFileElement;
    };
    interface HTMLSmoothlyInputMonthElement extends Components.SmoothlyInputMonth, HTMLStencilElement {
    }
    var HTMLSmoothlyInputMonthElement: {
        prototype: HTMLSmoothlyInputMonthElement;
        new (): HTMLSmoothlyInputMonthElement;
    };
    interface HTMLSmoothlyInputSelectElement extends Components.SmoothlyInputSelect, HTMLStencilElement {
    }
    var HTMLSmoothlyInputSelectElement: {
        prototype: HTMLSmoothlyInputSelectElement;
        new (): HTMLSmoothlyInputSelectElement;
    };
    interface HTMLSmoothlyItemElement extends Components.SmoothlyItem, HTMLStencilElement {
    }
    var HTMLSmoothlyItemElement: {
        prototype: HTMLSmoothlyItemElement;
        new (): HTMLSmoothlyItemElement;
    };
    interface HTMLSmoothlyNotificationElement extends Components.SmoothlyNotification, HTMLStencilElement {
    }
    var HTMLSmoothlyNotificationElement: {
        prototype: HTMLSmoothlyNotificationElement;
        new (): HTMLSmoothlyNotificationElement;
    };
    interface HTMLSmoothlyNotifierElement extends Components.SmoothlyNotifier, HTMLStencilElement {
    }
    var HTMLSmoothlyNotifierElement: {
        prototype: HTMLSmoothlyNotifierElement;
        new (): HTMLSmoothlyNotifierElement;
    };
    interface HTMLSmoothlyPickerElement extends Components.SmoothlyPicker, HTMLStencilElement {
    }
    var HTMLSmoothlyPickerElement: {
        prototype: HTMLSmoothlyPickerElement;
        new (): HTMLSmoothlyPickerElement;
    };
    interface HTMLSmoothlyPickerDemoElement extends Components.SmoothlyPickerDemo, HTMLStencilElement {
    }
    var HTMLSmoothlyPickerDemoElement: {
        prototype: HTMLSmoothlyPickerDemoElement;
        new (): HTMLSmoothlyPickerDemoElement;
    };
    interface HTMLSmoothlyPickerMenuElement extends Components.SmoothlyPickerMenu, HTMLStencilElement {
    }
    var HTMLSmoothlyPickerMenuElement: {
        prototype: HTMLSmoothlyPickerMenuElement;
        new (): HTMLSmoothlyPickerMenuElement;
    };
    interface HTMLSmoothlyPickerOptionElement extends Components.SmoothlyPickerOption, HTMLStencilElement {
    }
    var HTMLSmoothlyPickerOptionElement: {
        prototype: HTMLSmoothlyPickerOptionElement;
        new (): HTMLSmoothlyPickerOptionElement;
    };
    interface HTMLSmoothlyPopupElement extends Components.SmoothlyPopup, HTMLStencilElement {
    }
    var HTMLSmoothlyPopupElement: {
        prototype: HTMLSmoothlyPopupElement;
        new (): HTMLSmoothlyPopupElement;
    };
    interface HTMLSmoothlyQuietElement extends Components.SmoothlyQuiet, HTMLStencilElement {
    }
    var HTMLSmoothlyQuietElement: {
        prototype: HTMLSmoothlyQuietElement;
        new (): HTMLSmoothlyQuietElement;
    };
    interface HTMLSmoothlyRadioElement extends Components.SmoothlyRadio, HTMLStencilElement {
    }
    var HTMLSmoothlyRadioElement: {
        prototype: HTMLSmoothlyRadioElement;
        new (): HTMLSmoothlyRadioElement;
    };
    interface HTMLSmoothlyRadioButtonElement extends Components.SmoothlyRadioButton, HTMLStencilElement {
    }
    var HTMLSmoothlyRadioButtonElement: {
        prototype: HTMLSmoothlyRadioButtonElement;
        new (): HTMLSmoothlyRadioButtonElement;
    };
    interface HTMLSmoothlyRadioButtonItemElement extends Components.SmoothlyRadioButtonItem, HTMLStencilElement {
    }
    var HTMLSmoothlyRadioButtonItemElement: {
        prototype: HTMLSmoothlyRadioButtonItemElement;
        new (): HTMLSmoothlyRadioButtonItemElement;
    };
    interface HTMLSmoothlyRadioGroupElement extends Components.SmoothlyRadioGroup, HTMLStencilElement {
    }
    var HTMLSmoothlyRadioGroupElement: {
        prototype: HTMLSmoothlyRadioGroupElement;
        new (): HTMLSmoothlyRadioGroupElement;
    };
    interface HTMLSmoothlyReorderElement extends Components.SmoothlyReorder, HTMLStencilElement {
    }
    var HTMLSmoothlyReorderElement: {
        prototype: HTMLSmoothlyReorderElement;
        new (): HTMLSmoothlyReorderElement;
    };
    interface HTMLSmoothlySelectDemoElement extends Components.SmoothlySelectDemo, HTMLStencilElement {
    }
    var HTMLSmoothlySelectDemoElement: {
        prototype: HTMLSmoothlySelectDemoElement;
        new (): HTMLSmoothlySelectDemoElement;
    };
    interface HTMLSmoothlySkeletonElement extends Components.SmoothlySkeleton, HTMLStencilElement {
    }
    var HTMLSmoothlySkeletonElement: {
        prototype: HTMLSmoothlySkeletonElement;
        new (): HTMLSmoothlySkeletonElement;
    };
    interface HTMLSmoothlySlotElementsElement extends Components.SmoothlySlotElements, HTMLStencilElement {
    }
    var HTMLSmoothlySlotElementsElement: {
        prototype: HTMLSmoothlySlotElementsElement;
        new (): HTMLSmoothlySlotElementsElement;
    };
    interface HTMLSmoothlySlottedElementsElement extends Components.SmoothlySlottedElements, HTMLStencilElement {
    }
    var HTMLSmoothlySlottedElementsElement: {
        prototype: HTMLSmoothlySlottedElementsElement;
        new (): HTMLSmoothlySlottedElementsElement;
    };
    interface HTMLSmoothlySpinnerElement extends Components.SmoothlySpinner, HTMLStencilElement {
    }
    var HTMLSmoothlySpinnerElement: {
        prototype: HTMLSmoothlySpinnerElement;
        new (): HTMLSmoothlySpinnerElement;
    };
    interface HTMLSmoothlySubmitElement extends Components.SmoothlySubmit, HTMLStencilElement {
    }
    var HTMLSmoothlySubmitElement: {
        prototype: HTMLSmoothlySubmitElement;
        new (): HTMLSmoothlySubmitElement;
    };
    interface HTMLSmoothlySummaryElement extends Components.SmoothlySummary, HTMLStencilElement {
    }
    var HTMLSmoothlySummaryElement: {
        prototype: HTMLSmoothlySummaryElement;
        new (): HTMLSmoothlySummaryElement;
    };
    interface HTMLSmoothlySvgElement extends Components.SmoothlySvg, HTMLStencilElement {
    }
    var HTMLSmoothlySvgElement: {
        prototype: HTMLSmoothlySvgElement;
        new (): HTMLSmoothlySvgElement;
    };
    interface HTMLSmoothlyTabElement extends Components.SmoothlyTab, HTMLStencilElement {
    }
    var HTMLSmoothlyTabElement: {
        prototype: HTMLSmoothlyTabElement;
        new (): HTMLSmoothlyTabElement;
    };
    interface HTMLSmoothlyTabSwitchElement extends Components.SmoothlyTabSwitch, HTMLStencilElement {
    }
    var HTMLSmoothlyTabSwitchElement: {
        prototype: HTMLSmoothlyTabSwitchElement;
        new (): HTMLSmoothlyTabSwitchElement;
    };
    interface HTMLSmoothlyTableElement extends Components.SmoothlyTable, HTMLStencilElement {
    }
    var HTMLSmoothlyTableElement: {
        prototype: HTMLSmoothlyTableElement;
        new (): HTMLSmoothlyTableElement;
    };
    interface HTMLSmoothlyTableCellElement extends Components.SmoothlyTableCell, HTMLStencilElement {
    }
    var HTMLSmoothlyTableCellElement: {
        prototype: HTMLSmoothlyTableCellElement;
        new (): HTMLSmoothlyTableCellElement;
    };
    interface HTMLSmoothlyTableDemoElement extends Components.SmoothlyTableDemo, HTMLStencilElement {
    }
    var HTMLSmoothlyTableDemoElement: {
        prototype: HTMLSmoothlyTableDemoElement;
        new (): HTMLSmoothlyTableDemoElement;
    };
    interface HTMLSmoothlyTableDemoFilteredElement extends Components.SmoothlyTableDemoFiltered, HTMLStencilElement {
    }
    var HTMLSmoothlyTableDemoFilteredElement: {
        prototype: HTMLSmoothlyTableDemoFilteredElement;
        new (): HTMLSmoothlyTableDemoFilteredElement;
    };
    interface HTMLSmoothlyTableExpandableCellElement extends Components.SmoothlyTableExpandableCell, HTMLStencilElement {
    }
    var HTMLSmoothlyTableExpandableCellElement: {
        prototype: HTMLSmoothlyTableExpandableCellElement;
        new (): HTMLSmoothlyTableExpandableCellElement;
    };
    interface HTMLSmoothlyTableExpandableRowElement extends Components.SmoothlyTableExpandableRow, HTMLStencilElement {
    }
    var HTMLSmoothlyTableExpandableRowElement: {
        prototype: HTMLSmoothlyTableExpandableRowElement;
        new (): HTMLSmoothlyTableExpandableRowElement;
    };
    interface HTMLSmoothlyTableHeaderElement extends Components.SmoothlyTableHeader, HTMLStencilElement {
    }
    var HTMLSmoothlyTableHeaderElement: {
        prototype: HTMLSmoothlyTableHeaderElement;
        new (): HTMLSmoothlyTableHeaderElement;
    };
    interface HTMLSmoothlyTableRowElement extends Components.SmoothlyTableRow, HTMLStencilElement {
    }
    var HTMLSmoothlyTableRowElement: {
        prototype: HTMLSmoothlyTableRowElement;
        new (): HTMLSmoothlyTableRowElement;
    };
    interface HTMLSmoothlyTableTestingElement extends Components.SmoothlyTableTesting, HTMLStencilElement {
    }
    var HTMLSmoothlyTableTestingElement: {
        prototype: HTMLSmoothlyTableTestingElement;
        new (): HTMLSmoothlyTableTestingElement;
    };
    interface HTMLSmoothlyToggleElement extends Components.SmoothlyToggle, HTMLStencilElement {
    }
    var HTMLSmoothlyToggleElement: {
        prototype: HTMLSmoothlyToggleElement;
        new (): HTMLSmoothlyToggleElement;
    };
    interface HTMLSmoothlyToggleSwitchElement extends Components.SmoothlyToggleSwitch, HTMLStencilElement {
    }
    var HTMLSmoothlyToggleSwitchElement: {
        prototype: HTMLSmoothlyToggleSwitchElement;
        new (): HTMLSmoothlyToggleSwitchElement;
    };
    interface HTMLSmoothlyTriggerElement extends Components.SmoothlyTrigger, HTMLStencilElement {
    }
    var HTMLSmoothlyTriggerElement: {
        prototype: HTMLSmoothlyTriggerElement;
        new (): HTMLSmoothlyTriggerElement;
    };
    interface HTMLSmoothlyTriggerSinkElement extends Components.SmoothlyTriggerSink, HTMLStencilElement {
    }
    var HTMLSmoothlyTriggerSinkElement: {
        prototype: HTMLSmoothlyTriggerSinkElement;
        new (): HTMLSmoothlyTriggerSinkElement;
    };
    interface HTMLSmoothlyTriggerSourceElement extends Components.SmoothlyTriggerSource, HTMLStencilElement {
    }
    var HTMLSmoothlyTriggerSourceElement: {
        prototype: HTMLSmoothlyTriggerSourceElement;
        new (): HTMLSmoothlyTriggerSourceElement;
    };
    interface HTMLSmoothlyTupleElement extends Components.SmoothlyTuple, HTMLStencilElement {
    }
    var HTMLSmoothlyTupleElement: {
        prototype: HTMLSmoothlyTupleElement;
        new (): HTMLSmoothlyTupleElement;
    };
    interface HTMLSmoothlyUrlencodedElement extends Components.SmoothlyUrlencoded, HTMLStencilElement {
    }
    var HTMLSmoothlyUrlencodedElement: {
        prototype: HTMLSmoothlyUrlencodedElement;
        new (): HTMLSmoothlyUrlencodedElement;
    };
    interface HTMLElementTagNameMap {
        "smoothly-accordion": HTMLSmoothlyAccordionElement;
        "smoothly-accordion-item": HTMLSmoothlyAccordionItemElement;
        "smoothly-address": HTMLSmoothlyAddressElement;
        "smoothly-address-display": HTMLSmoothlyAddressDisplayElement;
        "smoothly-addresses": HTMLSmoothlyAddressesElement;
        "smoothly-app": HTMLSmoothlyAppElement;
        "smoothly-app-demo": HTMLSmoothlyAppDemoElement;
        "smoothly-app-room": HTMLSmoothlyAppRoomElement;
        "smoothly-backtotop": HTMLSmoothlyBacktotopElement;
        "smoothly-burger": HTMLSmoothlyBurgerElement;
        "smoothly-button": HTMLSmoothlyButtonElement;
        "smoothly-button-demo": HTMLSmoothlyButtonDemoElement;
        "smoothly-calendar": HTMLSmoothlyCalendarElement;
        "smoothly-checkbox": HTMLSmoothlyCheckboxElement;
        "smoothly-color": HTMLSmoothlyColorElement;
        "smoothly-country": HTMLSmoothlyCountryElement;
        "smoothly-dialog": HTMLSmoothlyDialogElement;
        "smoothly-dialog-demo": HTMLSmoothlyDialogDemoElement;
        "smoothly-display": HTMLSmoothlyDisplayElement;
        "smoothly-display-amount": HTMLSmoothlyDisplayAmountElement;
        "smoothly-display-date-time": HTMLSmoothlyDisplayDateTimeElement;
        "smoothly-display-demo": HTMLSmoothlyDisplayDemoElement;
        "smoothly-filter": HTMLSmoothlyFilterElement;
        "smoothly-filter-input": HTMLSmoothlyFilterInputElement;
        "smoothly-form": HTMLSmoothlyFormElement;
        "smoothly-frame": HTMLSmoothlyFrameElement;
        "smoothly-google-font": HTMLSmoothlyGoogleFontElement;
        "smoothly-icon": HTMLSmoothlyIconElement;
        "smoothly-icon-demo": HTMLSmoothlyIconDemoElement;
        "smoothly-input": HTMLSmoothlyInputElement;
        "smoothly-input-clear": HTMLSmoothlyInputClearElement;
        "smoothly-input-date": HTMLSmoothlyInputDateElement;
        "smoothly-input-date-range": HTMLSmoothlyInputDateRangeElement;
        "smoothly-input-demo": HTMLSmoothlyInputDemoElement;
        "smoothly-input-file": HTMLSmoothlyInputFileElement;
        "smoothly-input-month": HTMLSmoothlyInputMonthElement;
        "smoothly-input-select": HTMLSmoothlyInputSelectElement;
        "smoothly-item": HTMLSmoothlyItemElement;
        "smoothly-notification": HTMLSmoothlyNotificationElement;
        "smoothly-notifier": HTMLSmoothlyNotifierElement;
        "smoothly-picker": HTMLSmoothlyPickerElement;
        "smoothly-picker-demo": HTMLSmoothlyPickerDemoElement;
        "smoothly-picker-menu": HTMLSmoothlyPickerMenuElement;
        "smoothly-picker-option": HTMLSmoothlyPickerOptionElement;
        "smoothly-popup": HTMLSmoothlyPopupElement;
        "smoothly-quiet": HTMLSmoothlyQuietElement;
        "smoothly-radio": HTMLSmoothlyRadioElement;
        "smoothly-radio-button": HTMLSmoothlyRadioButtonElement;
        "smoothly-radio-button-item": HTMLSmoothlyRadioButtonItemElement;
        "smoothly-radio-group": HTMLSmoothlyRadioGroupElement;
        "smoothly-reorder": HTMLSmoothlyReorderElement;
        "smoothly-select-demo": HTMLSmoothlySelectDemoElement;
        "smoothly-skeleton": HTMLSmoothlySkeletonElement;
        "smoothly-slot-elements": HTMLSmoothlySlotElementsElement;
        "smoothly-slotted-elements": HTMLSmoothlySlottedElementsElement;
        "smoothly-spinner": HTMLSmoothlySpinnerElement;
        "smoothly-submit": HTMLSmoothlySubmitElement;
        "smoothly-summary": HTMLSmoothlySummaryElement;
        "smoothly-svg": HTMLSmoothlySvgElement;
        "smoothly-tab": HTMLSmoothlyTabElement;
        "smoothly-tab-switch": HTMLSmoothlyTabSwitchElement;
        "smoothly-table": HTMLSmoothlyTableElement;
        "smoothly-table-cell": HTMLSmoothlyTableCellElement;
        "smoothly-table-demo": HTMLSmoothlyTableDemoElement;
        "smoothly-table-demo-filtered": HTMLSmoothlyTableDemoFilteredElement;
        "smoothly-table-expandable-cell": HTMLSmoothlyTableExpandableCellElement;
        "smoothly-table-expandable-row": HTMLSmoothlyTableExpandableRowElement;
        "smoothly-table-header": HTMLSmoothlyTableHeaderElement;
        "smoothly-table-row": HTMLSmoothlyTableRowElement;
        "smoothly-table-testing": HTMLSmoothlyTableTestingElement;
        "smoothly-toggle": HTMLSmoothlyToggleElement;
        "smoothly-toggle-switch": HTMLSmoothlyToggleSwitchElement;
        "smoothly-trigger": HTMLSmoothlyTriggerElement;
        "smoothly-trigger-sink": HTMLSmoothlyTriggerSinkElement;
        "smoothly-trigger-source": HTMLSmoothlyTriggerSourceElement;
        "smoothly-tuple": HTMLSmoothlyTupleElement;
        "smoothly-urlencoded": HTMLSmoothlyUrlencodedElement;
    }
}
declare namespace LocalJSX {
    interface SmoothlyAccordion {
        "value"?: string;
    }
    interface SmoothlyAccordionItem {
        "brand"?: string | string[];
        "name"?: string;
        "onSmoothlyAccordionItemWillLoad"?: (event: SmoothlyAccordionItemCustomEvent<(parent: SmoothlyAccordion) => void>) => void;
        "onSmoothlyClose"?: (event: SmoothlyAccordionItemCustomEvent<{ name: string; open: boolean }>) => void;
        "onSmoothlyOpen"?: (event: SmoothlyAccordionItemCustomEvent<{ name: string; open: boolean }>) => void;
        "open"?: boolean;
    }
    interface SmoothlyAddress {
        "editable"?: boolean;
        "value"?: address;
    }
    interface SmoothlyAddressDisplay {
        "editable"?: boolean;
        "value"?: address;
    }
    interface SmoothlyAddresses {
        "editable"?: boolean[];
        "value"?: address[];
    }
    interface SmoothlyApp {
        "color"?: Color;
        "label"?: string;
        "menuOpen"?: boolean;
    }
    interface SmoothlyAppDemo {
        "baseUrl"?: string;
    }
    interface SmoothlyAppRoom {
        "icon"?: Icon;
        "label"?: string;
        "onSmoothlyRoomLoaded"?: (event: SmoothlyAppRoomCustomEvent<any>) => void;
        "onSmoothlyRoomSelected"?: (event: SmoothlyAppRoomCustomEvent<any>) => void;
        "path"?: string | URLPattern;
        "selected"?: boolean;
        "to"?: string;
    }
    interface SmoothlyBacktotop {
        "bottom"?: string;
        "opacity"?: string;
        "right"?: string;
    }
    interface SmoothlyBurger {
        "mediaQuery"?: string;
        "onBurgerStatus"?: (event: SmoothlyBurgerCustomEvent<boolean>) => void;
        "open"?: boolean;
        "visible"?: boolean;
    }
    interface SmoothlyButton {
        "color"?: Color;
        "disabled"?: boolean;
        "download"?: boolean;
        "expand"?: "block" | "full";
        "fill"?: Fill;
        "link"?: string;
        "shape"?: "rounded";
        "size"?: "small" | "large" | "icon" | "flexible";
        "type"?: "link" | "button";
    }
    interface SmoothlyButtonDemo {
    }
    interface SmoothlyCalendar {
        "doubleInput"?: boolean;
        "end"?: Date;
        "max"?: Date;
        "min"?: Date;
        "month"?: Date;
        "onDateRangeSet"?: (event: SmoothlyCalendarCustomEvent<DateRange>) => void;
        "onDateSet"?: (event: SmoothlyCalendarCustomEvent<Date>) => void;
        "onEndChanged"?: (event: SmoothlyCalendarCustomEvent<Date>) => void;
        "onStartChanged"?: (event: SmoothlyCalendarCustomEvent<Date>) => void;
        "onValueChanged"?: (event: SmoothlyCalendarCustomEvent<Date>) => void;
        "start"?: Date;
        "value"?: Date;
    }
    interface SmoothlyCheckbox {
        "checked"?: boolean;
        "disabled"?: boolean;
        "intermediate"?: boolean;
        "name"?: string;
        "onSmoothlyChecked"?: (event: SmoothlyCheckboxCustomEvent<Record<string, any>>) => void;
        "size"?: "tiny" | "small" | "medium" | "large";
        "value"?: any;
    }
    interface SmoothlyColor {
        "color"?: Color;
    }
    interface SmoothlyCountry {
        "text"?: "alpha2" | "name" | "none";
        "value"?: CountryCode.Alpha2;
    }
    interface SmoothlyDialog {
        "closable"?: boolean;
        "color"?: Color | undefined;
        "header"?: string | undefined;
        "open"?: boolean;
    }
    interface SmoothlyDialogDemo {
    }
    interface SmoothlyDisplay {
        "country"?: CountryCode.Alpha2;
        "currency"?: Currency;
        "format"?: DateTime.Format;
        "type"?: Type;
        "value"?: any;
    }
    interface SmoothlyDisplayAmount {
        "amount"?: number | string;
        "currency"?: Currency;
        "toInteger"?: boolean;
    }
    /**
     * DEPRECATED, use  <smoothly-display type="date-time">
     */
    interface SmoothlyDisplayDateTime {
        "datetime"?: DateTime;
    }
    interface SmoothlyDisplayDemo {
        "onNotice"?: (event: SmoothlyDisplayDemoCustomEvent<Notice>) => void;
    }
    interface SmoothlyFilter {
        "criteria"?: Record<string, Criteria>;
        "inputValue"?: Criteria;
        "onFilters"?: (event: SmoothlyFilterCustomEvent<Criteria>) => void;
        "placeholder"?: string | undefined;
    }
    interface SmoothlyFilterInput {
        "autocomplete"?: boolean;
        "comparison"?: "equals" | "less" | "greater" | "starts" | "ends" | "includes";
        "currency"?: Currency;
        "disabled"?: boolean;
        "maxLength"?: number;
        "minLength"?: number;
        "name"?: string;
        "onFilter"?: (event: SmoothlyFilterInputCustomEvent<Criteria>) => void;
        "pattern"?: RegExp;
        "placeholder"?: string;
        "readonly"?: boolean;
        "required"?: boolean;
        "showLabel"?: boolean;
        "type"?: string;
        "value"?: string;
    }
    interface SmoothlyForm {
        "action"?: string;
        "changed"?: boolean;
        "looks"?: "plain" | "grid" | "border" | "line";
        "method"?: "GET" | "POST";
        "name"?: string;
        "onSmoothlyFormInput"?: (event: SmoothlyFormCustomEvent<Data>) => void;
        "onSmoothlyFormSubmit"?: (event: SmoothlyFormCustomEvent<Data>) => void;
        "prevent"?: boolean;
        "processing"?: boolean;
        "value"?: Readonly<Data>;
    }
    interface SmoothlyFrame {
        "name"?: string;
        "onMessage2"?: (event: SmoothlyFrameCustomEvent<Message<any>>) => void;
        "onTrigger"?: (event: SmoothlyFrameCustomEvent<Trigger>) => void;
        "origin"?: string | undefined;
        "url"?: string;
    }
    interface SmoothlyGoogleFont {
        "value"?: GoogleFont;
    }
    interface SmoothlyIcon {
        "color"?: Color;
        "fill"?: Fill;
        "name"?: Icon | "empty";
        "size"?: "tiny" | "small" | "medium" | "large";
        "toolTip"?: string;
    }
    interface SmoothlyIconDemo {
    }
    interface SmoothlyInput {
        "autocomplete"?: boolean;
        "changed"?: boolean;
        "currency"?: Currency;
        "disabled"?: boolean;
        "maxLength"?: number;
        "minLength"?: number;
        "name"?: string;
        "onSmoothlyBlur"?: (event: SmoothlyInputCustomEvent<void>) => void;
        "onSmoothlyChange"?: (event: SmoothlyInputCustomEvent<Record<string, any>>) => void;
        "onSmoothlyInput"?: (event: SmoothlyInputCustomEvent<Record<string, any>>) => void;
        "pattern"?: RegExp | undefined;
        "placeholder"?: string | undefined;
        "readonly"?: boolean;
        "required"?: boolean;
        "showLabel"?: boolean;
        "type"?: string;
        "value"?: any;
    }
    interface SmoothlyInputClear {
        "color"?: Color;
        "disabled"?: boolean;
        "display"?: boolean;
        "expand"?: "block" | "full";
        "fill"?: Fill;
        "onSmoothlyInputLoad"?: (event: SmoothlyInputClearCustomEvent<(parent: HTMLElement) => void>) => void;
        "shape"?: "rounded";
        "size"?: "small" | "large" | "icon" | "flexible";
        "type"?: "form" | "input";
    }
    interface SmoothlyInputDate {
        "disabled"?: boolean;
        "max"?: Date;
        "min"?: Date;
        "name"?: string;
        "onValueChanged"?: (event: SmoothlyInputDateCustomEvent<Date>) => void;
        "open"?: boolean;
        "value"?: Date;
    }
    interface SmoothlyInputDateRange {
        "end"?: isoly.Date;
        "labelEnd"?: string;
        "labelStart"?: string;
        "max"?: isoly.Date;
        "min"?: isoly.Date;
        "name"?: string;
        "onSmoothlyInput"?: (event: SmoothlyInputDateRangeCustomEvent<Data1>) => void;
        "onValueChanged"?: (event: SmoothlyInputDateRangeCustomEvent<isoly.Date>) => void;
        "open"?: boolean;
        "showLabel"?: boolean;
        "start"?: isoly.Date;
        "value"?: isoly.Date;
    }
    interface SmoothlyInputDemo {
    }
    interface SmoothlyInputFile {
        "accept"?: string;
        "camera"?: "front" | "back";
        "name"?: string;
        "onSmoothlyChange"?: (event: SmoothlyInputFileCustomEvent<Record<string, File>>) => void;
        "onSmoothlyInput"?: (event: SmoothlyInputFileCustomEvent<Record<string, File>>) => void;
        "placeholder"?: string | undefined;
        "showLabel"?: boolean;
        "value"?: File;
    }
    interface SmoothlyInputMonth {
        "onValueChanged"?: (event: SmoothlyInputMonthCustomEvent<Date>) => void;
        "value"?: Date;
    }
    interface SmoothlyInputSelect {
        "initialPrompt"?: string;
        "onSelected"?: (event: SmoothlyInputSelectCustomEvent<any>) => void;
    }
    interface SmoothlyItem {
        "marked"?: boolean;
        "onItemSelected"?: (event: SmoothlyItemCustomEvent<void>) => void;
        "selected"?: boolean;
        "value"?: any;
    }
    interface SmoothlyNotification {
        "closable"?: boolean;
        "icon"?: boolean;
        "notice"?: Notice;
        "onRemove"?: (event: SmoothlyNotificationCustomEvent<Notice>) => void;
    }
    interface SmoothlyNotifier {
    }
    interface SmoothlyPicker {
        "multiple"?: boolean;
        "mutable"?: boolean;
        "name"?: string;
        "onSmoothlyChange"?: (event: SmoothlyPickerCustomEvent<Record<string, any | any[]>>) => void;
        "onSmoothlyInput"?: (event: SmoothlyPickerCustomEvent<Record<string, any | any[]>>) => void;
        "onSmoothlyPickerLoaded"?: (event: SmoothlyPickerCustomEvent<Controls>) => void;
        "open"?: boolean;
        "readonly"?: boolean;
        "validator"?: (value: string) => boolean | { result: boolean; notice: Notice };
    }
    interface SmoothlyPickerDemo {
    }
    interface SmoothlyPickerMenu {
        "multiple"?: boolean;
        "mutable"?: boolean;
        "onNotice"?: (event: SmoothlyPickerMenuCustomEvent<Notice>) => void;
        "onSmoothlyPickerMenuLoaded"?: (event: SmoothlyPickerMenuCustomEvent<Controls>) => void;
        "readonly"?: boolean;
        "validator"?: (value: string) => boolean | { result: boolean; notice: Notice };
    }
    interface SmoothlyPickerOption {
        "onSmoothlyPickerOptionChange"?: (event: SmoothlyPickerOptionCustomEvent<Option>) => void;
        "onSmoothlyPickerOptionLoad"?: (event: SmoothlyPickerOptionCustomEvent<Option.Load>) => void;
        "onSmoothlyPickerOptionLoaded"?: (event: SmoothlyPickerOptionCustomEvent<Option>) => void;
        "search"?: string[];
        "selected"?: boolean;
        "value"?: any;
        "visible"?: boolean;
    }
    interface SmoothlyPopup {
        "direction"?: "up" | "down";
        "onPopup"?: (event: SmoothlyPopupCustomEvent<boolean>) => void;
        "visible"?: boolean;
    }
    interface SmoothlyQuiet {
        "color"?: string;
    }
    interface SmoothlyRadio {
        "checked"?: boolean;
        "name"?: string;
        "onSmoothlySelected"?: (event: SmoothlyRadioCustomEvent<{ name: string; value: string }>) => void;
        "tab"?: number;
        "value"?: string;
    }
    interface SmoothlyRadioButton {
        "decoration"?: "button" | "radio";
        "deselectable"?: boolean;
        "name"?: string;
        "onSmoothlyChange"?: (event: SmoothlyRadioButtonCustomEvent<Record<string, string>>) => void;
        "onSmoothlyInput"?: (event: SmoothlyRadioButtonCustomEvent<Record<string, string>>) => void;
        "value"?: any;
    }
    interface SmoothlyRadioButtonItem {
        "color"?: Color;
        "onRadioItemSelectInternal"?: (event: SmoothlyRadioButtonItemCustomEvent<Selected>) => void;
        "selected"?: boolean;
        "value"?: any;
    }
    interface SmoothlyRadioGroup {
        "orientation"?: "horizontal" | "vertical";
    }
    interface SmoothlyReorder {
        "onReorder"?: (event: SmoothlyReorderCustomEvent<[number, number]>) => void;
    }
    interface SmoothlySelectDemo {
    }
    interface SmoothlySkeleton {
        "align"?: "left" | "center" | "right";
        "color"?: string;
        "distance"?: string;
        "period"?: number;
        "width"?: string;
        "widths"?: string[];
    }
    interface SmoothlySlotElements {
        "clone"?: boolean;
        "nodes"?: Node | Node[];
        "onSmoothlySlotEmpty"?: (event: SmoothlySlotElementsCustomEvent<Slot>) => void;
    }
    interface SmoothlySlottedElements {
        "clone"?: boolean;
        "onSmoothlySlottedChange"?: (event: SmoothlySlottedElementsCustomEvent<Node[]>) => void;
    }
    interface SmoothlySpinner {
        "active"?: boolean;
        "size"?: "small" | "medium" | "large";
    }
    interface SmoothlySubmit {
        "color"?: Color;
        "disabled"?: boolean;
        "expand"?: "block" | "full";
        "fill"?: Fill;
        "onSmoothlyInputLoad"?: (event: SmoothlySubmitCustomEvent<(parent: HTMLElement) => void>) => void;
        "onSmoothlySubmit"?: (event: SmoothlySubmitCustomEvent<any>) => void;
        "prevent"?: boolean;
        "shape"?: "rounded";
        "size"?: "flexible" | "small" | "large" | "icon";
        "type"?: "link" | "button";
    }
    interface SmoothlySummary {
        "color"?: Color;
        "fill"?: Fill;
        "onSmoothlySummaryOpen"?: (event: SmoothlySummaryCustomEvent<boolean>) => void;
        "open"?: boolean;
        "size"?: "tiny" | "small" | "medium" | "large";
    }
    interface SmoothlySvg {
        "color"?: string;
        "size"?: "large" | "medium" | "small" | "tiny" | { height: string; width: string };
        "url": string;
    }
    interface SmoothlyTab {
        "label"?: string;
        "onExpansionOpen"?: (event: SmoothlyTabCustomEvent<HTMLElement>) => void;
        "open"?: boolean;
    }
    interface SmoothlyTabSwitch {
    }
    interface SmoothlyTable {
        "align"?: "middle" | "bottom" | "top";
        "onSmoothlyNestedTable"?: (event: SmoothlyTableCustomEvent<() => void>) => void;
        "onSmoothlySpotlightChange"?: (event: SmoothlyTableCustomEvent<{ allowSpotlight: boolean; owner?: EventTarget }>) => void;
        "onSmoothlyTableLoad"?: (event: SmoothlyTableCustomEvent<(owner: EventTarget) => void>) => void;
        "open"?: boolean;
        "root"?: boolean;
    }
    interface SmoothlyTableCell {
    }
    interface SmoothlyTableDemo {
    }
    interface SmoothlyTableDemoFiltered {
    }
    interface SmoothlyTableExpandableCell {
        "align"?: "left" | "center" | "right";
        "onSmoothlyExpandableChange"?: (event: SmoothlyTableExpandableCellCustomEvent<boolean>) => void;
        "onSmoothlyExpandableLoad"?: (event: SmoothlyTableExpandableCellCustomEvent<{ allowSpotlight: (allowed: boolean) => void }>) => void;
        "onSmoothlyExpansionLoad"?: (event: SmoothlyTableExpandableCellCustomEvent<void>) => void;
        "onSmoothlyExpansionOpen"?: (event: SmoothlyTableExpandableCellCustomEvent<HTMLElement>) => void;
        "open"?: boolean;
    }
    interface SmoothlyTableExpandableRow {
        "align"?: "left" | "center" | "right";
        "onSmoothlyExpandableChange"?: (event: SmoothlyTableExpandableRowCustomEvent<boolean>) => void;
        "onSmoothlyExpandableLoad"?: (event: SmoothlyTableExpandableRowCustomEvent<{ allowSpotlight: (allowed: boolean) => void }>) => void;
        "onSmoothlyExpansionOpen"?: (event: SmoothlyTableExpandableRowCustomEvent<HTMLElement>) => void;
        "open"?: boolean;
    }
    interface SmoothlyTableHeader {
        "name"?: string;
    }
    interface SmoothlyTableRow {
        "open"?: boolean;
    }
    interface SmoothlyTableTesting {
    }
    interface SmoothlyToggle {
        "disabled"?: boolean;
        "name"?: string;
        "selected"?: boolean;
        "shape"?: "rounded";
        "value"?: any;
    }
    interface SmoothlyToggleSwitch {
        "disabled"?: boolean;
        "name"?: string;
        "selected"?: boolean;
        "size"?: "small" | "default" | "large";
        "value"?: any;
    }
    interface SmoothlyTrigger {
        "color"?: Color | undefined;
        "disabled"?: boolean;
        "fill"?: Fill;
        "name"?: string;
        "onTrigger"?: (event: SmoothlyTriggerCustomEvent<Trigger>) => void;
        "type"?: "link" | "button";
        "value"?: any;
    }
    interface SmoothlyTriggerSink {
        "context"?: Window;
        "destination"?: string;
        "filter"?: string;
    }
    interface SmoothlyTriggerSource {
        "listen"?: string;
        "onSmoothlyMessage"?: (event: SmoothlyTriggerSourceCustomEvent<Message<any>>) => void;
        "onTrigger"?: (event: SmoothlyTriggerSourceCustomEvent<Trigger>) => void;
    }
    interface SmoothlyTuple {
        "tuple"?: [string, string];
    }
    interface SmoothlyUrlencoded {
        "data"?: string;
    }
    interface IntrinsicElements {
        "smoothly-accordion": SmoothlyAccordion;
        "smoothly-accordion-item": SmoothlyAccordionItem;
        "smoothly-address": SmoothlyAddress;
        "smoothly-address-display": SmoothlyAddressDisplay;
        "smoothly-addresses": SmoothlyAddresses;
        "smoothly-app": SmoothlyApp;
        "smoothly-app-demo": SmoothlyAppDemo;
        "smoothly-app-room": SmoothlyAppRoom;
        "smoothly-backtotop": SmoothlyBacktotop;
        "smoothly-burger": SmoothlyBurger;
        "smoothly-button": SmoothlyButton;
        "smoothly-button-demo": SmoothlyButtonDemo;
        "smoothly-calendar": SmoothlyCalendar;
        "smoothly-checkbox": SmoothlyCheckbox;
        "smoothly-color": SmoothlyColor;
        "smoothly-country": SmoothlyCountry;
        "smoothly-dialog": SmoothlyDialog;
        "smoothly-dialog-demo": SmoothlyDialogDemo;
        "smoothly-display": SmoothlyDisplay;
        "smoothly-display-amount": SmoothlyDisplayAmount;
        "smoothly-display-date-time": SmoothlyDisplayDateTime;
        "smoothly-display-demo": SmoothlyDisplayDemo;
        "smoothly-filter": SmoothlyFilter;
        "smoothly-filter-input": SmoothlyFilterInput;
        "smoothly-form": SmoothlyForm;
        "smoothly-frame": SmoothlyFrame;
        "smoothly-google-font": SmoothlyGoogleFont;
        "smoothly-icon": SmoothlyIcon;
        "smoothly-icon-demo": SmoothlyIconDemo;
        "smoothly-input": SmoothlyInput;
        "smoothly-input-clear": SmoothlyInputClear;
        "smoothly-input-date": SmoothlyInputDate;
        "smoothly-input-date-range": SmoothlyInputDateRange;
        "smoothly-input-demo": SmoothlyInputDemo;
        "smoothly-input-file": SmoothlyInputFile;
        "smoothly-input-month": SmoothlyInputMonth;
        "smoothly-input-select": SmoothlyInputSelect;
        "smoothly-item": SmoothlyItem;
        "smoothly-notification": SmoothlyNotification;
        "smoothly-notifier": SmoothlyNotifier;
        "smoothly-picker": SmoothlyPicker;
        "smoothly-picker-demo": SmoothlyPickerDemo;
        "smoothly-picker-menu": SmoothlyPickerMenu;
        "smoothly-picker-option": SmoothlyPickerOption;
        "smoothly-popup": SmoothlyPopup;
        "smoothly-quiet": SmoothlyQuiet;
        "smoothly-radio": SmoothlyRadio;
        "smoothly-radio-button": SmoothlyRadioButton;
        "smoothly-radio-button-item": SmoothlyRadioButtonItem;
        "smoothly-radio-group": SmoothlyRadioGroup;
        "smoothly-reorder": SmoothlyReorder;
        "smoothly-select-demo": SmoothlySelectDemo;
        "smoothly-skeleton": SmoothlySkeleton;
        "smoothly-slot-elements": SmoothlySlotElements;
        "smoothly-slotted-elements": SmoothlySlottedElements;
        "smoothly-spinner": SmoothlySpinner;
        "smoothly-submit": SmoothlySubmit;
        "smoothly-summary": SmoothlySummary;
        "smoothly-svg": SmoothlySvg;
        "smoothly-tab": SmoothlyTab;
        "smoothly-tab-switch": SmoothlyTabSwitch;
        "smoothly-table": SmoothlyTable;
        "smoothly-table-cell": SmoothlyTableCell;
        "smoothly-table-demo": SmoothlyTableDemo;
        "smoothly-table-demo-filtered": SmoothlyTableDemoFiltered;
        "smoothly-table-expandable-cell": SmoothlyTableExpandableCell;
        "smoothly-table-expandable-row": SmoothlyTableExpandableRow;
        "smoothly-table-header": SmoothlyTableHeader;
        "smoothly-table-row": SmoothlyTableRow;
        "smoothly-table-testing": SmoothlyTableTesting;
        "smoothly-toggle": SmoothlyToggle;
        "smoothly-toggle-switch": SmoothlyToggleSwitch;
        "smoothly-trigger": SmoothlyTrigger;
        "smoothly-trigger-sink": SmoothlyTriggerSink;
        "smoothly-trigger-source": SmoothlyTriggerSource;
        "smoothly-tuple": SmoothlyTuple;
        "smoothly-urlencoded": SmoothlyUrlencoded;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "smoothly-accordion": LocalJSX.SmoothlyAccordion & JSXBase.HTMLAttributes<HTMLSmoothlyAccordionElement>;
            "smoothly-accordion-item": LocalJSX.SmoothlyAccordionItem & JSXBase.HTMLAttributes<HTMLSmoothlyAccordionItemElement>;
            "smoothly-address": LocalJSX.SmoothlyAddress & JSXBase.HTMLAttributes<HTMLSmoothlyAddressElement>;
            "smoothly-address-display": LocalJSX.SmoothlyAddressDisplay & JSXBase.HTMLAttributes<HTMLSmoothlyAddressDisplayElement>;
            "smoothly-addresses": LocalJSX.SmoothlyAddresses & JSXBase.HTMLAttributes<HTMLSmoothlyAddressesElement>;
            "smoothly-app": LocalJSX.SmoothlyApp & JSXBase.HTMLAttributes<HTMLSmoothlyAppElement>;
            "smoothly-app-demo": LocalJSX.SmoothlyAppDemo & JSXBase.HTMLAttributes<HTMLSmoothlyAppDemoElement>;
            "smoothly-app-room": LocalJSX.SmoothlyAppRoom & JSXBase.HTMLAttributes<HTMLSmoothlyAppRoomElement>;
            "smoothly-backtotop": LocalJSX.SmoothlyBacktotop & JSXBase.HTMLAttributes<HTMLSmoothlyBacktotopElement>;
            "smoothly-burger": LocalJSX.SmoothlyBurger & JSXBase.HTMLAttributes<HTMLSmoothlyBurgerElement>;
            "smoothly-button": LocalJSX.SmoothlyButton & JSXBase.HTMLAttributes<HTMLSmoothlyButtonElement>;
            "smoothly-button-demo": LocalJSX.SmoothlyButtonDemo & JSXBase.HTMLAttributes<HTMLSmoothlyButtonDemoElement>;
            "smoothly-calendar": LocalJSX.SmoothlyCalendar & JSXBase.HTMLAttributes<HTMLSmoothlyCalendarElement>;
            "smoothly-checkbox": LocalJSX.SmoothlyCheckbox & JSXBase.HTMLAttributes<HTMLSmoothlyCheckboxElement>;
            "smoothly-color": LocalJSX.SmoothlyColor & JSXBase.HTMLAttributes<HTMLSmoothlyColorElement>;
            "smoothly-country": LocalJSX.SmoothlyCountry & JSXBase.HTMLAttributes<HTMLSmoothlyCountryElement>;
            "smoothly-dialog": LocalJSX.SmoothlyDialog & JSXBase.HTMLAttributes<HTMLSmoothlyDialogElement>;
            "smoothly-dialog-demo": LocalJSX.SmoothlyDialogDemo & JSXBase.HTMLAttributes<HTMLSmoothlyDialogDemoElement>;
            "smoothly-display": LocalJSX.SmoothlyDisplay & JSXBase.HTMLAttributes<HTMLSmoothlyDisplayElement>;
            "smoothly-display-amount": LocalJSX.SmoothlyDisplayAmount & JSXBase.HTMLAttributes<HTMLSmoothlyDisplayAmountElement>;
            /**
             * DEPRECATED, use  <smoothly-display type="date-time">
             */
            "smoothly-display-date-time": LocalJSX.SmoothlyDisplayDateTime & JSXBase.HTMLAttributes<HTMLSmoothlyDisplayDateTimeElement>;
            "smoothly-display-demo": LocalJSX.SmoothlyDisplayDemo & JSXBase.HTMLAttributes<HTMLSmoothlyDisplayDemoElement>;
            "smoothly-filter": LocalJSX.SmoothlyFilter & JSXBase.HTMLAttributes<HTMLSmoothlyFilterElement>;
            "smoothly-filter-input": LocalJSX.SmoothlyFilterInput & JSXBase.HTMLAttributes<HTMLSmoothlyFilterInputElement>;
            "smoothly-form": LocalJSX.SmoothlyForm & JSXBase.HTMLAttributes<HTMLSmoothlyFormElement>;
            "smoothly-frame": LocalJSX.SmoothlyFrame & JSXBase.HTMLAttributes<HTMLSmoothlyFrameElement>;
            "smoothly-google-font": LocalJSX.SmoothlyGoogleFont & JSXBase.HTMLAttributes<HTMLSmoothlyGoogleFontElement>;
            "smoothly-icon": LocalJSX.SmoothlyIcon & JSXBase.HTMLAttributes<HTMLSmoothlyIconElement>;
            "smoothly-icon-demo": LocalJSX.SmoothlyIconDemo & JSXBase.HTMLAttributes<HTMLSmoothlyIconDemoElement>;
            "smoothly-input": LocalJSX.SmoothlyInput & JSXBase.HTMLAttributes<HTMLSmoothlyInputElement>;
            "smoothly-input-clear": LocalJSX.SmoothlyInputClear & JSXBase.HTMLAttributes<HTMLSmoothlyInputClearElement>;
            "smoothly-input-date": LocalJSX.SmoothlyInputDate & JSXBase.HTMLAttributes<HTMLSmoothlyInputDateElement>;
            "smoothly-input-date-range": LocalJSX.SmoothlyInputDateRange & JSXBase.HTMLAttributes<HTMLSmoothlyInputDateRangeElement>;
            "smoothly-input-demo": LocalJSX.SmoothlyInputDemo & JSXBase.HTMLAttributes<HTMLSmoothlyInputDemoElement>;
            "smoothly-input-file": LocalJSX.SmoothlyInputFile & JSXBase.HTMLAttributes<HTMLSmoothlyInputFileElement>;
            "smoothly-input-month": LocalJSX.SmoothlyInputMonth & JSXBase.HTMLAttributes<HTMLSmoothlyInputMonthElement>;
            "smoothly-input-select": LocalJSX.SmoothlyInputSelect & JSXBase.HTMLAttributes<HTMLSmoothlyInputSelectElement>;
            "smoothly-item": LocalJSX.SmoothlyItem & JSXBase.HTMLAttributes<HTMLSmoothlyItemElement>;
            "smoothly-notification": LocalJSX.SmoothlyNotification & JSXBase.HTMLAttributes<HTMLSmoothlyNotificationElement>;
            "smoothly-notifier": LocalJSX.SmoothlyNotifier & JSXBase.HTMLAttributes<HTMLSmoothlyNotifierElement>;
            "smoothly-picker": LocalJSX.SmoothlyPicker & JSXBase.HTMLAttributes<HTMLSmoothlyPickerElement>;
            "smoothly-picker-demo": LocalJSX.SmoothlyPickerDemo & JSXBase.HTMLAttributes<HTMLSmoothlyPickerDemoElement>;
            "smoothly-picker-menu": LocalJSX.SmoothlyPickerMenu & JSXBase.HTMLAttributes<HTMLSmoothlyPickerMenuElement>;
            "smoothly-picker-option": LocalJSX.SmoothlyPickerOption & JSXBase.HTMLAttributes<HTMLSmoothlyPickerOptionElement>;
            "smoothly-popup": LocalJSX.SmoothlyPopup & JSXBase.HTMLAttributes<HTMLSmoothlyPopupElement>;
            "smoothly-quiet": LocalJSX.SmoothlyQuiet & JSXBase.HTMLAttributes<HTMLSmoothlyQuietElement>;
            "smoothly-radio": LocalJSX.SmoothlyRadio & JSXBase.HTMLAttributes<HTMLSmoothlyRadioElement>;
            "smoothly-radio-button": LocalJSX.SmoothlyRadioButton & JSXBase.HTMLAttributes<HTMLSmoothlyRadioButtonElement>;
            "smoothly-radio-button-item": LocalJSX.SmoothlyRadioButtonItem & JSXBase.HTMLAttributes<HTMLSmoothlyRadioButtonItemElement>;
            "smoothly-radio-group": LocalJSX.SmoothlyRadioGroup & JSXBase.HTMLAttributes<HTMLSmoothlyRadioGroupElement>;
            "smoothly-reorder": LocalJSX.SmoothlyReorder & JSXBase.HTMLAttributes<HTMLSmoothlyReorderElement>;
            "smoothly-select-demo": LocalJSX.SmoothlySelectDemo & JSXBase.HTMLAttributes<HTMLSmoothlySelectDemoElement>;
            "smoothly-skeleton": LocalJSX.SmoothlySkeleton & JSXBase.HTMLAttributes<HTMLSmoothlySkeletonElement>;
            "smoothly-slot-elements": LocalJSX.SmoothlySlotElements & JSXBase.HTMLAttributes<HTMLSmoothlySlotElementsElement>;
            "smoothly-slotted-elements": LocalJSX.SmoothlySlottedElements & JSXBase.HTMLAttributes<HTMLSmoothlySlottedElementsElement>;
            "smoothly-spinner": LocalJSX.SmoothlySpinner & JSXBase.HTMLAttributes<HTMLSmoothlySpinnerElement>;
            "smoothly-submit": LocalJSX.SmoothlySubmit & JSXBase.HTMLAttributes<HTMLSmoothlySubmitElement>;
            "smoothly-summary": LocalJSX.SmoothlySummary & JSXBase.HTMLAttributes<HTMLSmoothlySummaryElement>;
            "smoothly-svg": LocalJSX.SmoothlySvg & JSXBase.HTMLAttributes<HTMLSmoothlySvgElement>;
            "smoothly-tab": LocalJSX.SmoothlyTab & JSXBase.HTMLAttributes<HTMLSmoothlyTabElement>;
            "smoothly-tab-switch": LocalJSX.SmoothlyTabSwitch & JSXBase.HTMLAttributes<HTMLSmoothlyTabSwitchElement>;
            "smoothly-table": LocalJSX.SmoothlyTable & JSXBase.HTMLAttributes<HTMLSmoothlyTableElement>;
            "smoothly-table-cell": LocalJSX.SmoothlyTableCell & JSXBase.HTMLAttributes<HTMLSmoothlyTableCellElement>;
            "smoothly-table-demo": LocalJSX.SmoothlyTableDemo & JSXBase.HTMLAttributes<HTMLSmoothlyTableDemoElement>;
            "smoothly-table-demo-filtered": LocalJSX.SmoothlyTableDemoFiltered & JSXBase.HTMLAttributes<HTMLSmoothlyTableDemoFilteredElement>;
            "smoothly-table-expandable-cell": LocalJSX.SmoothlyTableExpandableCell & JSXBase.HTMLAttributes<HTMLSmoothlyTableExpandableCellElement>;
            "smoothly-table-expandable-row": LocalJSX.SmoothlyTableExpandableRow & JSXBase.HTMLAttributes<HTMLSmoothlyTableExpandableRowElement>;
            "smoothly-table-header": LocalJSX.SmoothlyTableHeader & JSXBase.HTMLAttributes<HTMLSmoothlyTableHeaderElement>;
            "smoothly-table-row": LocalJSX.SmoothlyTableRow & JSXBase.HTMLAttributes<HTMLSmoothlyTableRowElement>;
            "smoothly-table-testing": LocalJSX.SmoothlyTableTesting & JSXBase.HTMLAttributes<HTMLSmoothlyTableTestingElement>;
            "smoothly-toggle": LocalJSX.SmoothlyToggle & JSXBase.HTMLAttributes<HTMLSmoothlyToggleElement>;
            "smoothly-toggle-switch": LocalJSX.SmoothlyToggleSwitch & JSXBase.HTMLAttributes<HTMLSmoothlyToggleSwitchElement>;
            "smoothly-trigger": LocalJSX.SmoothlyTrigger & JSXBase.HTMLAttributes<HTMLSmoothlyTriggerElement>;
            "smoothly-trigger-sink": LocalJSX.SmoothlyTriggerSink & JSXBase.HTMLAttributes<HTMLSmoothlyTriggerSinkElement>;
            "smoothly-trigger-source": LocalJSX.SmoothlyTriggerSource & JSXBase.HTMLAttributes<HTMLSmoothlyTriggerSourceElement>;
            "smoothly-tuple": LocalJSX.SmoothlyTuple & JSXBase.HTMLAttributes<HTMLSmoothlyTupleElement>;
            "smoothly-urlencoded": LocalJSX.SmoothlyUrlencoded & JSXBase.HTMLAttributes<HTMLSmoothlyUrlencodedElement>;
        }
    }
}
