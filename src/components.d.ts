/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Color, Expand, Fill, Message, Notice, Option, Trigger } from "./model";
import { CountryCode, Currency, Date, DateRange, DateTime } from "isoly";
import { Direction, Type } from "tidily";
import { GoogleFont } from "./model/GoogleFont";
import { Selected } from "./components/radio-button/Selected";
import { Data } from "./components/submit/Data";
export namespace Components {
    interface Smoothly0Accordion {
        "value"?: string;
    }
    interface Smoothly0AccordionItem {
        "brand"?: string | string[];
        "name": string;
        "open"?: boolean;
    }
    interface Smoothly0App {
        "color": Color;
    }
    interface Smoothly0AppDemo {
        "baseUrl": string;
    }
    interface Smoothly0Backtotop {
        "bottom": string;
        "opacity": string;
        "right": string;
    }
    interface Smoothly0Button {
        "color": Color | undefined;
        "disabled": boolean;
        "download"?: boolean;
        "expand": Expand;
        "fill": Fill;
        "link"?: string;
        "type": "link" | "button";
    }
    interface Smoothly0Calendar {
        "color"?: Color;
        "doubleInput": boolean;
        "end"?: Date;
        "max": Date;
        "min": Date;
        "month"?: Date;
        "start"?: Date;
        "value": Date;
    }
    interface Smoothly0Checkbox {
        "disabled": boolean;
        "intermediate": boolean;
        "selectAll": boolean;
        "selected": boolean;
        "size": "tiny" | "small" | "medium" | "large";
    }
    interface Smoothly0Country {
        "text": "alpha2" | "name" | "none";
        "value": CountryCode.Alpha2;
    }
    interface Smoothly0Dialog {
        "closable": boolean;
        "color": Color | undefined;
        "header": string | undefined;
        "open": boolean;
    }
    interface Smoothly0DialogDemo {
    }
    interface Smoothly0Display {
        "country"?: CountryCode.Alpha2;
        "currency"?: Currency;
        "format"?: DateTime.Format;
        "type": Type;
        "value"?: any;
    }
    interface Smoothly0DisplayAmount {
        "amount": number | string;
        "currency": Currency;
        "toInteger": boolean;
    }
    /**
     * DEPRECATED, use  <smoothly-0-display type="date-time">
     */
    interface Smoothly0DisplayDateTime {
        "datetime": DateTime;
    }
    interface Smoothly0DisplayDemo {
    }
    interface Smoothly0Frame {
        "name": string;
        "origin": string | undefined;
        "send": (message: string | Message<any>, content?: Trigger | any) => Promise<void>;
        "url": string;
    }
    interface Smoothly0GoogleFont {
        "value"?: GoogleFont;
    }
    interface Smoothly0Icon {
        "color": Color;
        "fill": Fill;
        "name"?: string;
        "size": "tiny" | "small" | "medium" | "large";
        "toolTip"?: string;
    }
    interface Smoothly0IconDemo {
    }
    interface Smoothly0Input {
        "autocomplete": boolean;
        "currency"?: Currency;
        "disabled": boolean;
        "getFormData": (name: string) => Promise<Record<string, any>>;
        "maxLength": number;
        "minLength": number;
        "name": string;
        "pattern": RegExp | undefined;
        "placeholder": string | undefined;
        "readonly": boolean;
        "required": boolean;
        "setKeepFocusOnReRender": (keepFocus: boolean) => Promise<void>;
        "setSelectionRange": (start: number, end: number, direction?: Direction) => Promise<void>;
        "showLabel": boolean;
        "type": string;
        "value": any;
    }
    interface Smoothly0InputDate {
        "color": Color;
        "disabled": boolean;
        "flexible": boolean;
        "max": Date;
        "min": Date;
        "name": string;
        "open": boolean;
        "value"?: Date;
    }
    interface Smoothly0InputDateRange {
        "clear": () => Promise<void>;
        "clearable": boolean;
        "disabled": boolean;
        "end"?: Date;
        "labelEnd": string;
        "labelStart": string;
        "max": Date;
        "min": Date;
        "open": boolean;
        "showLabel": boolean;
        "start"?: Date;
        "value"?: Date;
    }
    interface Smoothly0InputDemo {
    }
    interface Smoothly0InputMonth {
        "value"?: Date;
    }
    interface Smoothly0Item {
        "filter": (filter: string) => Promise<boolean>;
        "marked": boolean;
        "selected": boolean;
        "value": any;
    }
    interface Smoothly0MenuOptions {
        "emptyMenuLabel": string;
        "filterOptions": (keyword: string, excludeValues?: string[]) => Promise<void>;
        "getHighlighted": () => Promise<Option | undefined>;
        "maxMenuHeight": "inherit";
        "moveHighlight": (step: number) => Promise<void>;
        "mutable": boolean;
        "newOptionLabel": string;
        "optionStyle": any;
        "options": Option[];
        "order": boolean;
        "resetHighlightOnOptionsChange": boolean;
        "setHighlight": (newIndex: number | string, scrollToHighlight?: boolean) => Promise<void>;
        "toggle": boolean;
    }
    interface Smoothly0Notification {
        "notice": Notice;
    }
    interface Smoothly0Notifier {
    }
    interface Smoothly0Option {
        "aliases": string;
        "checkbox": boolean;
        "checked": boolean;
        "dataHighlight": boolean;
        "divider"?: boolean;
        "name": string;
        "new"?: boolean;
        "toggle": boolean;
        "value": string;
    }
    interface Smoothly0Picker {
        "disabled": boolean;
        "emptyMenuLabel": string;
        "label": string;
        "labelSetting": "hide" | "default";
        "maxHeight": string;
        "maxMenuHeight": string;
        "multiple": boolean;
        "mutable": boolean;
        "newOptionLabel": string;
        "optionStyle": any;
        "options": (Option & { checked?: boolean })[];
        "readonly": boolean;
        "selectAllEnabled": boolean;
        "selectAllName": string;
        "selectNoneName": string;
        "selectionName": string;
        "selections": Option[];
        "valueValidator": (value: any) => [boolean, Notice | undefined];
    }
    interface Smoothly0Popup {
        "direction": "up" | "down";
        "visible": boolean;
    }
    interface Smoothly0Quiet {
        "color": string;
    }
    interface Smoothly0Radio {
        "checked": boolean;
        "name": string;
        "tabIndex": number;
        "value": string;
    }
    interface Smoothly0RadioButton {
        "decoration": "button" | "radio";
        "deselectable"?: boolean;
        "name"?: string;
        "value"?: any;
    }
    interface Smoothly0RadioButtonItem {
        "color": Color;
        "disabled": boolean;
        "iconColor": Color;
        "selected": boolean;
        "value": any;
    }
    interface Smoothly0RadioGroup {
        "orientation"?: "horizontal" | "vertical";
    }
    interface Smoothly0Reorder {
    }
    interface Smoothly0Room {
        "icon"?: string;
        "label"?: string;
        "path": string | RegExp;
        "to"?: string;
    }
    interface Smoothly0Select {
        "background"?: string;
        "identifier": string;
        "value": string;
    }
    interface Smoothly0SelectDemo {
    }
    interface Smoothly0Selector {
        "disableFilter": boolean;
        "initialPrompt"?: string;
        "reset": () => Promise<void>;
    }
    interface Smoothly0Skeleton {
        "align": "left" | "center" | "right";
        "color": string;
        "distance": string;
        "period": number;
        "width": string;
        "widths": string[];
    }
    interface Smoothly0Spinner {
        "active": boolean;
        "size": "small" | "medium" | "large";
    }
    interface Smoothly0Submit {
        "color"?: Color;
        "disabled": boolean;
        "expand"?: Expand;
        "fill"?: Fill;
        "prevent"?: boolean;
        "processing": boolean;
        "submit": () => Promise<boolean>;
    }
    interface Smoothly0Svg {
        "color": string;
        "size"?: "large" | "medium" | "small" | "tiny" | { height: string; width: string };
        "url": string;
    }
    interface Smoothly0Tab {
        "label": string;
        "open": boolean;
    }
    interface Smoothly0TabSwitch {
    }
    interface Smoothly0Table {
        "root": boolean;
    }
    interface Smoothly0TableCell {
    }
    interface Smoothly0TableDemo {
    }
    interface Smoothly0TableExpandableCell {
        "align": "left" | "center" | "right";
        "open": boolean;
    }
    interface Smoothly0TableExpandableRow {
        "align": "left" | "center" | "right";
        "open": boolean;
    }
    interface Smoothly0TableHeader {
        "name": string;
    }
    interface Smoothly0TableRow {
    }
    interface Smoothly0Trigger {
        "color": Color | undefined;
        "disabled": boolean;
        "expand": Expand;
        "fill": Fill;
        "name": string;
        "type": "link" | "button";
        "value"?: any;
    }
    interface Smoothly0TriggerSink {
        "context"?: Window;
        "destination": string;
        "filter"?: string;
    }
    interface Smoothly0TriggerSource {
        "listen": string;
    }
    interface Smoothly0Tuple {
        "tuple": [string, string];
    }
    interface Smoothly0Urlencoded {
        "data": string;
    }
}
export interface Smoothly0AccordionItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothly0AccordionItemElement;
}
export interface Smoothly0CalendarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothly0CalendarElement;
}
export interface Smoothly0CheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothly0CheckboxElement;
}
export interface Smoothly0DisplayDemoCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothly0DisplayDemoElement;
}
export interface Smoothly0FrameCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothly0FrameElement;
}
export interface Smoothly0InputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothly0InputElement;
}
export interface Smoothly0InputDateCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothly0InputDateElement;
}
export interface Smoothly0InputDateRangeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothly0InputDateRangeElement;
}
export interface Smoothly0InputMonthCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothly0InputMonthElement;
}
export interface Smoothly0ItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothly0ItemElement;
}
export interface Smoothly0MenuOptionsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothly0MenuOptionsElement;
}
export interface Smoothly0NotificationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothly0NotificationElement;
}
export interface Smoothly0OptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothly0OptionElement;
}
export interface Smoothly0PickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothly0PickerElement;
}
export interface Smoothly0PopupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothly0PopupElement;
}
export interface Smoothly0RadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothly0RadioElement;
}
export interface Smoothly0RadioButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothly0RadioButtonElement;
}
export interface Smoothly0RadioButtonItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothly0RadioButtonItemElement;
}
export interface Smoothly0ReorderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothly0ReorderElement;
}
export interface Smoothly0SelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothly0SelectElement;
}
export interface Smoothly0SelectorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothly0SelectorElement;
}
export interface Smoothly0SubmitCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothly0SubmitElement;
}
export interface Smoothly0TabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothly0TabElement;
}
export interface Smoothly0TableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothly0TableElement;
}
export interface Smoothly0TableExpandableCellCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothly0TableExpandableCellElement;
}
export interface Smoothly0TableExpandableRowCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothly0TableExpandableRowElement;
}
export interface Smoothly0TriggerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothly0TriggerElement;
}
export interface Smoothly0TriggerSourceCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSmoothly0TriggerSourceElement;
}
declare global {
    interface HTMLSmoothly0AccordionElement extends Components.Smoothly0Accordion, HTMLStencilElement {
    }
    var HTMLSmoothly0AccordionElement: {
        prototype: HTMLSmoothly0AccordionElement;
        new (): HTMLSmoothly0AccordionElement;
    };
    interface HTMLSmoothly0AccordionItemElement extends Components.Smoothly0AccordionItem, HTMLStencilElement {
    }
    var HTMLSmoothly0AccordionItemElement: {
        prototype: HTMLSmoothly0AccordionItemElement;
        new (): HTMLSmoothly0AccordionItemElement;
    };
    interface HTMLSmoothly0AppElement extends Components.Smoothly0App, HTMLStencilElement {
    }
    var HTMLSmoothly0AppElement: {
        prototype: HTMLSmoothly0AppElement;
        new (): HTMLSmoothly0AppElement;
    };
    interface HTMLSmoothly0AppDemoElement extends Components.Smoothly0AppDemo, HTMLStencilElement {
    }
    var HTMLSmoothly0AppDemoElement: {
        prototype: HTMLSmoothly0AppDemoElement;
        new (): HTMLSmoothly0AppDemoElement;
    };
    interface HTMLSmoothly0BacktotopElement extends Components.Smoothly0Backtotop, HTMLStencilElement {
    }
    var HTMLSmoothly0BacktotopElement: {
        prototype: HTMLSmoothly0BacktotopElement;
        new (): HTMLSmoothly0BacktotopElement;
    };
    interface HTMLSmoothly0ButtonElement extends Components.Smoothly0Button, HTMLStencilElement {
    }
    var HTMLSmoothly0ButtonElement: {
        prototype: HTMLSmoothly0ButtonElement;
        new (): HTMLSmoothly0ButtonElement;
    };
    interface HTMLSmoothly0CalendarElement extends Components.Smoothly0Calendar, HTMLStencilElement {
    }
    var HTMLSmoothly0CalendarElement: {
        prototype: HTMLSmoothly0CalendarElement;
        new (): HTMLSmoothly0CalendarElement;
    };
    interface HTMLSmoothly0CheckboxElement extends Components.Smoothly0Checkbox, HTMLStencilElement {
    }
    var HTMLSmoothly0CheckboxElement: {
        prototype: HTMLSmoothly0CheckboxElement;
        new (): HTMLSmoothly0CheckboxElement;
    };
    interface HTMLSmoothly0CountryElement extends Components.Smoothly0Country, HTMLStencilElement {
    }
    var HTMLSmoothly0CountryElement: {
        prototype: HTMLSmoothly0CountryElement;
        new (): HTMLSmoothly0CountryElement;
    };
    interface HTMLSmoothly0DialogElement extends Components.Smoothly0Dialog, HTMLStencilElement {
    }
    var HTMLSmoothly0DialogElement: {
        prototype: HTMLSmoothly0DialogElement;
        new (): HTMLSmoothly0DialogElement;
    };
    interface HTMLSmoothly0DialogDemoElement extends Components.Smoothly0DialogDemo, HTMLStencilElement {
    }
    var HTMLSmoothly0DialogDemoElement: {
        prototype: HTMLSmoothly0DialogDemoElement;
        new (): HTMLSmoothly0DialogDemoElement;
    };
    interface HTMLSmoothly0DisplayElement extends Components.Smoothly0Display, HTMLStencilElement {
    }
    var HTMLSmoothly0DisplayElement: {
        prototype: HTMLSmoothly0DisplayElement;
        new (): HTMLSmoothly0DisplayElement;
    };
    interface HTMLSmoothly0DisplayAmountElement extends Components.Smoothly0DisplayAmount, HTMLStencilElement {
    }
    var HTMLSmoothly0DisplayAmountElement: {
        prototype: HTMLSmoothly0DisplayAmountElement;
        new (): HTMLSmoothly0DisplayAmountElement;
    };
    /**
     * DEPRECATED, use  <smoothly-0-display type="date-time">
     */
    interface HTMLSmoothly0DisplayDateTimeElement extends Components.Smoothly0DisplayDateTime, HTMLStencilElement {
    }
    var HTMLSmoothly0DisplayDateTimeElement: {
        prototype: HTMLSmoothly0DisplayDateTimeElement;
        new (): HTMLSmoothly0DisplayDateTimeElement;
    };
    interface HTMLSmoothly0DisplayDemoElement extends Components.Smoothly0DisplayDemo, HTMLStencilElement {
    }
    var HTMLSmoothly0DisplayDemoElement: {
        prototype: HTMLSmoothly0DisplayDemoElement;
        new (): HTMLSmoothly0DisplayDemoElement;
    };
    interface HTMLSmoothly0FrameElement extends Components.Smoothly0Frame, HTMLStencilElement {
    }
    var HTMLSmoothly0FrameElement: {
        prototype: HTMLSmoothly0FrameElement;
        new (): HTMLSmoothly0FrameElement;
    };
    interface HTMLSmoothly0GoogleFontElement extends Components.Smoothly0GoogleFont, HTMLStencilElement {
    }
    var HTMLSmoothly0GoogleFontElement: {
        prototype: HTMLSmoothly0GoogleFontElement;
        new (): HTMLSmoothly0GoogleFontElement;
    };
    interface HTMLSmoothly0IconElement extends Components.Smoothly0Icon, HTMLStencilElement {
    }
    var HTMLSmoothly0IconElement: {
        prototype: HTMLSmoothly0IconElement;
        new (): HTMLSmoothly0IconElement;
    };
    interface HTMLSmoothly0IconDemoElement extends Components.Smoothly0IconDemo, HTMLStencilElement {
    }
    var HTMLSmoothly0IconDemoElement: {
        prototype: HTMLSmoothly0IconDemoElement;
        new (): HTMLSmoothly0IconDemoElement;
    };
    interface HTMLSmoothly0InputElement extends Components.Smoothly0Input, HTMLStencilElement {
    }
    var HTMLSmoothly0InputElement: {
        prototype: HTMLSmoothly0InputElement;
        new (): HTMLSmoothly0InputElement;
    };
    interface HTMLSmoothly0InputDateElement extends Components.Smoothly0InputDate, HTMLStencilElement {
    }
    var HTMLSmoothly0InputDateElement: {
        prototype: HTMLSmoothly0InputDateElement;
        new (): HTMLSmoothly0InputDateElement;
    };
    interface HTMLSmoothly0InputDateRangeElement extends Components.Smoothly0InputDateRange, HTMLStencilElement {
    }
    var HTMLSmoothly0InputDateRangeElement: {
        prototype: HTMLSmoothly0InputDateRangeElement;
        new (): HTMLSmoothly0InputDateRangeElement;
    };
    interface HTMLSmoothly0InputDemoElement extends Components.Smoothly0InputDemo, HTMLStencilElement {
    }
    var HTMLSmoothly0InputDemoElement: {
        prototype: HTMLSmoothly0InputDemoElement;
        new (): HTMLSmoothly0InputDemoElement;
    };
    interface HTMLSmoothly0InputMonthElement extends Components.Smoothly0InputMonth, HTMLStencilElement {
    }
    var HTMLSmoothly0InputMonthElement: {
        prototype: HTMLSmoothly0InputMonthElement;
        new (): HTMLSmoothly0InputMonthElement;
    };
    interface HTMLSmoothly0ItemElement extends Components.Smoothly0Item, HTMLStencilElement {
    }
    var HTMLSmoothly0ItemElement: {
        prototype: HTMLSmoothly0ItemElement;
        new (): HTMLSmoothly0ItemElement;
    };
    interface HTMLSmoothly0MenuOptionsElement extends Components.Smoothly0MenuOptions, HTMLStencilElement {
    }
    var HTMLSmoothly0MenuOptionsElement: {
        prototype: HTMLSmoothly0MenuOptionsElement;
        new (): HTMLSmoothly0MenuOptionsElement;
    };
    interface HTMLSmoothly0NotificationElement extends Components.Smoothly0Notification, HTMLStencilElement {
    }
    var HTMLSmoothly0NotificationElement: {
        prototype: HTMLSmoothly0NotificationElement;
        new (): HTMLSmoothly0NotificationElement;
    };
    interface HTMLSmoothly0NotifierElement extends Components.Smoothly0Notifier, HTMLStencilElement {
    }
    var HTMLSmoothly0NotifierElement: {
        prototype: HTMLSmoothly0NotifierElement;
        new (): HTMLSmoothly0NotifierElement;
    };
    interface HTMLSmoothly0OptionElement extends Components.Smoothly0Option, HTMLStencilElement {
    }
    var HTMLSmoothly0OptionElement: {
        prototype: HTMLSmoothly0OptionElement;
        new (): HTMLSmoothly0OptionElement;
    };
    interface HTMLSmoothly0PickerElement extends Components.Smoothly0Picker, HTMLStencilElement {
    }
    var HTMLSmoothly0PickerElement: {
        prototype: HTMLSmoothly0PickerElement;
        new (): HTMLSmoothly0PickerElement;
    };
    interface HTMLSmoothly0PopupElement extends Components.Smoothly0Popup, HTMLStencilElement {
    }
    var HTMLSmoothly0PopupElement: {
        prototype: HTMLSmoothly0PopupElement;
        new (): HTMLSmoothly0PopupElement;
    };
    interface HTMLSmoothly0QuietElement extends Components.Smoothly0Quiet, HTMLStencilElement {
    }
    var HTMLSmoothly0QuietElement: {
        prototype: HTMLSmoothly0QuietElement;
        new (): HTMLSmoothly0QuietElement;
    };
    interface HTMLSmoothly0RadioElement extends Components.Smoothly0Radio, HTMLStencilElement {
    }
    var HTMLSmoothly0RadioElement: {
        prototype: HTMLSmoothly0RadioElement;
        new (): HTMLSmoothly0RadioElement;
    };
    interface HTMLSmoothly0RadioButtonElement extends Components.Smoothly0RadioButton, HTMLStencilElement {
    }
    var HTMLSmoothly0RadioButtonElement: {
        prototype: HTMLSmoothly0RadioButtonElement;
        new (): HTMLSmoothly0RadioButtonElement;
    };
    interface HTMLSmoothly0RadioButtonItemElement extends Components.Smoothly0RadioButtonItem, HTMLStencilElement {
    }
    var HTMLSmoothly0RadioButtonItemElement: {
        prototype: HTMLSmoothly0RadioButtonItemElement;
        new (): HTMLSmoothly0RadioButtonItemElement;
    };
    interface HTMLSmoothly0RadioGroupElement extends Components.Smoothly0RadioGroup, HTMLStencilElement {
    }
    var HTMLSmoothly0RadioGroupElement: {
        prototype: HTMLSmoothly0RadioGroupElement;
        new (): HTMLSmoothly0RadioGroupElement;
    };
    interface HTMLSmoothly0ReorderElement extends Components.Smoothly0Reorder, HTMLStencilElement {
    }
    var HTMLSmoothly0ReorderElement: {
        prototype: HTMLSmoothly0ReorderElement;
        new (): HTMLSmoothly0ReorderElement;
    };
    interface HTMLSmoothly0RoomElement extends Components.Smoothly0Room, HTMLStencilElement {
    }
    var HTMLSmoothly0RoomElement: {
        prototype: HTMLSmoothly0RoomElement;
        new (): HTMLSmoothly0RoomElement;
    };
    interface HTMLSmoothly0SelectElement extends Components.Smoothly0Select, HTMLStencilElement {
    }
    var HTMLSmoothly0SelectElement: {
        prototype: HTMLSmoothly0SelectElement;
        new (): HTMLSmoothly0SelectElement;
    };
    interface HTMLSmoothly0SelectDemoElement extends Components.Smoothly0SelectDemo, HTMLStencilElement {
    }
    var HTMLSmoothly0SelectDemoElement: {
        prototype: HTMLSmoothly0SelectDemoElement;
        new (): HTMLSmoothly0SelectDemoElement;
    };
    interface HTMLSmoothly0SelectorElement extends Components.Smoothly0Selector, HTMLStencilElement {
    }
    var HTMLSmoothly0SelectorElement: {
        prototype: HTMLSmoothly0SelectorElement;
        new (): HTMLSmoothly0SelectorElement;
    };
    interface HTMLSmoothly0SkeletonElement extends Components.Smoothly0Skeleton, HTMLStencilElement {
    }
    var HTMLSmoothly0SkeletonElement: {
        prototype: HTMLSmoothly0SkeletonElement;
        new (): HTMLSmoothly0SkeletonElement;
    };
    interface HTMLSmoothly0SpinnerElement extends Components.Smoothly0Spinner, HTMLStencilElement {
    }
    var HTMLSmoothly0SpinnerElement: {
        prototype: HTMLSmoothly0SpinnerElement;
        new (): HTMLSmoothly0SpinnerElement;
    };
    interface HTMLSmoothly0SubmitElement extends Components.Smoothly0Submit, HTMLStencilElement {
    }
    var HTMLSmoothly0SubmitElement: {
        prototype: HTMLSmoothly0SubmitElement;
        new (): HTMLSmoothly0SubmitElement;
    };
    interface HTMLSmoothly0SvgElement extends Components.Smoothly0Svg, HTMLStencilElement {
    }
    var HTMLSmoothly0SvgElement: {
        prototype: HTMLSmoothly0SvgElement;
        new (): HTMLSmoothly0SvgElement;
    };
    interface HTMLSmoothly0TabElement extends Components.Smoothly0Tab, HTMLStencilElement {
    }
    var HTMLSmoothly0TabElement: {
        prototype: HTMLSmoothly0TabElement;
        new (): HTMLSmoothly0TabElement;
    };
    interface HTMLSmoothly0TabSwitchElement extends Components.Smoothly0TabSwitch, HTMLStencilElement {
    }
    var HTMLSmoothly0TabSwitchElement: {
        prototype: HTMLSmoothly0TabSwitchElement;
        new (): HTMLSmoothly0TabSwitchElement;
    };
    interface HTMLSmoothly0TableElement extends Components.Smoothly0Table, HTMLStencilElement {
    }
    var HTMLSmoothly0TableElement: {
        prototype: HTMLSmoothly0TableElement;
        new (): HTMLSmoothly0TableElement;
    };
    interface HTMLSmoothly0TableCellElement extends Components.Smoothly0TableCell, HTMLStencilElement {
    }
    var HTMLSmoothly0TableCellElement: {
        prototype: HTMLSmoothly0TableCellElement;
        new (): HTMLSmoothly0TableCellElement;
    };
    interface HTMLSmoothly0TableDemoElement extends Components.Smoothly0TableDemo, HTMLStencilElement {
    }
    var HTMLSmoothly0TableDemoElement: {
        prototype: HTMLSmoothly0TableDemoElement;
        new (): HTMLSmoothly0TableDemoElement;
    };
    interface HTMLSmoothly0TableExpandableCellElement extends Components.Smoothly0TableExpandableCell, HTMLStencilElement {
    }
    var HTMLSmoothly0TableExpandableCellElement: {
        prototype: HTMLSmoothly0TableExpandableCellElement;
        new (): HTMLSmoothly0TableExpandableCellElement;
    };
    interface HTMLSmoothly0TableExpandableRowElement extends Components.Smoothly0TableExpandableRow, HTMLStencilElement {
    }
    var HTMLSmoothly0TableExpandableRowElement: {
        prototype: HTMLSmoothly0TableExpandableRowElement;
        new (): HTMLSmoothly0TableExpandableRowElement;
    };
    interface HTMLSmoothly0TableHeaderElement extends Components.Smoothly0TableHeader, HTMLStencilElement {
    }
    var HTMLSmoothly0TableHeaderElement: {
        prototype: HTMLSmoothly0TableHeaderElement;
        new (): HTMLSmoothly0TableHeaderElement;
    };
    interface HTMLSmoothly0TableRowElement extends Components.Smoothly0TableRow, HTMLStencilElement {
    }
    var HTMLSmoothly0TableRowElement: {
        prototype: HTMLSmoothly0TableRowElement;
        new (): HTMLSmoothly0TableRowElement;
    };
    interface HTMLSmoothly0TriggerElement extends Components.Smoothly0Trigger, HTMLStencilElement {
    }
    var HTMLSmoothly0TriggerElement: {
        prototype: HTMLSmoothly0TriggerElement;
        new (): HTMLSmoothly0TriggerElement;
    };
    interface HTMLSmoothly0TriggerSinkElement extends Components.Smoothly0TriggerSink, HTMLStencilElement {
    }
    var HTMLSmoothly0TriggerSinkElement: {
        prototype: HTMLSmoothly0TriggerSinkElement;
        new (): HTMLSmoothly0TriggerSinkElement;
    };
    interface HTMLSmoothly0TriggerSourceElement extends Components.Smoothly0TriggerSource, HTMLStencilElement {
    }
    var HTMLSmoothly0TriggerSourceElement: {
        prototype: HTMLSmoothly0TriggerSourceElement;
        new (): HTMLSmoothly0TriggerSourceElement;
    };
    interface HTMLSmoothly0TupleElement extends Components.Smoothly0Tuple, HTMLStencilElement {
    }
    var HTMLSmoothly0TupleElement: {
        prototype: HTMLSmoothly0TupleElement;
        new (): HTMLSmoothly0TupleElement;
    };
    interface HTMLSmoothly0UrlencodedElement extends Components.Smoothly0Urlencoded, HTMLStencilElement {
    }
    var HTMLSmoothly0UrlencodedElement: {
        prototype: HTMLSmoothly0UrlencodedElement;
        new (): HTMLSmoothly0UrlencodedElement;
    };
    interface HTMLElementTagNameMap {
        "smoothly-0-accordion": HTMLSmoothly0AccordionElement;
        "smoothly-0-accordion-item": HTMLSmoothly0AccordionItemElement;
        "smoothly-0-app": HTMLSmoothly0AppElement;
        "smoothly-0-app-demo": HTMLSmoothly0AppDemoElement;
        "smoothly-0-backtotop": HTMLSmoothly0BacktotopElement;
        "smoothly-0-button": HTMLSmoothly0ButtonElement;
        "smoothly-0-calendar": HTMLSmoothly0CalendarElement;
        "smoothly-0-checkbox": HTMLSmoothly0CheckboxElement;
        "smoothly-0-country": HTMLSmoothly0CountryElement;
        "smoothly-0-dialog": HTMLSmoothly0DialogElement;
        "smoothly-0-dialog-demo": HTMLSmoothly0DialogDemoElement;
        "smoothly-0-display": HTMLSmoothly0DisplayElement;
        "smoothly-0-display-amount": HTMLSmoothly0DisplayAmountElement;
        "smoothly-0-display-date-time": HTMLSmoothly0DisplayDateTimeElement;
        "smoothly-0-display-demo": HTMLSmoothly0DisplayDemoElement;
        "smoothly-0-frame": HTMLSmoothly0FrameElement;
        "smoothly-0-google-font": HTMLSmoothly0GoogleFontElement;
        "smoothly-0-icon": HTMLSmoothly0IconElement;
        "smoothly-0-icon-demo": HTMLSmoothly0IconDemoElement;
        "smoothly-0-input": HTMLSmoothly0InputElement;
        "smoothly-0-input-date": HTMLSmoothly0InputDateElement;
        "smoothly-0-input-date-range": HTMLSmoothly0InputDateRangeElement;
        "smoothly-0-input-demo": HTMLSmoothly0InputDemoElement;
        "smoothly-0-input-month": HTMLSmoothly0InputMonthElement;
        "smoothly-0-item": HTMLSmoothly0ItemElement;
        "smoothly-0-menu-options": HTMLSmoothly0MenuOptionsElement;
        "smoothly-0-notification": HTMLSmoothly0NotificationElement;
        "smoothly-0-notifier": HTMLSmoothly0NotifierElement;
        "smoothly-0-option": HTMLSmoothly0OptionElement;
        "smoothly-0-picker": HTMLSmoothly0PickerElement;
        "smoothly-0-popup": HTMLSmoothly0PopupElement;
        "smoothly-0-quiet": HTMLSmoothly0QuietElement;
        "smoothly-0-radio": HTMLSmoothly0RadioElement;
        "smoothly-0-radio-button": HTMLSmoothly0RadioButtonElement;
        "smoothly-0-radio-button-item": HTMLSmoothly0RadioButtonItemElement;
        "smoothly-0-radio-group": HTMLSmoothly0RadioGroupElement;
        "smoothly-0-reorder": HTMLSmoothly0ReorderElement;
        "smoothly-0-room": HTMLSmoothly0RoomElement;
        "smoothly-0-select": HTMLSmoothly0SelectElement;
        "smoothly-0-select-demo": HTMLSmoothly0SelectDemoElement;
        "smoothly-0-selector": HTMLSmoothly0SelectorElement;
        "smoothly-0-skeleton": HTMLSmoothly0SkeletonElement;
        "smoothly-0-spinner": HTMLSmoothly0SpinnerElement;
        "smoothly-0-submit": HTMLSmoothly0SubmitElement;
        "smoothly-0-svg": HTMLSmoothly0SvgElement;
        "smoothly-0-tab": HTMLSmoothly0TabElement;
        "smoothly-0-tab-switch": HTMLSmoothly0TabSwitchElement;
        "smoothly-0-table": HTMLSmoothly0TableElement;
        "smoothly-0-table-cell": HTMLSmoothly0TableCellElement;
        "smoothly-0-table-demo": HTMLSmoothly0TableDemoElement;
        "smoothly-0-table-expandable-cell": HTMLSmoothly0TableExpandableCellElement;
        "smoothly-0-table-expandable-row": HTMLSmoothly0TableExpandableRowElement;
        "smoothly-0-table-header": HTMLSmoothly0TableHeaderElement;
        "smoothly-0-table-row": HTMLSmoothly0TableRowElement;
        "smoothly-0-trigger": HTMLSmoothly0TriggerElement;
        "smoothly-0-trigger-sink": HTMLSmoothly0TriggerSinkElement;
        "smoothly-0-trigger-source": HTMLSmoothly0TriggerSourceElement;
        "smoothly-0-tuple": HTMLSmoothly0TupleElement;
        "smoothly-0-urlencoded": HTMLSmoothly0UrlencodedElement;
    }
}
declare namespace LocalJSX {
    interface Smoothly0Accordion {
        "value"?: string;
    }
    interface Smoothly0AccordionItem {
        "brand"?: string | string[];
        "name"?: string;
        "onSmoothlyAccordionItemDidLoad"?: (event: Smoothly0AccordionItemCustomEvent<void>) => void;
        "onSmoothlyAccordionItemDidUnload"?: (event: Smoothly0AccordionItemCustomEvent<void>) => void;
        "onSmoothlyClose"?: (event: Smoothly0AccordionItemCustomEvent<{ name: string; open: boolean }>) => void;
        "onSmoothlyOpen"?: (event: Smoothly0AccordionItemCustomEvent<{ name: string; open: boolean }>) => void;
        "open"?: boolean;
    }
    interface Smoothly0App {
        "color"?: Color;
    }
    interface Smoothly0AppDemo {
        "baseUrl"?: string;
    }
    interface Smoothly0Backtotop {
        "bottom"?: string;
        "opacity"?: string;
        "right"?: string;
    }
    interface Smoothly0Button {
        "color"?: Color | undefined;
        "disabled"?: boolean;
        "download"?: boolean;
        "expand"?: Expand;
        "fill"?: Fill;
        "link"?: string;
        "type"?: "link" | "button";
    }
    interface Smoothly0Calendar {
        "color"?: Color;
        "doubleInput"?: boolean;
        "end"?: Date;
        "max"?: Date;
        "min"?: Date;
        "month"?: Date;
        "onDateRangeSet"?: (event: Smoothly0CalendarCustomEvent<DateRange>) => void;
        "onDateSet"?: (event: Smoothly0CalendarCustomEvent<Date>) => void;
        "onEndChanged"?: (event: Smoothly0CalendarCustomEvent<Date>) => void;
        "onStartChanged"?: (event: Smoothly0CalendarCustomEvent<Date>) => void;
        "onValueChanged"?: (event: Smoothly0CalendarCustomEvent<Date>) => void;
        "start"?: Date;
        "value"?: Date;
    }
    interface Smoothly0Checkbox {
        "disabled"?: boolean;
        "intermediate"?: boolean;
        "onChecked"?: (event: Smoothly0CheckboxCustomEvent<{ selected: boolean }>) => void;
        "selectAll"?: boolean;
        "selected"?: boolean;
        "size"?: "tiny" | "small" | "medium" | "large";
    }
    interface Smoothly0Country {
        "text"?: "alpha2" | "name" | "none";
        "value"?: CountryCode.Alpha2;
    }
    interface Smoothly0Dialog {
        "closable"?: boolean;
        "color"?: Color | undefined;
        "header"?: string | undefined;
        "open"?: boolean;
    }
    interface Smoothly0DialogDemo {
    }
    interface Smoothly0Display {
        "country"?: CountryCode.Alpha2;
        "currency"?: Currency;
        "format"?: DateTime.Format;
        "type"?: Type;
        "value"?: any;
    }
    interface Smoothly0DisplayAmount {
        "amount"?: number | string;
        "currency"?: Currency;
        "toInteger"?: boolean;
    }
    /**
     * DEPRECATED, use  <smoothly-0-display type="date-time">
     */
    interface Smoothly0DisplayDateTime {
        "datetime"?: DateTime;
    }
    interface Smoothly0DisplayDemo {
        "onNotice"?: (event: Smoothly0DisplayDemoCustomEvent<Notice>) => void;
    }
    interface Smoothly0Frame {
        "name"?: string;
        "onMessage"?: (event: Smoothly0FrameCustomEvent<Message<any>>) => void;
        "onTrigger"?: (event: Smoothly0FrameCustomEvent<Trigger>) => void;
        "origin"?: string | undefined;
        "url"?: string;
    }
    interface Smoothly0GoogleFont {
        "value"?: GoogleFont;
    }
    interface Smoothly0Icon {
        "color"?: Color;
        "fill"?: Fill;
        "name"?: string;
        "size"?: "tiny" | "small" | "medium" | "large";
        "toolTip"?: string;
    }
    interface Smoothly0IconDemo {
    }
    interface Smoothly0Input {
        "autocomplete"?: boolean;
        "currency"?: Currency;
        "disabled"?: boolean;
        "maxLength"?: number;
        "minLength"?: number;
        "name"?: string;
        "onSmoothlyBlur"?: (event: Smoothly0InputCustomEvent<void>) => void;
        "onSmoothlyChange"?: (event: Smoothly0InputCustomEvent<{ name: string; value: any }>) => void;
        "onSmoothlyInput"?: (event: Smoothly0InputCustomEvent<{ name: string; value: any }>) => void;
        "pattern"?: RegExp | undefined;
        "placeholder"?: string | undefined;
        "readonly"?: boolean;
        "required"?: boolean;
        "showLabel"?: boolean;
        "type"?: string;
        "value"?: any;
    }
    interface Smoothly0InputDate {
        "color"?: Color;
        "disabled"?: boolean;
        "flexible"?: boolean;
        "max"?: Date;
        "min"?: Date;
        "name"?: string;
        "onValueChanged"?: (event: Smoothly0InputDateCustomEvent<Date>) => void;
        "open"?: boolean;
        "value"?: Date;
    }
    interface Smoothly0InputDateRange {
        "clearable"?: boolean;
        "disabled"?: boolean;
        "end"?: Date;
        "labelEnd"?: string;
        "labelStart"?: string;
        "max"?: Date;
        "min"?: Date;
        "onDateRangeClear"?: (event: Smoothly0InputDateRangeCustomEvent<any>) => void;
        "onDateRangeSelected"?: (event: Smoothly0InputDateRangeCustomEvent<{ start: Date; end: Date }>) => void;
        "onValueChanged"?: (event: Smoothly0InputDateRangeCustomEvent<Date>) => void;
        "open"?: boolean;
        "showLabel"?: boolean;
        "start"?: Date;
        "value"?: Date;
    }
    interface Smoothly0InputDemo {
    }
    interface Smoothly0InputMonth {
        "onValueChanged"?: (event: Smoothly0InputMonthCustomEvent<Date>) => void;
        "value"?: Date;
    }
    interface Smoothly0Item {
        "marked"?: boolean;
        "onItemSelected"?: (event: Smoothly0ItemCustomEvent<void>) => void;
        "selected"?: boolean;
        "value"?: any;
    }
    interface Smoothly0MenuOptions {
        "emptyMenuLabel"?: string;
        "maxMenuHeight"?: "inherit";
        "mutable"?: boolean;
        "newOptionLabel"?: string;
        "onMenuEmpty"?: (event: Smoothly0MenuOptionsCustomEvent<boolean>) => void;
        "optionStyle"?: any;
        "options"?: Option[];
        "order"?: boolean;
        "resetHighlightOnOptionsChange"?: boolean;
        "toggle"?: boolean;
    }
    interface Smoothly0Notification {
        "notice"?: Notice;
        "onRemove"?: (event: Smoothly0NotificationCustomEvent<Notice>) => void;
    }
    interface Smoothly0Notifier {
    }
    interface Smoothly0Option {
        "aliases"?: string;
        "checkbox"?: boolean;
        "checked"?: boolean;
        "dataHighlight"?: boolean;
        "divider"?: boolean;
        "name"?: string;
        "new"?: boolean;
        "onOptionAdd"?: (event: Smoothly0OptionCustomEvent<{ name: string; value: string }>) => void;
        "onOptionHover"?: (event: Smoothly0OptionCustomEvent<{ value: any; name: string }>) => void;
        "onOptionSelect"?: (event: Smoothly0OptionCustomEvent<{ value: any; name: string }>) => void;
        "onOptionUnselect"?: (event: Smoothly0OptionCustomEvent<{ value: any; name: string }>) => void;
        "toggle"?: boolean;
        "value"?: string;
    }
    interface Smoothly0Picker {
        "disabled"?: boolean;
        "emptyMenuLabel"?: string;
        "label"?: string;
        "labelSetting"?: "hide" | "default";
        "maxHeight"?: string;
        "maxMenuHeight"?: string;
        "multiple"?: boolean;
        "mutable"?: boolean;
        "newOptionLabel"?: string;
        "onMenuClose"?: (event: Smoothly0PickerCustomEvent<Option[]>) => void;
        "onNotice"?: (event: Smoothly0PickerCustomEvent<Notice>) => void;
        "optionStyle"?: any;
        "options"?: (Option & { checked?: boolean })[];
        "readonly"?: boolean;
        "selectAllEnabled"?: boolean;
        "selectAllName"?: string;
        "selectNoneName"?: string;
        "selectionName"?: string;
        "selections"?: Option[];
        "valueValidator"?: (value: any) => [boolean, Notice | undefined];
    }
    interface Smoothly0Popup {
        "direction"?: "up" | "down";
        "onPopup"?: (event: Smoothly0PopupCustomEvent<boolean>) => void;
        "visible"?: boolean;
    }
    interface Smoothly0Quiet {
        "color"?: string;
    }
    interface Smoothly0Radio {
        "checked"?: boolean;
        "name"?: string;
        "onSmoothlySelected"?: (event: Smoothly0RadioCustomEvent<{ name: string; value: string }>) => void;
        "tabIndex"?: number;
        "value"?: string;
    }
    interface Smoothly0RadioButton {
        "decoration"?: "button" | "radio";
        "deselectable"?: boolean;
        "name"?: string;
        "onRadioButtonSelected"?: (event: Smoothly0RadioButtonCustomEvent<{ name: string | undefined; value: any }>) => void;
        "value"?: any;
    }
    interface Smoothly0RadioButtonItem {
        "color"?: Color;
        "disabled"?: boolean;
        "iconColor"?: Color;
        "onRadioItemSelectInternal"?: (event: Smoothly0RadioButtonItemCustomEvent<Selected>) => void;
        "selected"?: boolean;
        "value"?: any;
    }
    interface Smoothly0RadioGroup {
        "orientation"?: "horizontal" | "vertical";
    }
    interface Smoothly0Reorder {
        "onReorder"?: (event: Smoothly0ReorderCustomEvent<[number, number]>) => void;
    }
    interface Smoothly0Room {
        "icon"?: string;
        "label"?: string;
        "path"?: string | RegExp;
        "to"?: string;
    }
    interface Smoothly0Select {
        "background"?: string;
        "identifier"?: string;
        "onSelectionChanged"?: (event: Smoothly0SelectCustomEvent<{ identifier: string; value: string }>) => void;
        "value"?: string;
    }
    interface Smoothly0SelectDemo {
    }
    interface Smoothly0Selector {
        "disableFilter"?: boolean;
        "initialPrompt"?: string;
        "onSelected"?: (event: Smoothly0SelectorCustomEvent<any>) => void;
    }
    interface Smoothly0Skeleton {
        "align"?: "left" | "center" | "right";
        "color"?: string;
        "distance"?: string;
        "period"?: number;
        "width"?: string;
        "widths"?: string[];
    }
    interface Smoothly0Spinner {
        "active"?: boolean;
        "size"?: "small" | "medium" | "large";
    }
    interface Smoothly0Submit {
        "color"?: Color;
        "disabled"?: boolean;
        "expand"?: Expand;
        "fill"?: Fill;
        "onSubmit"?: (event: Smoothly0SubmitCustomEvent<Data>) => void;
        "prevent"?: boolean;
        "processing"?: boolean;
    }
    interface Smoothly0Svg {
        "color"?: string;
        "size"?: "large" | "medium" | "small" | "tiny" | { height: string; width: string };
        "url": string;
    }
    interface Smoothly0Tab {
        "label"?: string;
        "onExpansionOpen"?: (event: Smoothly0TabCustomEvent<HTMLElement>) => void;
        "open"?: boolean;
    }
    interface Smoothly0TabSwitch {
    }
    interface Smoothly0Table {
        "onSmoothlyNestedTable"?: (event: Smoothly0TableCustomEvent<() => void>) => void;
        "onSpotlightChange"?: (event: Smoothly0TableCustomEvent<{ allowSpotlight: boolean; owner?: EventTarget }>) => void;
        "onTableLoad"?: (event: Smoothly0TableCustomEvent<(owner: EventTarget) => void>) => void;
        "root"?: boolean;
    }
    interface Smoothly0TableCell {
    }
    interface Smoothly0TableDemo {
    }
    interface Smoothly0TableExpandableCell {
        "align"?: "left" | "center" | "right";
        "onExpandableChange"?: (event: Smoothly0TableExpandableCellCustomEvent<boolean>) => void;
        "onExpandableLoad"?: (event: Smoothly0TableExpandableCellCustomEvent<{ allowSpotlight: (allowed: boolean) => void }>) => void;
        "onExpansionLoad"?: (event: Smoothly0TableExpandableCellCustomEvent<void>) => void;
        "onExpansionOpen"?: (event: Smoothly0TableExpandableCellCustomEvent<HTMLElement>) => void;
        "open"?: boolean;
    }
    interface Smoothly0TableExpandableRow {
        "align"?: "left" | "center" | "right";
        "onExpandableChange"?: (event: Smoothly0TableExpandableRowCustomEvent<boolean>) => void;
        "onExpandableLoad"?: (event: Smoothly0TableExpandableRowCustomEvent<{ allowSpotlight: (allowed: boolean) => void }>) => void;
        "onExpansionOpen"?: (event: Smoothly0TableExpandableRowCustomEvent<HTMLElement>) => void;
        "open"?: boolean;
    }
    interface Smoothly0TableHeader {
        "name"?: string;
    }
    interface Smoothly0TableRow {
    }
    interface Smoothly0Trigger {
        "color"?: Color | undefined;
        "disabled"?: boolean;
        "expand"?: Expand;
        "fill"?: Fill;
        "name"?: string;
        "onTrigger"?: (event: Smoothly0TriggerCustomEvent<Trigger>) => void;
        "type"?: "link" | "button";
        "value"?: any;
    }
    interface Smoothly0TriggerSink {
        "context"?: Window;
        "destination"?: string;
        "filter"?: string;
    }
    interface Smoothly0TriggerSource {
        "listen"?: string;
        "onMessage"?: (event: Smoothly0TriggerSourceCustomEvent<Message<any>>) => void;
        "onTrigger"?: (event: Smoothly0TriggerSourceCustomEvent<Trigger>) => void;
    }
    interface Smoothly0Tuple {
        "tuple"?: [string, string];
    }
    interface Smoothly0Urlencoded {
        "data"?: string;
    }
    interface IntrinsicElements {
        "smoothly-0-accordion": Smoothly0Accordion;
        "smoothly-0-accordion-item": Smoothly0AccordionItem;
        "smoothly-0-app": Smoothly0App;
        "smoothly-0-app-demo": Smoothly0AppDemo;
        "smoothly-0-backtotop": Smoothly0Backtotop;
        "smoothly-0-button": Smoothly0Button;
        "smoothly-0-calendar": Smoothly0Calendar;
        "smoothly-0-checkbox": Smoothly0Checkbox;
        "smoothly-0-country": Smoothly0Country;
        "smoothly-0-dialog": Smoothly0Dialog;
        "smoothly-0-dialog-demo": Smoothly0DialogDemo;
        "smoothly-0-display": Smoothly0Display;
        "smoothly-0-display-amount": Smoothly0DisplayAmount;
        "smoothly-0-display-date-time": Smoothly0DisplayDateTime;
        "smoothly-0-display-demo": Smoothly0DisplayDemo;
        "smoothly-0-frame": Smoothly0Frame;
        "smoothly-0-google-font": Smoothly0GoogleFont;
        "smoothly-0-icon": Smoothly0Icon;
        "smoothly-0-icon-demo": Smoothly0IconDemo;
        "smoothly-0-input": Smoothly0Input;
        "smoothly-0-input-date": Smoothly0InputDate;
        "smoothly-0-input-date-range": Smoothly0InputDateRange;
        "smoothly-0-input-demo": Smoothly0InputDemo;
        "smoothly-0-input-month": Smoothly0InputMonth;
        "smoothly-0-item": Smoothly0Item;
        "smoothly-0-menu-options": Smoothly0MenuOptions;
        "smoothly-0-notification": Smoothly0Notification;
        "smoothly-0-notifier": Smoothly0Notifier;
        "smoothly-0-option": Smoothly0Option;
        "smoothly-0-picker": Smoothly0Picker;
        "smoothly-0-popup": Smoothly0Popup;
        "smoothly-0-quiet": Smoothly0Quiet;
        "smoothly-0-radio": Smoothly0Radio;
        "smoothly-0-radio-button": Smoothly0RadioButton;
        "smoothly-0-radio-button-item": Smoothly0RadioButtonItem;
        "smoothly-0-radio-group": Smoothly0RadioGroup;
        "smoothly-0-reorder": Smoothly0Reorder;
        "smoothly-0-room": Smoothly0Room;
        "smoothly-0-select": Smoothly0Select;
        "smoothly-0-select-demo": Smoothly0SelectDemo;
        "smoothly-0-selector": Smoothly0Selector;
        "smoothly-0-skeleton": Smoothly0Skeleton;
        "smoothly-0-spinner": Smoothly0Spinner;
        "smoothly-0-submit": Smoothly0Submit;
        "smoothly-0-svg": Smoothly0Svg;
        "smoothly-0-tab": Smoothly0Tab;
        "smoothly-0-tab-switch": Smoothly0TabSwitch;
        "smoothly-0-table": Smoothly0Table;
        "smoothly-0-table-cell": Smoothly0TableCell;
        "smoothly-0-table-demo": Smoothly0TableDemo;
        "smoothly-0-table-expandable-cell": Smoothly0TableExpandableCell;
        "smoothly-0-table-expandable-row": Smoothly0TableExpandableRow;
        "smoothly-0-table-header": Smoothly0TableHeader;
        "smoothly-0-table-row": Smoothly0TableRow;
        "smoothly-0-trigger": Smoothly0Trigger;
        "smoothly-0-trigger-sink": Smoothly0TriggerSink;
        "smoothly-0-trigger-source": Smoothly0TriggerSource;
        "smoothly-0-tuple": Smoothly0Tuple;
        "smoothly-0-urlencoded": Smoothly0Urlencoded;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "smoothly-0-accordion": LocalJSX.Smoothly0Accordion & JSXBase.HTMLAttributes<HTMLSmoothly0AccordionElement>;
            "smoothly-0-accordion-item": LocalJSX.Smoothly0AccordionItem & JSXBase.HTMLAttributes<HTMLSmoothly0AccordionItemElement>;
            "smoothly-0-app": LocalJSX.Smoothly0App & JSXBase.HTMLAttributes<HTMLSmoothly0AppElement>;
            "smoothly-0-app-demo": LocalJSX.Smoothly0AppDemo & JSXBase.HTMLAttributes<HTMLSmoothly0AppDemoElement>;
            "smoothly-0-backtotop": LocalJSX.Smoothly0Backtotop & JSXBase.HTMLAttributes<HTMLSmoothly0BacktotopElement>;
            "smoothly-0-button": LocalJSX.Smoothly0Button & JSXBase.HTMLAttributes<HTMLSmoothly0ButtonElement>;
            "smoothly-0-calendar": LocalJSX.Smoothly0Calendar & JSXBase.HTMLAttributes<HTMLSmoothly0CalendarElement>;
            "smoothly-0-checkbox": LocalJSX.Smoothly0Checkbox & JSXBase.HTMLAttributes<HTMLSmoothly0CheckboxElement>;
            "smoothly-0-country": LocalJSX.Smoothly0Country & JSXBase.HTMLAttributes<HTMLSmoothly0CountryElement>;
            "smoothly-0-dialog": LocalJSX.Smoothly0Dialog & JSXBase.HTMLAttributes<HTMLSmoothly0DialogElement>;
            "smoothly-0-dialog-demo": LocalJSX.Smoothly0DialogDemo & JSXBase.HTMLAttributes<HTMLSmoothly0DialogDemoElement>;
            "smoothly-0-display": LocalJSX.Smoothly0Display & JSXBase.HTMLAttributes<HTMLSmoothly0DisplayElement>;
            "smoothly-0-display-amount": LocalJSX.Smoothly0DisplayAmount & JSXBase.HTMLAttributes<HTMLSmoothly0DisplayAmountElement>;
            /**
             * DEPRECATED, use  <smoothly-0-display type="date-time">
             */
            "smoothly-0-display-date-time": LocalJSX.Smoothly0DisplayDateTime & JSXBase.HTMLAttributes<HTMLSmoothly0DisplayDateTimeElement>;
            "smoothly-0-display-demo": LocalJSX.Smoothly0DisplayDemo & JSXBase.HTMLAttributes<HTMLSmoothly0DisplayDemoElement>;
            "smoothly-0-frame": LocalJSX.Smoothly0Frame & JSXBase.HTMLAttributes<HTMLSmoothly0FrameElement>;
            "smoothly-0-google-font": LocalJSX.Smoothly0GoogleFont & JSXBase.HTMLAttributes<HTMLSmoothly0GoogleFontElement>;
            "smoothly-0-icon": LocalJSX.Smoothly0Icon & JSXBase.HTMLAttributes<HTMLSmoothly0IconElement>;
            "smoothly-0-icon-demo": LocalJSX.Smoothly0IconDemo & JSXBase.HTMLAttributes<HTMLSmoothly0IconDemoElement>;
            "smoothly-0-input": LocalJSX.Smoothly0Input & JSXBase.HTMLAttributes<HTMLSmoothly0InputElement>;
            "smoothly-0-input-date": LocalJSX.Smoothly0InputDate & JSXBase.HTMLAttributes<HTMLSmoothly0InputDateElement>;
            "smoothly-0-input-date-range": LocalJSX.Smoothly0InputDateRange & JSXBase.HTMLAttributes<HTMLSmoothly0InputDateRangeElement>;
            "smoothly-0-input-demo": LocalJSX.Smoothly0InputDemo & JSXBase.HTMLAttributes<HTMLSmoothly0InputDemoElement>;
            "smoothly-0-input-month": LocalJSX.Smoothly0InputMonth & JSXBase.HTMLAttributes<HTMLSmoothly0InputMonthElement>;
            "smoothly-0-item": LocalJSX.Smoothly0Item & JSXBase.HTMLAttributes<HTMLSmoothly0ItemElement>;
            "smoothly-0-menu-options": LocalJSX.Smoothly0MenuOptions & JSXBase.HTMLAttributes<HTMLSmoothly0MenuOptionsElement>;
            "smoothly-0-notification": LocalJSX.Smoothly0Notification & JSXBase.HTMLAttributes<HTMLSmoothly0NotificationElement>;
            "smoothly-0-notifier": LocalJSX.Smoothly0Notifier & JSXBase.HTMLAttributes<HTMLSmoothly0NotifierElement>;
            "smoothly-0-option": LocalJSX.Smoothly0Option & JSXBase.HTMLAttributes<HTMLSmoothly0OptionElement>;
            "smoothly-0-picker": LocalJSX.Smoothly0Picker & JSXBase.HTMLAttributes<HTMLSmoothly0PickerElement>;
            "smoothly-0-popup": LocalJSX.Smoothly0Popup & JSXBase.HTMLAttributes<HTMLSmoothly0PopupElement>;
            "smoothly-0-quiet": LocalJSX.Smoothly0Quiet & JSXBase.HTMLAttributes<HTMLSmoothly0QuietElement>;
            "smoothly-0-radio": LocalJSX.Smoothly0Radio & JSXBase.HTMLAttributes<HTMLSmoothly0RadioElement>;
            "smoothly-0-radio-button": LocalJSX.Smoothly0RadioButton & JSXBase.HTMLAttributes<HTMLSmoothly0RadioButtonElement>;
            "smoothly-0-radio-button-item": LocalJSX.Smoothly0RadioButtonItem & JSXBase.HTMLAttributes<HTMLSmoothly0RadioButtonItemElement>;
            "smoothly-0-radio-group": LocalJSX.Smoothly0RadioGroup & JSXBase.HTMLAttributes<HTMLSmoothly0RadioGroupElement>;
            "smoothly-0-reorder": LocalJSX.Smoothly0Reorder & JSXBase.HTMLAttributes<HTMLSmoothly0ReorderElement>;
            "smoothly-0-room": LocalJSX.Smoothly0Room & JSXBase.HTMLAttributes<HTMLSmoothly0RoomElement>;
            "smoothly-0-select": LocalJSX.Smoothly0Select & JSXBase.HTMLAttributes<HTMLSmoothly0SelectElement>;
            "smoothly-0-select-demo": LocalJSX.Smoothly0SelectDemo & JSXBase.HTMLAttributes<HTMLSmoothly0SelectDemoElement>;
            "smoothly-0-selector": LocalJSX.Smoothly0Selector & JSXBase.HTMLAttributes<HTMLSmoothly0SelectorElement>;
            "smoothly-0-skeleton": LocalJSX.Smoothly0Skeleton & JSXBase.HTMLAttributes<HTMLSmoothly0SkeletonElement>;
            "smoothly-0-spinner": LocalJSX.Smoothly0Spinner & JSXBase.HTMLAttributes<HTMLSmoothly0SpinnerElement>;
            "smoothly-0-submit": LocalJSX.Smoothly0Submit & JSXBase.HTMLAttributes<HTMLSmoothly0SubmitElement>;
            "smoothly-0-svg": LocalJSX.Smoothly0Svg & JSXBase.HTMLAttributes<HTMLSmoothly0SvgElement>;
            "smoothly-0-tab": LocalJSX.Smoothly0Tab & JSXBase.HTMLAttributes<HTMLSmoothly0TabElement>;
            "smoothly-0-tab-switch": LocalJSX.Smoothly0TabSwitch & JSXBase.HTMLAttributes<HTMLSmoothly0TabSwitchElement>;
            "smoothly-0-table": LocalJSX.Smoothly0Table & JSXBase.HTMLAttributes<HTMLSmoothly0TableElement>;
            "smoothly-0-table-cell": LocalJSX.Smoothly0TableCell & JSXBase.HTMLAttributes<HTMLSmoothly0TableCellElement>;
            "smoothly-0-table-demo": LocalJSX.Smoothly0TableDemo & JSXBase.HTMLAttributes<HTMLSmoothly0TableDemoElement>;
            "smoothly-0-table-expandable-cell": LocalJSX.Smoothly0TableExpandableCell & JSXBase.HTMLAttributes<HTMLSmoothly0TableExpandableCellElement>;
            "smoothly-0-table-expandable-row": LocalJSX.Smoothly0TableExpandableRow & JSXBase.HTMLAttributes<HTMLSmoothly0TableExpandableRowElement>;
            "smoothly-0-table-header": LocalJSX.Smoothly0TableHeader & JSXBase.HTMLAttributes<HTMLSmoothly0TableHeaderElement>;
            "smoothly-0-table-row": LocalJSX.Smoothly0TableRow & JSXBase.HTMLAttributes<HTMLSmoothly0TableRowElement>;
            "smoothly-0-trigger": LocalJSX.Smoothly0Trigger & JSXBase.HTMLAttributes<HTMLSmoothly0TriggerElement>;
            "smoothly-0-trigger-sink": LocalJSX.Smoothly0TriggerSink & JSXBase.HTMLAttributes<HTMLSmoothly0TriggerSinkElement>;
            "smoothly-0-trigger-source": LocalJSX.Smoothly0TriggerSource & JSXBase.HTMLAttributes<HTMLSmoothly0TriggerSourceElement>;
            "smoothly-0-tuple": LocalJSX.Smoothly0Tuple & JSXBase.HTMLAttributes<HTMLSmoothly0TupleElement>;
            "smoothly-0-urlencoded": LocalJSX.Smoothly0Urlencoded & JSXBase.HTMLAttributes<HTMLSmoothly0UrlencodedElement>;
        }
    }
}
